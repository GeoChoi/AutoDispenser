
autoDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ad0  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000859  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000503  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004af  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014e  00000000  00000000  0000210f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000225d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	77 d0       	rcall	.+238    	; 0x188 <main>
  9a:	da c0       	rjmp	.+436    	; 0x250 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <OC0PinStart>:
	//? ??? timer ??
}

int getPWMvalue_TC3(float percentage){
	return percentage*400;
}
  9e:	83 b7       	in	r24, 0x33	; 51
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	83 bf       	out	0x33, r24	; 51
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	83 bf       	out	0x33, r24	; 51
  aa:	08 95       	ret

000000ac <OC0PinStop>:
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	83 bf       	out	0x33, r24	; 51
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	83 bf       	out	0x33, r24	; 51
  b8:	08 95       	ret

000000ba <InitializeTimer0>:
  ba:	87 b3       	in	r24, 0x17	; 23
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	87 bb       	out	0x17, r24	; 23
  c0:	83 b7       	in	r24, 0x33	; 51
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	83 bf       	out	0x33, r24	; 51
  c6:	f2 df       	rcall	.-28     	; 0xac <OC0PinStop>
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	83 bf       	out	0x33, r24	; 51
  ce:	83 b7       	in	r24, 0x33	; 51
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	83 bf       	out	0x33, r24	; 51
  d4:	8d e7       	ldi	r24, 0x7D	; 125
  d6:	81 bf       	out	0x31, r24	; 49
  d8:	08 95       	ret

000000da <OC2PinStart>:
  da:	85 b5       	in	r24, 0x25	; 37
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	85 bd       	out	0x25, r24	; 37
  e0:	85 b5       	in	r24, 0x25	; 37
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	85 bd       	out	0x25, r24	; 37
  e6:	08 95       	ret

000000e8 <OC2PinStop>:
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	8f 7e       	andi	r24, 0xEF	; 239
  ec:	85 bd       	out	0x25, r24	; 37
  ee:	85 b5       	in	r24, 0x25	; 37
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	85 bd       	out	0x25, r24	; 37
  f4:	08 95       	ret

000000f6 <InitializeTimer2>:
  f6:	87 b3       	in	r24, 0x17	; 23
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	85 bd       	out	0x25, r24	; 37
 102:	f2 df       	rcall	.-28     	; 0xe8 <OC2PinStop>
 104:	85 b5       	in	r24, 0x25	; 37
 106:	81 60       	ori	r24, 0x01	; 1
 108:	85 bd       	out	0x25, r24	; 37
 10a:	85 b5       	in	r24, 0x25	; 37
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	85 bd       	out	0x25, r24	; 37
 110:	8d e7       	ldi	r24, 0x7D	; 125
 112:	83 bd       	out	0x23, r24	; 35
 114:	08 95       	ret

00000116 <InitializeTimer3>:
 116:	82 b1       	in	r24, 0x02	; 2
 118:	88 63       	ori	r24, 0x38	; 56
 11a:	82 b9       	out	0x02, r24	; 2
 11c:	eb e8       	ldi	r30, 0x8B	; 139
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 83       	st	Z, r24
 126:	aa e8       	ldi	r26, 0x8A	; 138
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	88 61       	ori	r24, 0x18	; 24
 12e:	8c 93       	st	X, r24
 130:	80 81       	ld	r24, Z
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	80 83       	st	Z, r24
 136:	80 81       	ld	r24, Z
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	80 83       	st	Z, r24
 13c:	80 81       	ld	r24, Z
 13e:	8f 7e       	andi	r24, 0xEF	; 239
 140:	80 83       	st	Z, r24
 142:	80 81       	ld	r24, Z
 144:	80 62       	ori	r24, 0x20	; 32
 146:	80 83       	st	Z, r24
 148:	80 81       	ld	r24, Z
 14a:	8f 7e       	andi	r24, 0xEF	; 239
 14c:	80 83       	st	Z, r24
 14e:	80 81       	ld	r24, Z
 150:	80 62       	ori	r24, 0x20	; 32
 152:	80 83       	st	Z, r24
 154:	8c 91       	ld	r24, X
 156:	82 60       	ori	r24, 0x02	; 2
 158:	8c 93       	st	X, r24
 15a:	80 e2       	ldi	r24, 0x20	; 32
 15c:	9e e4       	ldi	r25, 0x4E	; 78
 15e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 162:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 166:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 16a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	9c e9       	ldi	r25, 0x9C	; 156
 172:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 176:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 17a:	8f e3       	ldi	r24, 0x3F	; 63
 17c:	9c e9       	ldi	r25, 0x9C	; 156
 17e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 182:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 186:	08 95       	ret

00000188 <main>:

#include "TC_config.h"

int main(void)
{
	DDRA |= (1 << PORTA0);
 188:	8a b3       	in	r24, 0x1a	; 26
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	8a bb       	out	0x1a, r24	; 26
	
	DDRC |= (1 << PORTC1) | (1 << PORTC2);//PORTC1 : CW, PORTC2 : EN;
 18e:	84 b3       	in	r24, 0x14	; 20
 190:	86 60       	ori	r24, 0x06	; 6
 192:	84 bb       	out	0x14, r24	; 20
	DDRC |= (1 << PORTC3) | (1 << PORTC4);//PORTC3 : CW, PORTC4 : EN;
 194:	84 b3       	in	r24, 0x14	; 20
 196:	88 61       	ori	r24, 0x18	; 24
 198:	84 bb       	out	0x14, r24	; 20

	PORTC &= ~(1 << PORTC2);//PORTC2 low : enable motor driver
 19a:	85 b3       	in	r24, 0x15	; 21
 19c:	8b 7f       	andi	r24, 0xFB	; 251
 19e:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << PORTC4);//PORTC4 low : enable motor driver
 1a0:	85 b3       	in	r24, 0x15	; 21
 1a2:	8f 7e       	andi	r24, 0xEF	; 239
 1a4:	85 bb       	out	0x15, r24	; 21
	
	InitializeTimer0();
 1a6:	89 df       	rcall	.-238    	; 0xba <InitializeTimer0>
	InitializeTimer1();
	InitializeTimer2();//PTB7을 OC2 핀으로 사용 OC1C 핀과 겹칩 주의
 1a8:	a6 df       	rcall	.-180    	; 0xf6 <InitializeTimer2>
	InitializeTimer3();
 1aa:	b5 df       	rcall	.-150    	; 0x116 <InitializeTimer3>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	83 e2       	ldi	r24, 0x23	; 35
 1b0:	94 ef       	ldi	r25, 0xF4	; 244
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x2a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x34>
	_delay_ms(5000);
	
	OC0PinStart();
 1bc:	00 00       	nop
 1be:	6f df       	rcall	.-290    	; 0x9e <OC0PinStart>
	OC2PinStart();
 1c0:	8c df       	rcall	.-232    	; 0xda <OC2PinStart>
 1c2:	85 b3       	in	r24, 0x15	; 21
	while(1)
	{ 
		PORTC |= (1 << PORTC1);//PORTC1 high : CCW : leftmove
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	00 e2       	ldi	r16, 0x20	; 32
		OCR1A = ICR1VALUE/2;
 1ca:	1e e4       	ldi	r17, 0x4E	; 78
 1cc:	1b bd       	out	0x2b, r17	; 43
 1ce:	0a bd       	out	0x2a, r16	; 42
		
		PORTC |= (1 << PORTC3);//PORTC3 high : CCW : down
 1d0:	85 b3       	in	r24, 0x15	; 21
 1d2:	88 60       	ori	r24, 0x08	; 8
 1d4:	85 bb       	out	0x15, r24	; 21
		OC2PinStart();
 1d6:	81 df       	rcall	.-254    	; 0xda <OC2PinStart>
 1d8:	8b b3       	in	r24, 0x1b	; 27
		
		PORTA &= ~(1 << PORTA0);
 1da:	8e 7f       	andi	r24, 0xFE	; 254
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	83 ed       	ldi	r24, 0xD3	; 211
 1e2:	90 e3       	ldi	r25, 0x30	; 48
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x5c>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x66>
 1ee:	00 00       	nop
		_delay_ms(1000);
		
		OC2PinStop();
 1f0:	7b df       	rcall	.-266    	; 0xe8 <OC2PinStop>
 1f2:	c0 e4       	ldi	r28, 0x40	; 64
		OCR1A = ICR1VALUE;
 1f4:	dc e9       	ldi	r29, 0x9C	; 156
 1f6:	db bd       	out	0x2b, r29	; 43
 1f8:	ca bd       	out	0x2a, r28	; 42
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	83 ed       	ldi	r24, 0xD3	; 211
 1fe:	90 e3       	ldi	r25, 0x30	; 48
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x78>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x82>
 20a:	00 00       	nop
 20c:	85 b3       	in	r24, 0x15	; 21
		_delay_ms(1000);
		
		PORTC &= ~(1 << PORTC1);//PORTC1 low : CW :rightmove
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	85 bb       	out	0x15, r24	; 21
		OCR1A = ICR1VALUE/2;
 212:	1b bd       	out	0x2b, r17	; 43
 214:	0a bd       	out	0x2a, r16	; 42
		
		PORTC &= ~(1 << PORTC3);//PORTC3 low : CW : up
 216:	85 b3       	in	r24, 0x15	; 21
 218:	87 7f       	andi	r24, 0xF7	; 247
 21a:	85 bb       	out	0x15, r24	; 21
		OC2PinStart();
 21c:	5e df       	rcall	.-324    	; 0xda <OC2PinStart>
 21e:	8b b3       	in	r24, 0x1b	; 27
		PORTA |= (1 << PORTA0);
 220:	81 60       	ori	r24, 0x01	; 1
 222:	8b bb       	out	0x1b, r24	; 27
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	83 ed       	ldi	r24, 0xD3	; 211
 228:	90 e3       	ldi	r25, 0x30	; 48
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0xa2>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0xac>
 234:	00 00       	nop
		_delay_ms(1000);
		
		OC2PinStop();
 236:	58 df       	rcall	.-336    	; 0xe8 <OC2PinStop>
 238:	db bd       	out	0x2b, r29	; 43
		OCR1A = ICR1VALUE;
 23a:	ca bd       	out	0x2a, r28	; 42
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	83 ed       	ldi	r24, 0xD3	; 211
 240:	90 e3       	ldi	r25, 0x30	; 48
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0xba>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0xc4>
 24c:	00 00       	nop
 24e:	b9 cf       	rjmp	.-142    	; 0x1c2 <main+0x3a>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
