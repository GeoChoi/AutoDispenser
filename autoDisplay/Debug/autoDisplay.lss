
autoDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000424  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  000004bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef1  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ca  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e2  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  0000257c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000580  00000000  00000000  00002774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a9  00000000  00000000  00002cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000349d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	4b c1       	rjmp	.+662    	; 0x2d0 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	60 d1       	rcall	.+704    	; 0x384 <main>
  c4:	ad c1       	rjmp	.+858    	; 0x420 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <InitializeTimer0>:
	verticalMove();
	h_ms = x_mm*10;
	v_ms = y_mm*25;
	curX += x_mm;
	curY += y_mm;
}
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	87 bb       	out	0x17, r24	; 23
  ce:	83 b7       	in	r24, 0x33	; 51
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	83 bf       	out	0x33, r24	; 51
  d4:	83 b7       	in	r24, 0x33	; 51
  d6:	8f 7e       	andi	r24, 0xEF	; 239
  d8:	83 bf       	out	0x33, r24	; 51
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	83 bf       	out	0x33, r24	; 51
  e0:	83 b7       	in	r24, 0x33	; 51
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	83 bf       	out	0x33, r24	; 51
  e6:	83 b7       	in	r24, 0x33	; 51
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	83 bf       	out	0x33, r24	; 51
  ec:	8c e7       	ldi	r24, 0x7C	; 124
  ee:	81 bf       	out	0x31, r24	; 49
  f0:	08 95       	ret

000000f2 <InitializeTimer2>:
  f2:	87 b3       	in	r24, 0x17	; 23
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	85 b5       	in	r24, 0x25	; 37
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	85 bd       	out	0x25, r24	; 37
  fe:	85 b5       	in	r24, 0x25	; 37
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	85 bd       	out	0x25, r24	; 37
 104:	85 b5       	in	r24, 0x25	; 37
 106:	80 62       	ori	r24, 0x20	; 32
 108:	85 bd       	out	0x25, r24	; 37
 10a:	85 b5       	in	r24, 0x25	; 37
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	85 bd       	out	0x25, r24	; 37
 110:	85 b5       	in	r24, 0x25	; 37
 112:	82 60       	ori	r24, 0x02	; 2
 114:	85 bd       	out	0x25, r24	; 37
 116:	8c e7       	ldi	r24, 0x7C	; 124
 118:	83 bd       	out	0x23, r24	; 35
 11a:	08 95       	ret

0000011c <InitializeTimer1>:
 11c:	8f b5       	in	r24, 0x2f	; 47
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	8f bd       	out	0x2f, r24	; 47
 122:	8e b5       	in	r24, 0x2e	; 46
 124:	88 61       	ori	r24, 0x18	; 24
 126:	8e bd       	out	0x2e, r24	; 46
 128:	8e b5       	in	r24, 0x2e	; 46
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	8e bd       	out	0x2e, r24	; 46
 12e:	8f e7       	ldi	r24, 0x7F	; 127
 130:	9e e3       	ldi	r25, 0x3E	; 62
 132:	97 bd       	out	0x27, r25	; 39
 134:	86 bd       	out	0x26, r24	; 38
 136:	08 95       	ret

00000138 <InitializeTimer3>:
 138:	82 b1       	in	r24, 0x02	; 2
 13a:	88 63       	ori	r24, 0x38	; 56
 13c:	82 b9       	out	0x02, r24	; 2
 13e:	eb e8       	ldi	r30, 0x8B	; 139
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
 148:	aa e8       	ldi	r26, 0x8A	; 138
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	8c 91       	ld	r24, X
 14e:	88 61       	ori	r24, 0x18	; 24
 150:	8c 93       	st	X, r24
 152:	80 81       	ld	r24, Z
 154:	8f 7b       	andi	r24, 0xBF	; 191
 156:	80 83       	st	Z, r24
 158:	80 81       	ld	r24, Z
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	80 83       	st	Z, r24
 15e:	80 81       	ld	r24, Z
 160:	8f 7e       	andi	r24, 0xEF	; 239
 162:	80 83       	st	Z, r24
 164:	80 81       	ld	r24, Z
 166:	80 62       	ori	r24, 0x20	; 32
 168:	80 83       	st	Z, r24
 16a:	80 81       	ld	r24, Z
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	80 83       	st	Z, r24
 170:	80 81       	ld	r24, Z
 172:	88 60       	ori	r24, 0x08	; 8
 174:	80 83       	st	Z, r24
 176:	8c 91       	ld	r24, X
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	8c 93       	st	X, r24
 17c:	80 e4       	ldi	r24, 0x40	; 64
 17e:	9c e9       	ldi	r25, 0x9C	; 156
 180:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 184:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 188:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 18c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 190:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 194:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 198:	8f e3       	ldi	r24, 0x3F	; 63
 19a:	9c e9       	ldi	r25, 0x9C	; 156
 19c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 1a4:	08 95       	ret

000001a6 <verticalMove>:
 1a6:	83 b7       	in	r24, 0x33	; 51
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	83 bf       	out	0x33, r24	; 51
 1ac:	83 b7       	in	r24, 0x33	; 51
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	83 bf       	out	0x33, r24	; 51
 1b2:	08 95       	ret

000001b4 <verticalStop>:
 1b4:	83 b7       	in	r24, 0x33	; 51
 1b6:	8f 7e       	andi	r24, 0xEF	; 239
 1b8:	83 bf       	out	0x33, r24	; 51
 1ba:	83 b7       	in	r24, 0x33	; 51
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	83 bf       	out	0x33, r24	; 51
 1c0:	08 95       	ret

000001c2 <horizontalMove>:
 1c2:	85 b5       	in	r24, 0x25	; 37
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	85 bd       	out	0x25, r24	; 37
 1c8:	85 b5       	in	r24, 0x25	; 37
 1ca:	8f 7d       	andi	r24, 0xDF	; 223
 1cc:	85 bd       	out	0x25, r24	; 37
 1ce:	08 95       	ret

000001d0 <horizontalStop>:
 1d0:	85 b5       	in	r24, 0x25	; 37
 1d2:	8f 7e       	andi	r24, 0xEF	; 239
 1d4:	85 bd       	out	0x25, r24	; 37
 1d6:	85 b5       	in	r24, 0x25	; 37
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	85 bd       	out	0x25, r24	; 37
 1dc:	08 95       	ret

000001de <MoveXY_absolute>:

void MoveXY_absolute(unsigned int dstX, unsigned int dstY) {
 1de:	cf 92       	push	r12
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	6c 01       	movw	r12, r24
 1f0:	7b 01       	movw	r14, r22
	int Xdistance = dstX-curX;
 1f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <curX>
 1f6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <curX+0x1>
 1fa:	96 01       	movw	r18, r12
 1fc:	28 1b       	sub	r18, r24
 1fe:	39 0b       	sbc	r19, r25
 200:	c9 01       	movw	r24, r18
 202:	e9 01       	movw	r28, r18
	int Ydistance = dstY-curY;
 204:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <curY>
 208:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <curY+0x1>
 20c:	ab 01       	movw	r20, r22
 20e:	42 1b       	sub	r20, r18
 210:	53 0b       	sbc	r21, r19
 212:	9a 01       	movw	r18, r20
 214:	8a 01       	movw	r16, r20
	
	if(Xdistance >= 0) PORTC &= ~(1<<PORTC5);
 216:	99 23       	and	r25, r25
 218:	24 f0       	brlt	.+8      	; 0x222 <MoveXY_absolute+0x44>
 21a:	85 b3       	in	r24, 0x15	; 21
 21c:	8f 7d       	andi	r24, 0xDF	; 223
 21e:	85 bb       	out	0x15, r24	; 21
 220:	07 c0       	rjmp	.+14     	; 0x230 <MoveXY_absolute+0x52>
	else {
		PORTC |= (1<<PORTC5);
 222:	45 b3       	in	r20, 0x15	; 21
 224:	40 62       	ori	r20, 0x20	; 32
 226:	45 bb       	out	0x15, r20	; 21
		Xdistance = -Xdistance;
 228:	cc 27       	eor	r28, r28
 22a:	dd 27       	eor	r29, r29
 22c:	c8 1b       	sub	r28, r24
 22e:	d9 0b       	sbc	r29, r25
	}
	
	if(Ydistance >= 0) PORTC &= ~(1<<PORTC1);
 230:	11 23       	and	r17, r17
 232:	24 f0       	brlt	.+8      	; 0x23c <MoveXY_absolute+0x5e>
 234:	85 b3       	in	r24, 0x15	; 21
 236:	8d 7f       	andi	r24, 0xFD	; 253
 238:	85 bb       	out	0x15, r24	; 21
 23a:	07 c0       	rjmp	.+14     	; 0x24a <MoveXY_absolute+0x6c>
	else {
		PORTC |= (1<<PORTC1);
 23c:	85 b3       	in	r24, 0x15	; 21
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	85 bb       	out	0x15, r24	; 21
		Ydistance = -Ydistance;
 242:	00 27       	eor	r16, r16
 244:	11 27       	eor	r17, r17
 246:	02 1b       	sub	r16, r18
 248:	13 0b       	sbc	r17, r19
	}
	
	h_stopFlag = 0;
 24a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <h_stopFlag+0x1>
 24e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <h_stopFlag>
	v_stopFlag = 0;
 252:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 256:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	TCNT1 = 0;
 25a:	1d bc       	out	0x2d, r1	; 45
 25c:	1c bc       	out	0x2c, r1	; 44
	horizontalMove();
 25e:	b1 df       	rcall	.-158    	; 0x1c2 <horizontalMove>
	verticalMove();
 260:	a2 df       	rcall	.-188    	; 0x1a6 <verticalMove>
 262:	ce 01       	movw	r24, r28
	h_ms = Xdistance*10;
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	cc 0f       	add	r28, r28
 26a:	dd 1f       	adc	r29, r29
 26c:	cc 0f       	add	r28, r28
 26e:	dd 1f       	adc	r29, r29
 270:	cc 0f       	add	r28, r28
 272:	dd 1f       	adc	r29, r29
 274:	c8 0f       	add	r28, r24
 276:	d9 1f       	adc	r29, r25
 278:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <h_ms+0x1>
 27c:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <h_ms>
 280:	29 e1       	ldi	r18, 0x19	; 25
	v_ms = Ydistance*25;
 282:	20 9f       	mul	r18, r16
 284:	c0 01       	movw	r24, r0
 286:	21 9f       	mul	r18, r17
 288:	90 0d       	add	r25, r0
 28a:	11 24       	eor	r1, r1
 28c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 290:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 294:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <curX+0x1>
	curX = dstX;
 298:	c0 92 0a 01 	sts	0x010A, r12	; 0x80010a <curX>
 29c:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <curY+0x1>
	curY = dstY;
 2a0:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <curY>
 2a4:	df 91       	pop	r29
}
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	08 95       	ret

000002b6 <pauseUntilStop>:
 2b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <h_stopFlag>

void pauseUntilStop(void) {
	while(h_stopFlag == 1 || v_stopFlag == 1) {};
 2ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <h_stopFlag+0x1>
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	d1 f3       	breq	.-12     	; 0x2b6 <pauseUntilStop>
 2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	a1 f3       	breq	.-24     	; 0x2b6 <pauseUntilStop>
}
 2ce:	08 95       	ret

000002d0 <__vector_14>:
#include "TC_config.h"
#include "servoMove.h"
#include "stepMove.h"


ISR(TIMER1_OVF_vect) {
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	0b b6       	in	r0, 0x3b	; 59
 2dc:	0f 92       	push	r0
 2de:	2f 93       	push	r18
 2e0:	3f 93       	push	r19
 2e2:	4f 93       	push	r20
 2e4:	5f 93       	push	r21
 2e6:	6f 93       	push	r22
 2e8:	7f 93       	push	r23
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	af 93       	push	r26
 2f0:	bf 93       	push	r27
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
	if(h_ms != -1) h_ms--;
 2f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <h_ms>
 2fa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <h_ms+0x1>
 2fe:	8f 3f       	cpi	r24, 0xFF	; 255
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	92 07       	cpc	r25, r18
 304:	29 f0       	breq	.+10     	; 0x310 <__vector_14+0x40>
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <h_ms+0x1>
 30c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <h_ms>
	if(v_ms != -1) v_ms--;
 310:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 314:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 318:	8f 3f       	cpi	r24, 0xFF	; 255
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	92 07       	cpc	r25, r18
 31e:	29 f0       	breq	.+10     	; 0x32a <__vector_14+0x5a>
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 326:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
	if(h_ms == 0) {
 32a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <h_ms>
 32e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <h_ms+0x1>
 332:	89 2b       	or	r24, r25
 334:	39 f4       	brne	.+14     	; 0x344 <__vector_14+0x74>
		horizontalStop();
 336:	4c df       	rcall	.-360    	; 0x1d0 <horizontalStop>
		h_stopFlag = 1;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <h_stopFlag+0x1>
 340:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <h_stopFlag>
	}
	if(v_ms == 0) {
 344:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 348:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 34c:	89 2b       	or	r24, r25
		verticalStop();
 34e:	39 f4       	brne	.+14     	; 0x35e <__vector_14+0x8e>
 350:	31 df       	rcall	.-414    	; 0x1b4 <verticalStop>
		v_stopFlag = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0b be       	out	0x3b, r0	; 59
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <main>:


int main(void)
{
	DDRA |= (1 << PORTA0);
 384:	8a b3       	in	r24, 0x1a	; 26
 386:	81 60       	ori	r24, 0x01	; 1
 388:	8a bb       	out	0x1a, r24	; 26
	
	DDRC |= (1 << PORTC0) | (1 << PORTC1);//vertical, PORTC0 : EN, PORTC1 : CW;
 38a:	84 b3       	in	r24, 0x14	; 20
 38c:	83 60       	ori	r24, 0x03	; 3
 38e:	84 bb       	out	0x14, r24	; 20
	DDRC |= (1 << PORTC4) | (1 << PORTC5);//horizontal, PORTC4 : EN, PORTC5 : CW;
 390:	84 b3       	in	r24, 0x14	; 20
 392:	80 63       	ori	r24, 0x30	; 48
 394:	84 bb       	out	0x14, r24	; 20

	PORTC &= ~(1 << PORTC0);//PORTC2 low : enable motor driver
 396:	85 b3       	in	r24, 0x15	; 21
 398:	8e 7f       	andi	r24, 0xFE	; 254
 39a:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << PORTC4);//PORTC4 low : enable motor driver
 39c:	85 b3       	in	r24, 0x15	; 21
 39e:	8f 7e       	andi	r24, 0xEF	; 239
 3a0:	85 bb       	out	0x15, r24	; 21
	
	//PORTC5 == 1 : left   PORTC5 == 0 : right,
	//
	
	InitializeTimer0();
 3a2:	92 de       	rcall	.-732    	; 0xc8 <InitializeTimer0>
	InitializeTimer2();//PTB7을 OC2 핀으로 사용 OC1C 핀과 겹칩 주의
 3a4:	a6 de       	rcall	.-692    	; 0xf2 <InitializeTimer2>
	InitializeTimer3();
 3a6:	c8 de       	rcall	.-624    	; 0x138 <InitializeTimer3>
 3a8:	b9 de       	rcall	.-654    	; 0x11c <InitializeTimer1>
	
	InitializeTimer1();
 3aa:	87 b7       	in	r24, 0x37	; 55
 3ac:	84 60       	ori	r24, 0x04	; 4
	TIMSK |= (1<<TOIE1); //T/C1 overflow interrupt enable
 3ae:	87 bf       	out	0x37, r24	; 55
 3b0:	78 94       	sei
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
	
	sei();
 3b4:	83 e2       	ldi	r24, 0x23	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b6:	94 ef       	ldi	r25, 0xF4	; 244
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x34>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x3e>
 3c2:	00 00       	nop
 3c4:	64 e6       	ldi	r22, 0x64	; 100
 3c6:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(5000);
	

	while(1) {
		MoveXY_absolute(100,100);
 3c8:	84 e6       	ldi	r24, 0x64	; 100
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	08 df       	rcall	.-496    	; 0x1de <MoveXY_absolute>
 3ce:	73 df       	rcall	.-282    	; 0x2b6 <pauseUntilStop>
		pauseUntilStop();
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	8b e7       	ldi	r24, 0x7B	; 123
 3d4:	92 e9       	ldi	r25, 0x92	; 146
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x52>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x5c>
 3e0:	00 00       	nop
 3e2:	60 e9       	ldi	r22, 0x90	; 144
		_delay_ms(3000);
		
		MoveXY_absolute(400,400);
 3e4:	71 e0       	ldi	r23, 0x01	; 1
 3e6:	80 e9       	ldi	r24, 0x90	; 144
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	f9 de       	rcall	.-526    	; 0x1de <MoveXY_absolute>
 3ec:	64 df       	rcall	.-312    	; 0x2b6 <pauseUntilStop>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
		
		
		pauseUntilStop();
 3f0:	8b e7       	ldi	r24, 0x7B	; 123
 3f2:	92 e9       	ldi	r25, 0x92	; 146
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x70>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x7a>
 3fe:	00 00       	nop
 400:	68 e5       	ldi	r22, 0x58	; 88
		_delay_ms(3000);
		
		MoveXY_absolute(200,600);
 402:	72 e0       	ldi	r23, 0x02	; 2
 404:	88 ec       	ldi	r24, 0xC8	; 200
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	ea de       	rcall	.-556    	; 0x1de <MoveXY_absolute>
 40a:	55 df       	rcall	.-342    	; 0x2b6 <pauseUntilStop>
 40c:	2f ef       	ldi	r18, 0xFF	; 255
		pauseUntilStop();
 40e:	8b e7       	ldi	r24, 0x7B	; 123
 410:	92 e9       	ldi	r25, 0x92	; 146
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	d2 cf       	rjmp	.-92     	; 0x3c4 <main+0x40>

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
