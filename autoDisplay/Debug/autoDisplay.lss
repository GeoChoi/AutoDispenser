
autoDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000328  00800100  00001c5a  00001cee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800428  00800428  00002016  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002016  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002074  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cbd  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9a  00000000  00000000  00003f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff6  00000000  00000000  00004aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b0  00000000  00000000  00005aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d8  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012f9  00000000  00000000  0000682c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	b6 c6       	rjmp	.+3436   	; 0xd72 <__vector_1>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c6       	rjmp	.+3468   	; 0xdc6 <__vector_14>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	63 64       	ori	r22, 0x43	; 67
      8e:	69 6e       	ori	r22, 0xE9	; 233
      90:	6f 70       	andi	r22, 0x0F	; 15
      92:	73 75       	andi	r23, 0x53	; 83
      94:	78 58       	subi	r23, 0x88	; 136
      96:	5b 00       	.word	0x005b	; ????

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea e5       	ldi	r30, 0x5A	; 90
      ac:	fc e1       	ldi	r31, 0x1C	; 28
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a8 32       	cpi	r26, 0x28	; 40
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	24 e0       	ldi	r18, 0x04	; 4
      c0:	a8 e2       	ldi	r26, 0x28	; 40
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a6 34       	cpi	r26, 0x46	; 70
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	d5 d6       	rcall	.+3498   	; 0xe7a <main>
      d0:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <_exit>

000000d4 <__bad_interrupt>:
      d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <InitializeTimer0>:
void normalTurnElbow(void) {
	OCR3C = 900*4;
}

void outterTurnElbow(void) {
	OCR3C = 1290*4;
      d6:	87 b3       	in	r24, 0x17	; 23
      d8:	80 61       	ori	r24, 0x10	; 16
      da:	87 bb       	out	0x17, r24	; 23
      dc:	83 b7       	in	r24, 0x33	; 51
      de:	88 60       	ori	r24, 0x08	; 8
      e0:	83 bf       	out	0x33, r24	; 51
      e2:	83 b7       	in	r24, 0x33	; 51
      e4:	8f 7e       	andi	r24, 0xEF	; 239
      e6:	83 bf       	out	0x33, r24	; 51
      e8:	83 b7       	in	r24, 0x33	; 51
      ea:	80 62       	ori	r24, 0x20	; 32
      ec:	83 bf       	out	0x33, r24	; 51
      ee:	83 b7       	in	r24, 0x33	; 51
      f0:	81 60       	ori	r24, 0x01	; 1
      f2:	83 bf       	out	0x33, r24	; 51
      f4:	83 b7       	in	r24, 0x33	; 51
      f6:	82 60       	ori	r24, 0x02	; 2
      f8:	83 bf       	out	0x33, r24	; 51
      fa:	8c e7       	ldi	r24, 0x7C	; 124
      fc:	81 bf       	out	0x31, r24	; 49
      fe:	08 95       	ret

00000100 <InitializeTimer2>:
     100:	87 b3       	in	r24, 0x17	; 23
     102:	80 68       	ori	r24, 0x80	; 128
     104:	87 bb       	out	0x17, r24	; 23
     106:	85 b5       	in	r24, 0x25	; 37
     108:	88 60       	ori	r24, 0x08	; 8
     10a:	85 bd       	out	0x25, r24	; 37
     10c:	85 b5       	in	r24, 0x25	; 37
     10e:	8f 7e       	andi	r24, 0xEF	; 239
     110:	85 bd       	out	0x25, r24	; 37
     112:	85 b5       	in	r24, 0x25	; 37
     114:	80 62       	ori	r24, 0x20	; 32
     116:	85 bd       	out	0x25, r24	; 37
     118:	85 b5       	in	r24, 0x25	; 37
     11a:	81 60       	ori	r24, 0x01	; 1
     11c:	85 bd       	out	0x25, r24	; 37
     11e:	85 b5       	in	r24, 0x25	; 37
     120:	82 60       	ori	r24, 0x02	; 2
     122:	85 bd       	out	0x25, r24	; 37
     124:	8c e7       	ldi	r24, 0x7C	; 124
     126:	83 bd       	out	0x23, r24	; 35
     128:	08 95       	ret

0000012a <InitializeTimer1>:
     12a:	8f b5       	in	r24, 0x2f	; 47
     12c:	82 60       	ori	r24, 0x02	; 2
     12e:	8f bd       	out	0x2f, r24	; 47
     130:	8e b5       	in	r24, 0x2e	; 46
     132:	88 61       	ori	r24, 0x18	; 24
     134:	8e bd       	out	0x2e, r24	; 46
     136:	8e b5       	in	r24, 0x2e	; 46
     138:	81 60       	ori	r24, 0x01	; 1
     13a:	8e bd       	out	0x2e, r24	; 46
     13c:	8f e7       	ldi	r24, 0x7F	; 127
     13e:	9e e3       	ldi	r25, 0x3E	; 62
     140:	97 bd       	out	0x27, r25	; 39
     142:	86 bd       	out	0x26, r24	; 38
     144:	87 b7       	in	r24, 0x37	; 55
     146:	84 60       	ori	r24, 0x04	; 4
     148:	87 bf       	out	0x37, r24	; 55
     14a:	08 95       	ret

0000014c <InitializeTimer3>:
     14c:	82 b1       	in	r24, 0x02	; 2
     14e:	88 63       	ori	r24, 0x38	; 56
     150:	82 b9       	out	0x02, r24	; 2
     152:	eb e8       	ldi	r30, 0x8B	; 139
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	82 60       	ori	r24, 0x02	; 2
     15a:	80 83       	st	Z, r24
     15c:	aa e8       	ldi	r26, 0x8A	; 138
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	88 61       	ori	r24, 0x18	; 24
     164:	8c 93       	st	X, r24
     166:	80 81       	ld	r24, Z
     168:	8f 7b       	andi	r24, 0xBF	; 191
     16a:	80 83       	st	Z, r24
     16c:	80 81       	ld	r24, Z
     16e:	80 68       	ori	r24, 0x80	; 128
     170:	80 83       	st	Z, r24
     172:	80 81       	ld	r24, Z
     174:	8f 7e       	andi	r24, 0xEF	; 239
     176:	80 83       	st	Z, r24
     178:	80 81       	ld	r24, Z
     17a:	80 62       	ori	r24, 0x20	; 32
     17c:	80 83       	st	Z, r24
     17e:	80 81       	ld	r24, Z
     180:	8b 7f       	andi	r24, 0xFB	; 251
     182:	80 83       	st	Z, r24
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
     18a:	8c 91       	ld	r24, X
     18c:	82 60       	ori	r24, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	80 e4       	ldi	r24, 0x40	; 64
     192:	9c e9       	ldi	r25, 0x9C	; 156
     194:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     198:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     19c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     1a0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     1a4:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     1a8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     1ac:	8f e3       	ldi	r24, 0x3F	; 63
     1ae:	9c e9       	ldi	r25, 0x9C	; 156
     1b0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     1b8:	08 95       	ret

000001ba <MoveArm>:
     1ba:	00 97       	sbiw	r24, 0x00	; 0
     1bc:	41 f0       	breq	.+16     	; 0x1ce <MoveArm+0x14>
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     1ca:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     1ce:	61 15       	cp	r22, r1
     1d0:	71 05       	cpc	r23, r1
     1d2:	41 f0       	breq	.+16     	; 0x1e4 <MoveArm+0x2a>
     1d4:	66 0f       	add	r22, r22
     1d6:	77 1f       	adc	r23, r23
     1d8:	66 0f       	add	r22, r22
     1da:	77 1f       	adc	r23, r23
     1dc:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     1e0:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     1e4:	41 15       	cp	r20, r1
     1e6:	51 05       	cpc	r21, r1
     1e8:	41 f0       	breq	.+16     	; 0x1fa <MoveArm+0x40>
     1ea:	44 0f       	add	r20, r20
     1ec:	55 1f       	adc	r21, r21
     1ee:	44 0f       	add	r20, r20
     1f0:	55 1f       	adc	r21, r21
     1f2:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     1f6:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     1fa:	08 95       	ret

000001fc <basePoseArm>:
     1fc:	80 e8       	ldi	r24, 0x80	; 128
     1fe:	9c e0       	ldi	r25, 0x0C	; 12
     200:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     204:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     208:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     20c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     210:	80 e1       	ldi	r24, 0x10	; 16
     212:	9e e0       	ldi	r25, 0x0E	; 14
     214:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     218:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     21c:	08 95       	ret

0000021e <freePoseArm>:
     21e:	80 ee       	ldi	r24, 0xE0	; 224
     220:	9e e2       	ldi	r25, 0x2E	; 46
     222:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     226:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     22a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     22e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     232:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     236:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     23a:	08 95       	ret

0000023c <closeHand>:
     23c:	80 e8       	ldi	r24, 0x80	; 128
     23e:	9c e0       	ldi	r25, 0x0C	; 12
     240:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     244:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     248:	08 95       	ret

0000024a <catchHand_thin>:
     24a:	88 ef       	ldi	r24, 0xF8	; 248
     24c:	9c e0       	ldi	r25, 0x0C	; 12
     24e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     252:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     256:	08 95       	ret

00000258 <holdHand_thin>:
     258:	88 e4       	ldi	r24, 0x48	; 72
     25a:	9d e0       	ldi	r25, 0x0D	; 13
     25c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     260:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     264:	08 95       	ret

00000266 <openHand>:
     266:	88 ed       	ldi	r24, 0xD8	; 216
     268:	9e e0       	ldi	r25, 0x0E	; 14
     26a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     26e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     272:	08 95       	ret

00000274 <CWturnWrist>:
     274:	80 eb       	ldi	r24, 0xB0	; 176
     276:	94 e0       	ldi	r25, 0x04	; 4
     278:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     27c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     280:	08 95       	ret

00000282 <normalWrist>:
     282:	80 e8       	ldi	r24, 0x80	; 128
     284:	9c e0       	ldi	r25, 0x0C	; 12
     286:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     28a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     28e:	08 95       	ret

00000290 <innerTurnElbow>:
     290:	88 ed       	ldi	r24, 0xD8	; 216
     292:	94 e0       	ldi	r25, 0x04	; 4
     294:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     298:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     29c:	08 95       	ret

0000029e <normalTurnElbow>:
     29e:	80 e1       	ldi	r24, 0x10	; 16
     2a0:	9e e0       	ldi	r25, 0x0E	; 14
     2a2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     2a6:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     2aa:	08 95       	ret

000002ac <set_V_Enable>:

//200mm 움직여봤는데 생가보다 오차가 크지 않다! 2mm 내외
//사용할만 함

void set_V_Enable() {
	PORTB &= ~(1 << PORTB2);
     2ac:	88 b3       	in	r24, 0x18	; 24
     2ae:	8b 7f       	andi	r24, 0xFB	; 251
     2b0:	88 bb       	out	0x18, r24	; 24
     2b2:	08 95       	ret

000002b4 <set_V_Disable>:
}
void set_V_Disable() {
	PORTB |= (1 << PORTB2);
     2b4:	88 b3       	in	r24, 0x18	; 24
     2b6:	84 60       	ori	r24, 0x04	; 4
     2b8:	88 bb       	out	0x18, r24	; 24
     2ba:	08 95       	ret

000002bc <set_V_Up>:
}
void set_V_Up() {
	PORTB &= ~(1 << PORTB3);
     2bc:	88 b3       	in	r24, 0x18	; 24
     2be:	87 7f       	andi	r24, 0xF7	; 247
     2c0:	88 bb       	out	0x18, r24	; 24
     2c2:	08 95       	ret

000002c4 <set_V_Down>:
}
void set_V_Down() {
	PORTB |= (1 << PORTB3);
     2c4:	88 b3       	in	r24, 0x18	; 24
     2c6:	88 60       	ori	r24, 0x08	; 8
     2c8:	88 bb       	out	0x18, r24	; 24
     2ca:	08 95       	ret

000002cc <set_H_Enable>:
}


void set_H_Enable() {
	PORTB &= ~(1 << PORTB5);
     2cc:	88 b3       	in	r24, 0x18	; 24
     2ce:	8f 7d       	andi	r24, 0xDF	; 223
     2d0:	88 bb       	out	0x18, r24	; 24
     2d2:	08 95       	ret

000002d4 <set_H_Disable>:
}
void set_H_Disable() {
	PORTB |= (1 << PORTB5);
     2d4:	88 b3       	in	r24, 0x18	; 24
     2d6:	80 62       	ori	r24, 0x20	; 32
     2d8:	88 bb       	out	0x18, r24	; 24
     2da:	08 95       	ret

000002dc <set_H_Right>:
}
void set_H_Right() {
	PORTB &= ~(1 << PORTB6);
     2dc:	88 b3       	in	r24, 0x18	; 24
     2de:	8f 7b       	andi	r24, 0xBF	; 191
     2e0:	88 bb       	out	0x18, r24	; 24
     2e2:	08 95       	ret

000002e4 <set_H_Left>:
}
void set_H_Left() {
	PORTB |= (1 << PORTB6);
     2e4:	88 b3       	in	r24, 0x18	; 24
     2e6:	80 64       	ori	r24, 0x40	; 64
     2e8:	88 bb       	out	0x18, r24	; 24
     2ea:	08 95       	ret

000002ec <V_MoveStart>:
}


void V_MoveStart(void) {
	//비교일치 발생시 핀 반전
	TCCR0 |= (1 << COM00);
     2ec:	83 b7       	in	r24, 0x33	; 51
     2ee:	80 61       	ori	r24, 0x10	; 16
     2f0:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << COM01);
     2f2:	83 b7       	in	r24, 0x33	; 51
     2f4:	8f 7d       	andi	r24, 0xDF	; 223
     2f6:	83 bf       	out	0x33, r24	; 51
     2f8:	08 95       	ret

000002fa <V_MoveStop>:
}

void V_MoveStop(void) {
	//비교일치 발생시 핀 LOW
	TCCR0 &= ~(1 << COM00);
     2fa:	83 b7       	in	r24, 0x33	; 51
     2fc:	8f 7e       	andi	r24, 0xEF	; 239
     2fe:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);
     300:	83 b7       	in	r24, 0x33	; 51
     302:	80 62       	ori	r24, 0x20	; 32
     304:	83 bf       	out	0x33, r24	; 51
     306:	08 95       	ret

00000308 <H_MoveStart>:
}

void H_MoveStart(void) {
	//비교일치 발생시 핀 반전
	TCCR2 |= (1 << COM20);
     308:	85 b5       	in	r24, 0x25	; 37
     30a:	80 61       	ori	r24, 0x10	; 16
     30c:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1 << COM21);
     30e:	85 b5       	in	r24, 0x25	; 37
     310:	8f 7d       	andi	r24, 0xDF	; 223
     312:	85 bd       	out	0x25, r24	; 37
     314:	08 95       	ret

00000316 <H_MoveStop>:
}

void H_MoveStop(void) {
	//비교일치 발생시 핀 LOW
	TCCR2 &= ~(1 << COM20);
     316:	85 b5       	in	r24, 0x25	; 37
     318:	8f 7e       	andi	r24, 0xEF	; 239
     31a:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << COM21);
     31c:	85 b5       	in	r24, 0x25	; 37
     31e:	80 62       	ori	r24, 0x20	; 32
     320:	85 bd       	out	0x25, r24	; 37
     322:	08 95       	ret

00000324 <MoveXY_relative>:
}



void MoveXY_relative(int x_mm, int y_mm) {
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	ec 01       	movw	r28, r24
     32e:	8b 01       	movw	r16, r22
	curX += x_mm;
     330:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <curX>
     334:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <curX+0x1>
     338:	8c 0f       	add	r24, r28
     33a:	9d 1f       	adc	r25, r29
     33c:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <curX+0x1>
     340:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <curX>
	curY += y_mm;
     344:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <curY>
     348:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <curY+0x1>
     34c:	86 0f       	add	r24, r22
     34e:	97 1f       	adc	r25, r23
     350:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <curY+0x1>
     354:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <curY>
	
	if(x_mm >= 0) set_H_Right();
     358:	dd 23       	and	r29, r29
     35a:	14 f0       	brlt	.+4      	; 0x360 <MoveXY_relative+0x3c>
     35c:	bf df       	rcall	.-130    	; 0x2dc <set_H_Right>
     35e:	04 c0       	rjmp	.+8      	; 0x368 <MoveXY_relative+0x44>
	else {
		set_H_Left();
     360:	c1 df       	rcall	.-126    	; 0x2e4 <set_H_Left>
     362:	d1 95       	neg	r29
		x_mm = -x_mm;
     364:	c1 95       	neg	r28
     366:	d1 09       	sbc	r29, r1
     368:	11 23       	and	r17, r17
	}
	
	if(y_mm >= 0) set_V_Up();
     36a:	14 f0       	brlt	.+4      	; 0x370 <MoveXY_relative+0x4c>
     36c:	a7 df       	rcall	.-178    	; 0x2bc <set_V_Up>
     36e:	04 c0       	rjmp	.+8      	; 0x378 <MoveXY_relative+0x54>
	else {
		set_V_Down();
     370:	a9 df       	rcall	.-174    	; 0x2c4 <set_V_Down>
     372:	11 95       	neg	r17
		y_mm = -y_mm;
     374:	01 95       	neg	r16
     376:	11 09       	sbc	r17, r1
     378:	1d bc       	out	0x2d, r1	; 45
	}
	
	//여기서부터 요이~땅
	TCNT1 = 0;
     37a:	1c bc       	out	0x2c, r1	; 44
	if(x_mm) {
     37c:	20 97       	sbiw	r28, 0x00	; 0
     37e:	29 f0       	breq	.+10     	; 0x38a <MoveXY_relative+0x66>
		H_MoveStart();
     380:	c3 df       	rcall	.-122    	; 0x308 <H_MoveStart>
     382:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <h_stopFlag+0x1>
		h_stopFlag = 0;
     386:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <h_stopFlag>
	}
	if(y_mm) {
     38a:	01 15       	cp	r16, r1
     38c:	11 05       	cpc	r17, r1
     38e:	29 f0       	breq	.+10     	; 0x39a <MoveXY_relative+0x76>
		V_MoveStart();
     390:	ad df       	rcall	.-166    	; 0x2ec <V_MoveStart>
     392:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <v_stopFlag+0x1>
		v_stopFlag = 0;
     396:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <v_stopFlag>
     39a:	ce 01       	movw	r24, r28
	}
	h_ms = x_mm*10;
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	cc 0f       	add	r28, r28
     3a2:	dd 1f       	adc	r29, r29
     3a4:	cc 0f       	add	r28, r28
     3a6:	dd 1f       	adc	r29, r29
     3a8:	cc 0f       	add	r28, r28
     3aa:	dd 1f       	adc	r29, r29
     3ac:	c8 0f       	add	r28, r24
     3ae:	d9 1f       	adc	r29, r25
     3b0:	d0 93 2d 04 	sts	0x042D, r29	; 0x80042d <h_ms+0x1>
     3b4:	c0 93 2c 04 	sts	0x042C, r28	; 0x80042c <h_ms>
     3b8:	29 e1       	ldi	r18, 0x19	; 25
	v_ms = y_mm*25;
     3ba:	20 9f       	mul	r18, r16
     3bc:	c0 01       	movw	r24, r0
     3be:	21 9f       	mul	r18, r17
     3c0:	90 0d       	add	r25, r0
     3c2:	11 24       	eor	r1, r1
     3c4:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <v_ms+0x1>
     3c8:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <v_ms>
     3cc:	df 91       	pop	r29
	
	
}
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <MoveXY_absolute>:
     3d6:	cf 92       	push	r12

void MoveXY_absolute(unsigned int dstX, unsigned int dstY) {
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
	int Xdistance = dstX-curX;
     3e6:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <curX>
     3ea:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <curX+0x1>
     3ee:	6c 01       	movw	r12, r24
     3f0:	c2 1a       	sub	r12, r18
     3f2:	d3 0a       	sbc	r13, r19
     3f4:	e6 01       	movw	r28, r12
	int Ydistance = dstY-curY;
     3f6:	20 91 2e 04 	lds	r18, 0x042E	; 0x80042e <curY>
     3fa:	30 91 2f 04 	lds	r19, 0x042F	; 0x80042f <curY+0x1>
     3fe:	7b 01       	movw	r14, r22
     400:	e2 1a       	sub	r14, r18
     402:	f3 0a       	sbc	r15, r19
     404:	87 01       	movw	r16, r14
	
	curX = dstX;
     406:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <curX+0x1>
     40a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <curX>
	curY = dstY;
     40e:	70 93 2f 04 	sts	0x042F, r23	; 0x80042f <curY+0x1>
     412:	60 93 2e 04 	sts	0x042E, r22	; 0x80042e <curY>
	
	if(Xdistance >= 0) set_H_Right();
     416:	dd 23       	and	r29, r29
     418:	14 f0       	brlt	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41a:	60 df       	rcall	.-320    	; 0x2dc <set_H_Right>
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	else {
		set_H_Left();
     41e:	62 df       	rcall	.-316    	; 0x2e4 <set_H_Left>
     420:	cc 27       	eor	r28, r28
		Xdistance = -Xdistance;
     422:	dd 27       	eor	r29, r29
     424:	cc 19       	sub	r28, r12
     426:	dd 09       	sbc	r29, r13
     428:	11 23       	and	r17, r17
	}
	
	if(Ydistance >= 0) set_V_Up();
     42a:	14 f0       	brlt	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42c:	47 df       	rcall	.-370    	; 0x2bc <set_V_Up>
     42e:	05 c0       	rjmp	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	else {
		set_V_Down();
     430:	49 df       	rcall	.-366    	; 0x2c4 <set_V_Down>
     432:	00 27       	eor	r16, r16
		Ydistance = -Ydistance;
     434:	11 27       	eor	r17, r17
     436:	0e 19       	sub	r16, r14
     438:	1f 09       	sbc	r17, r15
     43a:	1d bc       	out	0x2d, r1	; 45
	}
	
	//여기서부터 요이~땅
	TCNT1 = 0;
     43c:	1c bc       	out	0x2c, r1	; 44
	if(Xdistance){
     43e:	20 97       	sbiw	r28, 0x00	; 0
     440:	29 f0       	breq	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		H_MoveStart();
     442:	62 df       	rcall	.-316    	; 0x308 <H_MoveStart>
     444:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <h_stopFlag+0x1>
		h_stopFlag = 0;
     448:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <h_stopFlag>
	}
	if(Ydistance){
     44c:	01 15       	cp	r16, r1
     44e:	11 05       	cpc	r17, r1
     450:	29 f0       	breq	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		V_MoveStart();
     452:	4c df       	rcall	.-360    	; 0x2ec <V_MoveStart>
     454:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <v_stopFlag+0x1>
		v_stopFlag = 0;
     458:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <v_stopFlag>
     45c:	ce 01       	movw	r24, r28
	}
	h_ms = Xdistance*10;
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	cc 0f       	add	r28, r28
     464:	dd 1f       	adc	r29, r29
     466:	cc 0f       	add	r28, r28
     468:	dd 1f       	adc	r29, r29
     46a:	cc 0f       	add	r28, r28
     46c:	dd 1f       	adc	r29, r29
     46e:	c8 0f       	add	r28, r24
     470:	d9 1f       	adc	r29, r25
     472:	d0 93 2d 04 	sts	0x042D, r29	; 0x80042d <h_ms+0x1>
     476:	c0 93 2c 04 	sts	0x042C, r28	; 0x80042c <h_ms>
     47a:	29 e1       	ldi	r18, 0x19	; 25
	v_ms = Ydistance*25;
     47c:	20 9f       	mul	r18, r16
     47e:	c0 01       	movw	r24, r0
     480:	21 9f       	mul	r18, r17
     482:	90 0d       	add	r25, r0
     484:	11 24       	eor	r1, r1
     486:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <v_ms+0x1>
     48a:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <v_ms>
     48e:	df 91       	pop	r29
	
}
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	08 95       	ret

000004a0 <pauseUntilStop>:
     4a0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <h_stopFlag>

void pauseUntilStop(void) {
	while(h_stopFlag == 0 || v_stopFlag == 0) {};
     4a4:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <h_stopFlag+0x1>
     4a8:	89 2b       	or	r24, r25
     4aa:	d1 f3       	breq	.-12     	; 0x4a0 <pauseUntilStop>
     4ac:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <v_stopFlag>
     4b0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <v_stopFlag+0x1>
     4b4:	89 2b       	or	r24, r25
     4b6:	a1 f3       	breq	.-24     	; 0x4a0 <pauseUntilStop>
}
     4b8:	08 95       	ret

000004ba <testmode>:
	{ 25,  95, 160, 230, 295, 365, 430, 495, 550},
	{ 25,  95, 160, 230, 295, 365, 430, 495, 550},
};
int YlocArr[4] = {50, 280, 510, 710};

void testmode() {
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
	int quit = 0;
     4c6:	c0 e0       	ldi	r28, 0x00	; 0
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1) {
		do {
			do {
				wronginput = 0;
     4ca:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <__data_end+0x1>
     4ce:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <__data_end>
				
				printf("Select mode : step_rel(1), step_abs(2), servo_con(3), quit(q)?");
     4d2:	84 e8       	ldi	r24, 0x84	; 132
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	9f 93       	push	r25
     4d8:	8f 93       	push	r24
     4da:	7f d5       	rcall	.+2814   	; 0xfda <printf>
				scanf("%s", uartBuffer);
     4dc:	80 e5       	ldi	r24, 0x50	; 80
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	83 ec       	ldi	r24, 0xC3	; 195
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	9f 93       	push	r25
     4ea:	8f 93       	push	r24
     4ec:	be d5       	rcall	.+2940   	; 0x106a <scanf>
				
				if(strcasecmp(uartBuffer, "1")==0) 
     4ee:	66 ec       	ldi	r22, 0xC6	; 198
     4f0:	71 e0       	ldi	r23, 0x01	; 1
     4f2:	80 e5       	ldi	r24, 0x50	; 80
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	5e d5       	rcall	.+2748   	; 0xfb4 <strcasecmp>
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	89 2b       	or	r24, r25
     506:	39 f4       	brne	.+14     	; 0x516 <testmode+0x5c>
					MoveMode_TM = 1;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <MoveMode_TM+0x1>
     510:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <MoveMode_TM>
     514:	2f c0       	rjmp	.+94     	; 0x574 <testmode+0xba>
				else if (strcasecmp(uartBuffer, "2")==0) 
     516:	68 ec       	ldi	r22, 0xC8	; 200
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	80 e5       	ldi	r24, 0x50	; 80
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	4a d5       	rcall	.+2708   	; 0xfb4 <strcasecmp>
     520:	89 2b       	or	r24, r25
     522:	39 f4       	brne	.+14     	; 0x532 <testmode+0x78>
					MoveMode_TM = 2;
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <MoveMode_TM+0x1>
     52c:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <MoveMode_TM>
     530:	21 c0       	rjmp	.+66     	; 0x574 <testmode+0xba>
				else if (strcasecmp(uartBuffer, "3")==0) 
     532:	6a ec       	ldi	r22, 0xCA	; 202
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	80 e5       	ldi	r24, 0x50	; 80
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	3c d5       	rcall	.+2680   	; 0xfb4 <strcasecmp>
     53c:	89 2b       	or	r24, r25
     53e:	39 f4       	brne	.+14     	; 0x54e <testmode+0x94>
					MoveMode_TM = 3;
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <MoveMode_TM+0x1>
     548:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <MoveMode_TM>
				else if (strcasecmp(uartBuffer, "q")==0) 
     54c:	13 c0       	rjmp	.+38     	; 0x574 <testmode+0xba>
     54e:	6c ec       	ldi	r22, 0xCC	; 204
     550:	71 e0       	ldi	r23, 0x01	; 1
     552:	80 e5       	ldi	r24, 0x50	; 80
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	2e d5       	rcall	.+2652   	; 0xfb4 <strcasecmp>
     558:	89 2b       	or	r24, r25
					quit = 1;
				else{
					printf("input '1', '2', '3' or 'q'\r\n");
     55a:	51 f0       	breq	.+20     	; 0x570 <testmode+0xb6>
     55c:	8e ec       	ldi	r24, 0xCE	; 206
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	54 d5       	rcall	.+2728   	; 0x100a <puts>
					wronginput = 1;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <__data_end+0x1>
     56a:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <__data_end>
     56e:	02 c0       	rjmp	.+4      	; 0x574 <testmode+0xba>
				else if (strcasecmp(uartBuffer, "2")==0) 
					MoveMode_TM = 2;
				else if (strcasecmp(uartBuffer, "3")==0) 
					MoveMode_TM = 3;
				else if (strcasecmp(uartBuffer, "q")==0) 
					quit = 1;
     570:	c1 e0       	ldi	r28, 0x01	; 1
     572:	d0 e0       	ldi	r29, 0x00	; 0
				else{
					printf("input '1', '2', '3' or 'q'\r\n");
					wronginput = 1;
				}
			} while(wronginput);
     574:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__data_end>
     578:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <__data_end+0x1>
     57c:	89 2b       	or	r24, r25
     57e:	09 f0       	breq	.+2      	; 0x582 <testmode+0xc8>
     580:	a4 cf       	rjmp	.-184    	; 0x4ca <testmode+0x10>
			
			if(quit) break;
     582:	20 97       	sbiw	r28, 0x00	; 0
     584:	09 f0       	breq	.+2      	; 0x588 <testmode+0xce>
     586:	c7 c0       	rjmp	.+398    	; 0x716 <testmode+0x25c>
			
			if(MoveMode_TM==1||MoveMode_TM==2) {
     588:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <MoveMode_TM>
     58c:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <MoveMode_TM+0x1>
     590:	9c 01       	movw	r18, r24
     592:	21 50       	subi	r18, 0x01	; 1
     594:	31 09       	sbc	r19, r1
     596:	22 30       	cpi	r18, 0x02	; 2
     598:	31 05       	cpc	r19, r1
     59a:	08 f0       	brcs	.+2      	; 0x59e <testmode+0xe4>
				printf("X coordinate : ");
     59c:	4c c0       	rjmp	.+152    	; 0x636 <testmode+0x17c>
     59e:	8a ee       	ldi	r24, 0xEA	; 234
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	19 d5       	rcall	.+2610   	; 0xfda <printf>
				scanf("%u", &coordinate_X);
     5a8:	86 e3       	ldi	r24, 0x36	; 54
     5aa:	94 e0       	ldi	r25, 0x04	; 4
     5ac:	9f 93       	push	r25
     5ae:	8f 93       	push	r24
     5b0:	0f 2e       	mov	r0, r31
     5b2:	f7 e5       	ldi	r31, 0x57	; 87
     5b4:	ef 2e       	mov	r14, r31
     5b6:	f3 e0       	ldi	r31, 0x03	; 3
     5b8:	ff 2e       	mov	r15, r31
     5ba:	f0 2d       	mov	r31, r0
     5bc:	ff 92       	push	r15
     5be:	ef 92       	push	r14
     5c0:	54 d5       	rcall	.+2728   	; 0x106a <scanf>
				printf("your input : %5d\r\n\r\n", coordinate_X);
     5c2:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <coordinate_X+0x1>
     5c6:	8f 93       	push	r24
     5c8:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <coordinate_X>
     5cc:	8f 93       	push	r24
     5ce:	0a ef       	ldi	r16, 0xFA	; 250
     5d0:	11 e0       	ldi	r17, 0x01	; 1
     5d2:	1f 93       	push	r17
     5d4:	0f 93       	push	r16
				
				printf("Y coordinate : ");
     5d6:	01 d5       	rcall	.+2562   	; 0xfda <printf>
     5d8:	8f e0       	ldi	r24, 0x0F	; 15
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
				scanf("%u", &coordinate_Y);
     5e0:	fc d4       	rcall	.+2552   	; 0xfda <printf>
     5e2:	8a e3       	ldi	r24, 0x3A	; 58
     5e4:	94 e0       	ldi	r25, 0x04	; 4
     5e6:	9f 93       	push	r25
     5e8:	8f 93       	push	r24
     5ea:	ff 92       	push	r15
     5ec:	ef 92       	push	r14
				printf("your input : %5d\r\n\r\n", coordinate_Y);
     5ee:	3d d5       	rcall	.+2682   	; 0x106a <scanf>
     5f0:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <coordinate_Y+0x1>
     5f4:	8f 93       	push	r24
     5f6:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <coordinate_Y>
     5fa:	8f 93       	push	r24
     5fc:	1f 93       	push	r17
     5fe:	0f 93       	push	r16
     600:	ec d4       	rcall	.+2520   	; 0xfda <printf>
				
				printf("[x,y] = [%5d, %5d]\r\n",coordinate_X, coordinate_Y);
     602:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <coordinate_Y+0x1>
     606:	8f 93       	push	r24
     608:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <coordinate_Y>
     60c:	8f 93       	push	r24
     60e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <coordinate_X+0x1>
     612:	8f 93       	push	r24
     614:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <coordinate_X>
     618:	8f 93       	push	r24
     61a:	8f e1       	ldi	r24, 0x1F	; 31
     61c:	92 e0       	ldi	r25, 0x02	; 2
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	db d4       	rcall	.+2486   	; 0xfda <printf>
     624:	8d b7       	in	r24, 0x3d	; 61
     626:	9e b7       	in	r25, 0x3e	; 62
     628:	4a 96       	adiw	r24, 0x1a	; 26
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	9e bf       	out	0x3e, r25	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	8d bf       	out	0x3d, r24	; 61
			}
			else if(MoveMode_TM==3) {
     634:	30 c0       	rjmp	.+96     	; 0x696 <testmode+0x1dc>
				printf("hand  : ");
     636:	03 97       	sbiw	r24, 0x03	; 3
     638:	71 f5       	brne	.+92     	; 0x696 <testmode+0x1dc>
     63a:	84 e3       	ldi	r24, 0x34	; 52
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	9f 93       	push	r25
				scanf("%u", &hand);
     640:	8f 93       	push	r24
     642:	cb d4       	rcall	.+2454   	; 0xfda <printf>
     644:	8c e3       	ldi	r24, 0x3C	; 60
     646:	94 e0       	ldi	r25, 0x04	; 4
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	07 e5       	ldi	r16, 0x57	; 87
     64e:	13 e0       	ldi	r17, 0x03	; 3
     650:	1f 93       	push	r17
				printf("wrist : ");
     652:	0f 93       	push	r16
     654:	0a d5       	rcall	.+2580   	; 0x106a <scanf>
     656:	8d e3       	ldi	r24, 0x3D	; 61
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	9f 93       	push	r25
				scanf("%u", &wrist);
     65c:	8f 93       	push	r24
     65e:	bd d4       	rcall	.+2426   	; 0xfda <printf>
     660:	88 e3       	ldi	r24, 0x38	; 56
     662:	94 e0       	ldi	r25, 0x04	; 4
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	1f 93       	push	r17
				printf("elbow : ");
     66a:	0f 93       	push	r16
     66c:	fe d4       	rcall	.+2556   	; 0x106a <scanf>
     66e:	86 e4       	ldi	r24, 0x46	; 70
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
				scanf("%u", &elbow);
     676:	b1 d4       	rcall	.+2402   	; 0xfda <printf>
     678:	8e e3       	ldi	r24, 0x3E	; 62
     67a:	94 e0       	ldi	r25, 0x04	; 4
     67c:	9f 93       	push	r25
     67e:	8f 93       	push	r24
     680:	1f 93       	push	r17
     682:	0f 93       	push	r16
     684:	f2 d4       	rcall	.+2532   	; 0x106a <scanf>
     686:	8d b7       	in	r24, 0x3d	; 61
     688:	9e b7       	in	r25, 0x3e	; 62
     68a:	42 96       	adiw	r24, 0x12	; 18
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	9e bf       	out	0x3e, r25	; 62
			}
			
			do {
				wronginput = 0;
     692:	0f be       	out	0x3f, r0	; 63
     694:	8d bf       	out	0x3d, r24	; 61
     696:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <__data_end+0x1>
				
				printf("Do you want to proceed?[y/n]");
     69a:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <__data_end>
     69e:	8f e4       	ldi	r24, 0x4F	; 79
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	9f 93       	push	r25
				scanf("%s", uartBuffer);
     6a4:	8f 93       	push	r24
     6a6:	99 d4       	rcall	.+2354   	; 0xfda <printf>
     6a8:	80 e5       	ldi	r24, 0x50	; 80
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	83 ec       	ldi	r24, 0xC3	; 195
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	9f 93       	push	r25
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
     6b6:	8f 93       	push	r24
     6b8:	d8 d4       	rcall	.+2480   	; 0x106a <scanf>
     6ba:	6c e6       	ldi	r22, 0x6C	; 108
     6bc:	72 e0       	ldi	r23, 0x02	; 2
     6be:	80 e5       	ldi	r24, 0x50	; 80
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	78 d4       	rcall	.+2288   	; 0xfb4 <strcasecmp>
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	89 2b       	or	r24, r25
     6d2:	81 f0       	breq	.+32     	; 0x6f4 <testmode+0x23a>
     6d4:	6e e6       	ldi	r22, 0x6E	; 110
     6d6:	72 e0       	ldi	r23, 0x02	; 2
     6d8:	80 e5       	ldi	r24, 0x50	; 80
     6da:	91 e0       	ldi	r25, 0x01	; 1
					printf("input 'y' or 'n' only\r\n");
     6dc:	6b d4       	rcall	.+2262   	; 0xfb4 <strcasecmp>
     6de:	89 2b       	or	r24, r25
     6e0:	49 f0       	breq	.+18     	; 0x6f4 <testmode+0x23a>
     6e2:	80 e7       	ldi	r24, 0x70	; 112
					wronginput = 1;
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	91 d4       	rcall	.+2338   	; 0x100a <puts>
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <__data_end+0x1>
				}
			} while(wronginput);
     6f0:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <__data_end>
     6f4:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__data_end>
     6f8:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <__data_end+0x1>
			
			printf("\r\n");
     6fc:	89 2b       	or	r24, r25
     6fe:	59 f6       	brne	.-106    	; 0x696 <testmode+0x1dc>
     700:	8b ec       	ldi	r24, 0xCB	; 203
     702:	93 e0       	ldi	r25, 0x03	; 3
		} while(strcasecmp(uartBuffer, "y"));
     704:	82 d4       	rcall	.+2308   	; 0x100a <puts>
     706:	6c e6       	ldi	r22, 0x6C	; 108
     708:	72 e0       	ldi	r23, 0x02	; 2
     70a:	80 e5       	ldi	r24, 0x50	; 80
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	52 d4       	rcall	.+2212   	; 0xfb4 <strcasecmp>
     710:	89 2b       	or	r24, r25
		
		if(quit) break;
     712:	09 f0       	breq	.+2      	; 0x716 <testmode+0x25c>
     714:	da ce       	rjmp	.-588    	; 0x4ca <testmode+0x10>
     716:	20 97       	sbiw	r28, 0x00	; 0
		else if(MoveMode_TM == 1) {
     718:	09 f0       	breq	.+2      	; 0x71c <testmode+0x262>
     71a:	71 c0       	rjmp	.+226    	; 0x7fe <testmode+0x344>
     71c:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <MoveMode_TM>
     720:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <MoveMode_TM+0x1>
			MoveXY_relative(coordinate_X, coordinate_Y);
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	91 05       	cpc	r25, r1
     728:	59 f5       	brne	.+86     	; 0x780 <testmode+0x2c6>
     72a:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <coordinate_Y>
     72e:	70 91 3b 04 	lds	r23, 0x043B	; 0x80043b <coordinate_Y+0x1>
     732:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <coordinate_X>
     736:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <coordinate_X+0x1>
			pauseUntilStop();
     73a:	f4 dd       	rcall	.-1048   	; 0x324 <MoveXY_relative>
			printf("current Position : [%4d, %4d]\r\n\r\n", curX, curY);
     73c:	b1 de       	rcall	.-670    	; 0x4a0 <pauseUntilStop>
     73e:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <curY+0x1>
     742:	8f 93       	push	r24
     744:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <curY>
     748:	8f 93       	push	r24
     74a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <curX+0x1>
     74e:	8f 93       	push	r24
     750:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <curX>
     754:	8f 93       	push	r24
     756:	87 e8       	ldi	r24, 0x87	; 135
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     75c:	8f 93       	push	r24
     75e:	3d d4       	rcall	.+2170   	; 0xfda <printf>
     760:	9f ef       	ldi	r25, 0xFF	; 255
     762:	23 ed       	ldi	r18, 0xD3	; 211
     764:	80 e3       	ldi	r24, 0x30	; 48
     766:	91 50       	subi	r25, 0x01	; 1
     768:	20 40       	sbci	r18, 0x00	; 0
     76a:	80 40       	sbci	r24, 0x00	; 0
     76c:	e1 f7       	brne	.-8      	; 0x766 <testmode+0x2ac>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <testmode+0x2b6>
     770:	00 00       	nop
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
			_delay_ms(1000);
		}
		else if(MoveMode_TM == 2) {
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	a5 ce       	rjmp	.-694    	; 0x4ca <testmode+0x10>
			MoveXY_absolute(coordinate_X, coordinate_Y);
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	91 05       	cpc	r25, r1
     784:	59 f5       	brne	.+86     	; 0x7dc <testmode+0x322>
     786:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <coordinate_Y>
     78a:	70 91 3b 04 	lds	r23, 0x043B	; 0x80043b <coordinate_Y+0x1>
     78e:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <coordinate_X>
     792:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <coordinate_X+0x1>
			pauseUntilStop();
     796:	1f de       	rcall	.-962    	; 0x3d6 <MoveXY_absolute>
			printf("current Position : [%4d, %4d]\r\n\r\n", curX, curY);
     798:	83 de       	rcall	.-762    	; 0x4a0 <pauseUntilStop>
     79a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <curY+0x1>
     79e:	8f 93       	push	r24
     7a0:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <curY>
     7a4:	8f 93       	push	r24
     7a6:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <curX+0x1>
     7aa:	8f 93       	push	r24
     7ac:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <curX>
     7b0:	8f 93       	push	r24
     7b2:	87 e8       	ldi	r24, 0x87	; 135
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	0f d4       	rcall	.+2078   	; 0xfda <printf>
     7bc:	9f ef       	ldi	r25, 0xFF	; 255
     7be:	23 ed       	ldi	r18, 0xD3	; 211
     7c0:	80 e3       	ldi	r24, 0x30	; 48
     7c2:	91 50       	subi	r25, 0x01	; 1
     7c4:	20 40       	sbci	r18, 0x00	; 0
     7c6:	80 40       	sbci	r24, 0x00	; 0
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <testmode+0x308>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <testmode+0x312>
     7cc:	00 00       	nop
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
			_delay_ms(1000);
		}
		else if(MoveMode_TM == 3){
     7da:	77 ce       	rjmp	.-786    	; 0x4ca <testmode+0x10>
     7dc:	03 97       	sbiw	r24, 0x03	; 3
     7de:	09 f0       	breq	.+2      	; 0x7e2 <testmode+0x328>
			MoveArm(hand,wrist,elbow);
     7e0:	74 ce       	rjmp	.-792    	; 0x4ca <testmode+0x10>
     7e2:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <elbow>
     7e6:	50 91 3f 04 	lds	r21, 0x043F	; 0x80043f <elbow+0x1>
     7ea:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <wrist>
     7ee:	70 91 39 04 	lds	r23, 0x0439	; 0x800439 <wrist+0x1>
     7f2:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <hand>
     7f6:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <hand+0x1>
     7fa:	df dc       	rcall	.-1602   	; 0x1ba <MoveArm>
     7fc:	66 ce       	rjmp	.-820    	; 0x4ca <testmode+0x10>
		}
		
	}
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	08 95       	ret

0000080c <manualmode>:
		//복귀------------------------------------------------------
		//---------------------------------------------------------
	}
}

void manualmode(void) {
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
	set_V_Disable();//PORTC0 low : disable vertical motor
     814:	4f dd       	rcall	.-1378   	; 0x2b4 <set_V_Disable>
	set_H_Disable();//PORTC4 low : disable horizontal motor
     816:	5e dd       	rcall	.-1348   	; 0x2d4 <set_H_Disable>
	freePoseArm();
     818:	02 dd       	rcall	.-1532   	; 0x21e <freePoseArm>
     81a:	89 ea       	ldi	r24, 0xA9	; 169
	
	while(1) {
		printf("Moveup(1), Movedown(2), gotoMainMenu(q)?");
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	9f 93       	push	r25
     820:	8f 93       	push	r24
     822:	db d3       	rcall	.+1974   	; 0xfda <printf>
     824:	80 e5       	ldi	r24, 0x50	; 80
		scanf("%s", uartBuffer);
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	83 ec       	ldi	r24, 0xC3	; 195
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	9f 93       	push	r25
     832:	8f 93       	push	r24
     834:	1a d4       	rcall	.+2100   	; 0x106a <scanf>
     836:	66 ec       	ldi	r22, 0xC6	; 198
		
		if(strcasecmp(uartBuffer, "1")==0) {
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	80 e5       	ldi	r24, 0x50	; 80
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	ba d3       	rcall	.+1908   	; 0xfb4 <strcasecmp>
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	89 2b       	or	r24, r25
     84e:	31 f5       	brne	.+76     	; 0x89c <manualmode+0x90>
     850:	82 ed       	ldi	r24, 0xD2	; 210
			printf("ready?(any word) : ");
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	c0 d3       	rcall	.+1920   	; 0xfda <printf>
     85a:	00 e5       	ldi	r16, 0x50	; 80
     85c:	11 e0       	ldi	r17, 0x01	; 1
			scanf("%s",uartBuffer);
     85e:	1f 93       	push	r17
     860:	0f 93       	push	r16
     862:	c3 ec       	ldi	r28, 0xC3	; 195
     864:	d1 e0       	ldi	r29, 0x01	; 1
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
			set_V_Enable();
     86a:	ff d3       	rcall	.+2046   	; 0x106a <scanf>
     86c:	1f dd       	rcall	.-1474   	; 0x2ac <set_V_Enable>
			set_V_Up();
     86e:	26 dd       	rcall	.-1460   	; 0x2bc <set_V_Up>
     870:	3d dd       	rcall	.-1414   	; 0x2ec <V_MoveStart>
			V_MoveStart();
     872:	86 ee       	ldi	r24, 0xE6	; 230
			printf("stop(any word) : ");
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	9f 93       	push	r25
     878:	8f 93       	push	r24
     87a:	af d3       	rcall	.+1886   	; 0xfda <printf>
     87c:	1f 93       	push	r17
			scanf("%s",uartBuffer);
     87e:	0f 93       	push	r16
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	f2 d3       	rcall	.+2020   	; 0x106a <scanf>
     886:	39 dd       	rcall	.-1422   	; 0x2fa <V_MoveStop>
     888:	15 dd       	rcall	.-1494   	; 0x2b4 <set_V_Disable>
			V_MoveStop();
     88a:	8d b7       	in	r24, 0x3d	; 61
     88c:	9e b7       	in	r25, 0x3e	; 62
			set_V_Disable();
     88e:	0c 96       	adiw	r24, 0x0c	; 12
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	9e bf       	out	0x3e, r25	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	8d bf       	out	0x3d, r24	; 61
     89a:	bf cf       	rjmp	.-130    	; 0x81a <manualmode+0xe>
     89c:	68 ec       	ldi	r22, 0xC8	; 200
     89e:	71 e0       	ldi	r23, 0x01	; 1
		}
		else if (strcasecmp(uartBuffer, "2")==0){
     8a0:	80 e5       	ldi	r24, 0x50	; 80
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	87 d3       	rcall	.+1806   	; 0xfb4 <strcasecmp>
     8a6:	89 2b       	or	r24, r25
     8a8:	31 f5       	brne	.+76     	; 0x8f6 <manualmode+0xea>
     8aa:	82 ed       	ldi	r24, 0xD2	; 210
			printf("ready?(any word) : ");
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	93 d3       	rcall	.+1830   	; 0xfda <printf>
     8b4:	00 e5       	ldi	r16, 0x50	; 80
			scanf("%s",uartBuffer);
     8b6:	11 e0       	ldi	r17, 0x01	; 1
     8b8:	1f 93       	push	r17
     8ba:	0f 93       	push	r16
     8bc:	c3 ec       	ldi	r28, 0xC3	; 195
     8be:	d1 e0       	ldi	r29, 0x01	; 1
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
			set_V_Enable();
     8c4:	d2 d3       	rcall	.+1956   	; 0x106a <scanf>
     8c6:	f2 dc       	rcall	.-1564   	; 0x2ac <set_V_Enable>
			set_V_Down();
     8c8:	fd dc       	rcall	.-1542   	; 0x2c4 <set_V_Down>
     8ca:	10 dd       	rcall	.-1504   	; 0x2ec <V_MoveStart>
			V_MoveStart();
     8cc:	86 ee       	ldi	r24, 0xE6	; 230
     8ce:	92 e0       	ldi	r25, 0x02	; 2
			printf("stop(any word) : ");
     8d0:	9f 93       	push	r25
     8d2:	8f 93       	push	r24
     8d4:	82 d3       	rcall	.+1796   	; 0xfda <printf>
     8d6:	1f 93       	push	r17
     8d8:	0f 93       	push	r16
			scanf("%s",uartBuffer);
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	c5 d3       	rcall	.+1930   	; 0x106a <scanf>
     8e0:	0c dd       	rcall	.-1512   	; 0x2fa <V_MoveStop>
     8e2:	e8 dc       	rcall	.-1584   	; 0x2b4 <set_V_Disable>
			V_MoveStop();
     8e4:	8d b7       	in	r24, 0x3d	; 61
			set_V_Disable();
     8e6:	9e b7       	in	r25, 0x3e	; 62
     8e8:	0c 96       	adiw	r24, 0x0c	; 12
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	9e bf       	out	0x3e, r25	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	8d bf       	out	0x3d, r24	; 61
     8f4:	92 cf       	rjmp	.-220    	; 0x81a <manualmode+0xe>
     8f6:	6c ec       	ldi	r22, 0xCC	; 204
     8f8:	71 e0       	ldi	r23, 0x01	; 1
     8fa:	80 e5       	ldi	r24, 0x50	; 80
		}
		else if (strcasecmp(uartBuffer, "q")==0)
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	5a d3       	rcall	.+1716   	; 0xfb4 <strcasecmp>
     900:	89 2b       	or	r24, r25
     902:	21 f0       	breq	.+8      	; 0x90c <manualmode+0x100>
     904:	88 ef       	ldi	r24, 0xF8	; 248
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	80 d3       	rcall	.+1792   	; 0x100a <puts>
     90a:	87 cf       	rjmp	.-242    	; 0x81a <manualmode+0xe>
			break;
		else
			printf("input '1', '2' or 'q'\r\n");
     90c:	77 dc       	rcall	.-1810   	; 0x1fc <basePoseArm>
     90e:	ce dc       	rcall	.-1636   	; 0x2ac <set_V_Enable>
     910:	dd dc       	rcall	.-1606   	; 0x2cc <set_H_Enable>
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
	}
	
	basePoseArm();
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
	
	set_V_Enable();//PORTC0 low : enable vertical motor
     91a:	08 95       	ret

0000091c <setHereas00>:
     91c:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <curX+0x1>
	set_H_Enable();//PORTC4 low : enable horizontal motor
     920:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <curX>
}
     924:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <curY+0x1>
     928:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <curY>

void setHereas00(void) {
	curX = 0; curY = 0;
     92c:	08 95       	ret

0000092e <automode>:
		}
		
	}
}

void automode(void) {
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	00 d0       	rcall	.+0      	; 0x938 <automode+0xa>
     938:	00 d0       	rcall	.+0      	; 0x93a <automode+0xc>
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
	unsigned int row;
	unsigned int column;
	
	int quit = 0;
	
	setHereas00();
     93e:	ee df       	rcall	.-36     	; 0x91c <setHereas00>
	
	while(1) {
		do{
			quit = 0;
			printf("n");
     940:	8e e6       	ldi	r24, 0x6E	; 110
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	5d d3       	rcall	.+1722   	; 0x1000 <putchar>
			printf("\r\n");
     946:	8b ec       	ldi	r24, 0xCB	; 203
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	5f d3       	rcall	.+1726   	; 0x100a <puts>
			printf("(forUser)@@quit for row == 4@@\r\n");
     94c:	8f e0       	ldi	r24, 0x0F	; 15
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	5c d3       	rcall	.+1720   	; 0x100a <puts>
     952:	8f e2       	ldi	r24, 0x2F	; 47
			printf("(forUser)waiting for [row,column] : ");
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	3f d3       	rcall	.+1662   	; 0xfda <printf>
     95c:	ce 01       	movw	r24, r28
			scanf("%u,%u", &row, &column);
     95e:	03 96       	adiw	r24, 0x03	; 3
     960:	9f 93       	push	r25
     962:	8f 93       	push	r24
     964:	02 97       	sbiw	r24, 0x02	; 2
     966:	9f 93       	push	r25
     968:	8f 93       	push	r24
     96a:	84 e5       	ldi	r24, 0x54	; 84
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	7b d3       	rcall	.+1782   	; 0x106a <scanf>
     974:	0f b6       	in	r0, 0x3f	; 63
			
			while(row>=5||column>=9) {
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	24 c0       	rjmp	.+72     	; 0x9c8 <automode+0x9a>
				printf("r");
     980:	82 e7       	ldi	r24, 0x72	; 114
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	3d d3       	rcall	.+1658   	; 0x1000 <putchar>
     986:	8b ec       	ldi	r24, 0xCB	; 203
				printf("\r\n");
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	3f d3       	rcall	.+1662   	; 0x100a <puts>
     98c:	8a e5       	ldi	r24, 0x5A	; 90
				printf("(forUser)worng input");
     98e:	93 e0       	ldi	r25, 0x03	; 3
     990:	9f 93       	push	r25
     992:	8f 93       	push	r24
     994:	22 d3       	rcall	.+1604   	; 0xfda <printf>
     996:	8f e0       	ldi	r24, 0x0F	; 15
				printf("(forUser)@@quit for row == 4@@\r\n");
     998:	93 e0       	ldi	r25, 0x03	; 3
     99a:	37 d3       	rcall	.+1646   	; 0x100a <puts>
     99c:	8f e2       	ldi	r24, 0x2F	; 47
     99e:	93 e0       	ldi	r25, 0x03	; 3
				printf("(forUser)waiting for [row,column] : ");
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	1a d3       	rcall	.+1588   	; 0xfda <printf>
     9a6:	ce 01       	movw	r24, r28
     9a8:	03 96       	adiw	r24, 0x03	; 3
     9aa:	9f 93       	push	r25
				scanf("%u,%u", &row, &column);
     9ac:	8f 93       	push	r24
     9ae:	02 97       	sbiw	r24, 0x02	; 2
     9b0:	9f 93       	push	r25
     9b2:	8f 93       	push	r24
     9b4:	84 e5       	ldi	r24, 0x54	; 84
     9b6:	93 e0       	ldi	r25, 0x03	; 3
     9b8:	9f 93       	push	r25
     9ba:	8f 93       	push	r24
     9bc:	56 d3       	rcall	.+1708   	; 0x106a <scanf>
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	9a 81       	ldd	r25, Y+2	; 0x02
     9cc:	05 97       	sbiw	r24, 0x05	; 5
			printf("\r\n");
			printf("(forUser)@@quit for row == 4@@\r\n");
			printf("(forUser)waiting for [row,column] : ");
			scanf("%u,%u", &row, &column);
			
			while(row>=5||column>=9) {
     9ce:	c0 f6       	brcc	.-80     	; 0x980 <automode+0x52>
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	09 97       	sbiw	r24, 0x09	; 9
     9d6:	a0 f6       	brcc	.-88     	; 0x980 <automode+0x52>
     9d8:	00 e0       	ldi	r16, 0x00	; 0
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <__data_end+0x1>
     9e0:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <__data_end>
				printf("(forUser)waiting for [row,column] : ");
				scanf("%u,%u", &row, &column);
			}
			
			do {
				wronginput = 0;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
				if(row==4) {
     9e8:	84 30       	cpi	r24, 0x04	; 4
     9ea:	91 05       	cpc	r25, r1
     9ec:	51 f4       	brne	.+20     	; 0xa02 <automode+0xd4>
     9ee:	8f e6       	ldi	r24, 0x6F	; 111
     9f0:	93 e0       	ldi	r25, 0x03	; 3
					printf("(forUser)quit - ");
     9f2:	9f 93       	push	r25
     9f4:	8f 93       	push	r24
     9f6:	f1 d2       	rcall	.+1506   	; 0xfda <printf>
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	01 e0       	ldi	r16, 0x01	; 1
     9fe:	10 e0       	ldi	r17, 0x00	; 0
     a00:	11 c0       	rjmp	.+34     	; 0xa24 <automode+0xf6>
					quit = 1;
     a02:	2c 81       	ldd	r18, Y+4	; 0x04
     a04:	2f 93       	push	r18
				} else {
					printf("(forUser)[%u,%u] - ",row, column);
     a06:	2b 81       	ldd	r18, Y+3	; 0x03
     a08:	2f 93       	push	r18
     a0a:	9f 93       	push	r25
     a0c:	8f 93       	push	r24
     a0e:	80 e8       	ldi	r24, 0x80	; 128
     a10:	93 e0       	ldi	r25, 0x03	; 3
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	e1 d2       	rcall	.+1474   	; 0xfda <printf>
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	84 e9       	ldi	r24, 0x94	; 148
     a26:	93 e0       	ldi	r25, 0x03	; 3
				}
				
				printf("Do you want to proceed?[y/n] : ");
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	d6 d2       	rcall	.+1452   	; 0xfda <printf>
     a2e:	80 e5       	ldi	r24, 0x50	; 80
     a30:	91 e0       	ldi	r25, 0x01	; 1
				scanf("%s", uartBuffer);
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	83 ec       	ldi	r24, 0xC3	; 195
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	15 d3       	rcall	.+1578   	; 0x106a <scanf>
     a40:	6c e6       	ldi	r22, 0x6C	; 108
     a42:	72 e0       	ldi	r23, 0x02	; 2
     a44:	80 e5       	ldi	r24, 0x50	; 80
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	b5 d2       	rcall	.+1386   	; 0xfb4 <strcasecmp>
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	89 2b       	or	r24, r25
     a58:	81 f0       	breq	.+32     	; 0xa7a <automode+0x14c>
     a5a:	6e e6       	ldi	r22, 0x6E	; 110
     a5c:	72 e0       	ldi	r23, 0x02	; 2
     a5e:	80 e5       	ldi	r24, 0x50	; 80
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	a8 d2       	rcall	.+1360   	; 0xfb4 <strcasecmp>
     a64:	89 2b       	or	r24, r25
     a66:	49 f0       	breq	.+18     	; 0xa7a <automode+0x14c>
     a68:	80 e7       	ldi	r24, 0x70	; 112
     a6a:	92 e0       	ldi	r25, 0x02	; 2
     a6c:	ce d2       	rcall	.+1436   	; 0x100a <puts>
					printf("input 'y' or 'n' only\r\n");
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <__data_end+0x1>
					wronginput = 1;
     a76:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <__data_end>
     a7a:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__data_end>
				}
			} while(wronginput);
     a7e:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <__data_end+0x1>
     a82:	89 2b       	or	r24, r25
     a84:	09 f0       	breq	.+2      	; 0xa88 <automode+0x15a>
     a86:	aa cf       	rjmp	.-172    	; 0x9dc <automode+0xae>
     a88:	8b ec       	ldi	r24, 0xCB	; 203
			printf("\r\n");
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	be d2       	rcall	.+1404   	; 0x100a <puts>
     a8e:	6c e6       	ldi	r22, 0x6C	; 108
     a90:	72 e0       	ldi	r23, 0x02	; 2
		} while(strcasecmp(uartBuffer, "y"));
     a92:	80 e5       	ldi	r24, 0x50	; 80
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	8e d2       	rcall	.+1308   	; 0xfb4 <strcasecmp>
     a98:	89 2b       	or	r24, r25
     a9a:	09 f0       	breq	.+2      	; 0xa9e <automode+0x170>
     a9c:	51 cf       	rjmp	.-350    	; 0x940 <automode+0x12>
     a9e:	01 30       	cpi	r16, 0x01	; 1
		if(quit == 1) break;
     aa0:	11 05       	cpc	r17, r1
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <automode+0x178>
     aa4:	5d c1       	rjmp	.+698    	; 0xd60 <automode+0x432>
     aa6:	aa db       	rcall	.-2220   	; 0x1fc <basePoseArm>
		
		//시작 준비------------------------------------------------
		basePoseArm();
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	29 e6       	ldi	r18, 0x69	; 105
     aac:	88 e1       	ldi	r24, 0x18	; 24
     aae:	91 50       	subi	r25, 0x01	; 1
     ab0:	20 40       	sbci	r18, 0x00	; 0
     ab2:	80 40       	sbci	r24, 0x00	; 0
     ab4:	e1 f7       	brne	.-8      	; 0xaae <automode+0x180>
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <automode+0x18a>
     ab8:	00 00       	nop
		_delay_ms(500);
		//---------------------------------------------------------
		
		//음료수 잡기-----------------------------------------------
		MoveXY_absolute(140, 210);
     aba:	62 ed       	ldi	r22, 0xD2	; 210
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	8c e8       	ldi	r24, 0x8C	; 140
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	89 dc       	rcall	.-1774   	; 0x3d6 <MoveXY_absolute>
     ac4:	ed dc       	rcall	.-1574   	; 0x4a0 <pauseUntilStop>
		pauseUntilStop();
     ac6:	9f ef       	ldi	r25, 0xFF	; 255
     ac8:	29 e6       	ldi	r18, 0x69	; 105
     aca:	88 e1       	ldi	r24, 0x18	; 24
     acc:	91 50       	subi	r25, 0x01	; 1
     ace:	20 40       	sbci	r18, 0x00	; 0
     ad0:	80 40       	sbci	r24, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <automode+0x19e>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <automode+0x1a8>
     ad6:	00 00       	nop
     ad8:	c6 db       	rcall	.-2164   	; 0x266 <openHand>
		_delay_ms(500);
		
		openHand();
     ada:	62 ed       	ldi	r22, 0xD2	; 210
     adc:	70 e0       	ldi	r23, 0x00	; 0
		
		MoveXY_absolute(0, 210);
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	79 dc       	rcall	.-1806   	; 0x3d6 <MoveXY_absolute>
     ae4:	dd dc       	rcall	.-1606   	; 0x4a0 <pauseUntilStop>
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
		pauseUntilStop();
     ae8:	29 e6       	ldi	r18, 0x69	; 105
     aea:	88 e1       	ldi	r24, 0x18	; 24
     aec:	91 50       	subi	r25, 0x01	; 1
     aee:	20 40       	sbci	r18, 0x00	; 0
     af0:	80 40       	sbci	r24, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <automode+0x1be>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <automode+0x1c8>
     af6:	00 00       	nop
     af8:	a8 db       	rcall	.-2224   	; 0x24a <catchHand_thin>
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	29 e6       	ldi	r18, 0x69	; 105
		_delay_ms(500);
		
		catchHand_thin();
     afe:	88 e1       	ldi	r24, 0x18	; 24
     b00:	91 50       	subi	r25, 0x01	; 1
     b02:	20 40       	sbci	r18, 0x00	; 0
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	e1 f7       	brne	.-8      	; 0xb00 <automode+0x1d2>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <automode+0x1dc>
     b0a:	00 00       	nop
     b0c:	68 e2       	ldi	r22, 0x28	; 40
     b0e:	70 e0       	ldi	r23, 0x00	; 0
		_delay_ms(500);
		
		MoveXY_relative(0, 40);
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	07 dc       	rcall	.-2034   	; 0x324 <MoveXY_relative>
     b16:	c4 dc       	rcall	.-1656   	; 0x4a0 <pauseUntilStop>
     b18:	9f ef       	ldi	r25, 0xFF	; 255
     b1a:	25 ea       	ldi	r18, 0xA5	; 165
		pauseUntilStop();
     b1c:	8e e0       	ldi	r24, 0x0E	; 14
     b1e:	91 50       	subi	r25, 0x01	; 1
     b20:	20 40       	sbci	r18, 0x00	; 0
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	e1 f7       	brne	.-8      	; 0xb1e <automode+0x1f0>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <automode+0x1fa>
     b28:	00 00       	nop
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	84 e6       	ldi	r24, 0x64	; 100
     b30:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(300);
		MoveXY_relative(100, 0);
     b32:	f8 db       	rcall	.-2064   	; 0x324 <MoveXY_relative>
     b34:	b5 dc       	rcall	.-1686   	; 0x4a0 <pauseUntilStop>
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	25 ea       	ldi	r18, 0xA5	; 165
     b3a:	8e e0       	ldi	r24, 0x0E	; 14
     b3c:	91 50       	subi	r25, 0x01	; 1
		pauseUntilStop();
     b3e:	20 40       	sbci	r18, 0x00	; 0
     b40:	80 40       	sbci	r24, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <automode+0x20e>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <automode+0x218>
     b46:	00 00       	nop
     b48:	29 81       	ldd	r18, Y+1	; 0x01
     b4a:	3a 81       	ldd	r19, Y+2	; 0x02
     b4c:	f9 01       	movw	r30, r18
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	ee 0f       	add	r30, r30
		_delay_ms(300);
		//-----------------------------------------------------------
		
		//지정된 좌표로 이동 및 안쪽으로 팔 집어넣음--------------------
		if(XlocArr[row][column] <= 250) {
     b54:	ff 1f       	adc	r31, r31
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	e2 0f       	add	r30, r18
     b5c:	f3 1f       	adc	r31, r19
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	e8 0f       	add	r30, r24
     b64:	f9 1f       	adc	r31, r25
     b66:	ee 0f       	add	r30, r30
     b68:	ff 1f       	adc	r31, r31
     b6a:	e8 5f       	subi	r30, 0xF8	; 248
     b6c:	fe 4f       	sbci	r31, 0xFE	; 254
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	8b 3f       	cpi	r24, 0xFB	; 251
     b74:	91 05       	cpc	r25, r1
     b76:	0c f0       	brlt	.+2      	; 0xb7a <automode+0x24c>
     b78:	50 c0       	rjmp	.+160    	; 0xc1a <automode+0x2ec>
     b7a:	22 0f       	add	r18, r18
     b7c:	33 1f       	adc	r19, r19
     b7e:	f9 01       	movw	r30, r18
			MoveXY_absolute(250, YlocArr[row]);
     b80:	e0 50       	subi	r30, 0x00	; 0
     b82:	ff 4f       	sbci	r31, 0xFF	; 255
     b84:	60 81       	ld	r22, Z
     b86:	71 81       	ldd	r23, Z+1	; 0x01
     b88:	8a ef       	ldi	r24, 0xFA	; 250
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	24 dc       	rcall	.-1976   	; 0x3d6 <MoveXY_absolute>
     b8e:	88 dc       	rcall	.-1776   	; 0x4a0 <pauseUntilStop>
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	29 e6       	ldi	r18, 0x69	; 105
     b94:	88 e1       	ldi	r24, 0x18	; 24
			pauseUntilStop();
     b96:	91 50       	subi	r25, 0x01	; 1
     b98:	20 40       	sbci	r18, 0x00	; 0
     b9a:	80 40       	sbci	r24, 0x00	; 0
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <automode+0x268>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <automode+0x272>
     ba0:	00 00       	nop
     ba2:	68 db       	rcall	.-2352   	; 0x274 <CWturnWrist>
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	29 e6       	ldi	r18, 0x69	; 105
     ba8:	88 e1       	ldi	r24, 0x18	; 24
     baa:	91 50       	subi	r25, 0x01	; 1
			_delay_ms(500);
			
			CWturnWrist();
     bac:	20 40       	sbci	r18, 0x00	; 0
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	e1 f7       	brne	.-8      	; 0xbaa <automode+0x27c>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <automode+0x286>
     bb4:	00 00       	nop
     bb6:	6c db       	rcall	.-2344   	; 0x290 <innerTurnElbow>
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	2f e0       	ldi	r18, 0x0F	; 15
     bbc:	87 e2       	ldi	r24, 0x27	; 39
     bbe:	91 50       	subi	r25, 0x01	; 1
     bc0:	20 40       	sbci	r18, 0x00	; 0
			_delay_ms(500);
			innerTurnElbow();
     bc2:	80 40       	sbci	r24, 0x00	; 0
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <automode+0x290>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <automode+0x29a>
     bc8:	00 00       	nop
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	fc 01       	movw	r30, r24
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
			_delay_ms(800);
			
			
			MoveXY_absolute(XlocArr[row][column], YlocArr[row]);
     bd4:	e0 50       	subi	r30, 0x00	; 0
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	60 81       	ld	r22, Z
     bda:	71 81       	ldd	r23, Z+1	; 0x01
     bdc:	fc 01       	movw	r30, r24
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	e8 0f       	add	r30, r24
     bec:	f9 1f       	adc	r31, r25
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	9c 81       	ldd	r25, Y+4	; 0x04
     bf2:	e8 0f       	add	r30, r24
     bf4:	f9 1f       	adc	r31, r25
     bf6:	ee 0f       	add	r30, r30
     bf8:	ff 1f       	adc	r31, r31
     bfa:	e8 5f       	subi	r30, 0xF8	; 248
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	e9 db       	rcall	.-2094   	; 0x3d6 <MoveXY_absolute>
     c04:	4d dc       	rcall	.-1894   	; 0x4a0 <pauseUntilStop>
     c06:	9f ef       	ldi	r25, 0xFF	; 255
     c08:	29 e6       	ldi	r18, 0x69	; 105
			pauseUntilStop();
     c0a:	88 e1       	ldi	r24, 0x18	; 24
     c0c:	91 50       	subi	r25, 0x01	; 1
     c0e:	20 40       	sbci	r18, 0x00	; 0
     c10:	80 40       	sbci	r24, 0x00	; 0
     c12:	e1 f7       	brne	.-8      	; 0xc0c <automode+0x2de>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <automode+0x2e8>
     c16:	00 00       	nop
     c18:	26 c0       	rjmp	.+76     	; 0xc66 <automode+0x338>
     c1a:	22 0f       	add	r18, r18
     c1c:	33 1f       	adc	r19, r19
     c1e:	f9 01       	movw	r30, r18
			_delay_ms(500);
		} else {
			MoveXY_absolute(XlocArr[row][column], YlocArr[row]);
     c20:	e0 50       	subi	r30, 0x00	; 0
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	60 81       	ld	r22, Z
     c26:	71 81       	ldd	r23, Z+1	; 0x01
     c28:	d6 db       	rcall	.-2132   	; 0x3d6 <MoveXY_absolute>
     c2a:	3a dc       	rcall	.-1932   	; 0x4a0 <pauseUntilStop>
     c2c:	9f ef       	ldi	r25, 0xFF	; 255
     c2e:	29 e6       	ldi	r18, 0x69	; 105
			pauseUntilStop();
     c30:	88 e1       	ldi	r24, 0x18	; 24
     c32:	91 50       	subi	r25, 0x01	; 1
     c34:	20 40       	sbci	r18, 0x00	; 0
     c36:	80 40       	sbci	r24, 0x00	; 0
     c38:	e1 f7       	brne	.-8      	; 0xc32 <automode+0x304>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <automode+0x30e>
     c3c:	00 00       	nop
     c3e:	1a db       	rcall	.-2508   	; 0x274 <CWturnWrist>
     c40:	9f ef       	ldi	r25, 0xFF	; 255
			_delay_ms(500);
			
			CWturnWrist();
     c42:	29 e6       	ldi	r18, 0x69	; 105
     c44:	88 e1       	ldi	r24, 0x18	; 24
     c46:	91 50       	subi	r25, 0x01	; 1
     c48:	20 40       	sbci	r18, 0x00	; 0
     c4a:	80 40       	sbci	r24, 0x00	; 0
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <automode+0x318>
     c4e:	00 c0       	rjmp	.+0      	; 0xc50 <automode+0x322>
     c50:	00 00       	nop
     c52:	1e db       	rcall	.-2500   	; 0x290 <innerTurnElbow>
     c54:	9f ef       	ldi	r25, 0xFF	; 255
			_delay_ms(500);
			innerTurnElbow();
     c56:	2f e0       	ldi	r18, 0x0F	; 15
     c58:	87 e2       	ldi	r24, 0x27	; 39
     c5a:	91 50       	subi	r25, 0x01	; 1
     c5c:	20 40       	sbci	r18, 0x00	; 0
     c5e:	80 40       	sbci	r24, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <automode+0x32c>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <automode+0x336>
     c64:	00 00       	nop
     c66:	f8 da       	rcall	.-2576   	; 0x258 <holdHand_thin>
			_delay_ms(800);
		}
		//---------------------------------------------------------
		
		//살짝 내려놓음---------------------------------------------
		holdHand_thin();
     c68:	9f ef       	ldi	r25, 0xFF	; 255
     c6a:	21 ee       	ldi	r18, 0xE1	; 225
     c6c:	84 e0       	ldi	r24, 0x04	; 4
     c6e:	91 50       	subi	r25, 0x01	; 1
     c70:	20 40       	sbci	r18, 0x00	; 0
     c72:	80 40       	sbci	r24, 0x00	; 0
     c74:	e1 f7       	brne	.-8      	; 0xc6e <automode+0x340>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <automode+0x34a>
     c78:	00 00       	nop
     c7a:	6e ec       	ldi	r22, 0xCE	; 206
     c7c:	7f ef       	ldi	r23, 0xFF	; 255
		_delay_ms(100);
		MoveXY_relative(0, -50);
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	50 db       	rcall	.-2400   	; 0x324 <MoveXY_relative>
     c84:	0d dc       	rcall	.-2022   	; 0x4a0 <pauseUntilStop>
     c86:	9f ef       	ldi	r25, 0xFF	; 255
     c88:	25 ea       	ldi	r18, 0xA5	; 165
		pauseUntilStop();
     c8a:	8e e0       	ldi	r24, 0x0E	; 14
     c8c:	91 50       	subi	r25, 0x01	; 1
     c8e:	20 40       	sbci	r18, 0x00	; 0
     c90:	80 40       	sbci	r24, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <automode+0x35e>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <automode+0x368>
     c96:	00 00       	nop
     c98:	e6 da       	rcall	.-2612   	; 0x266 <openHand>
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	27 ea       	ldi	r18, 0xA7	; 167
     c9e:	81 e6       	ldi	r24, 0x61	; 97
		_delay_ms(300);
		
		openHand();
     ca0:	91 50       	subi	r25, 0x01	; 1
     ca2:	20 40       	sbci	r18, 0x00	; 0
     ca4:	80 40       	sbci	r24, 0x00	; 0
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <automode+0x372>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <automode+0x37c>
     caa:	00 00       	nop
     cac:	62 e3       	ldi	r22, 0x32	; 50
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	37 db       	rcall	.-2450   	; 0x324 <MoveXY_relative>
		_delay_ms(2000);
		
		MoveXY_relative(0, 50);
     cb6:	f4 db       	rcall	.-2072   	; 0x4a0 <pauseUntilStop>
     cb8:	9f ef       	ldi	r25, 0xFF	; 255
     cba:	25 ea       	ldi	r18, 0xA5	; 165
     cbc:	8e e0       	ldi	r24, 0x0E	; 14
		pauseUntilStop();
     cbe:	91 50       	subi	r25, 0x01	; 1
     cc0:	20 40       	sbci	r18, 0x00	; 0
     cc2:	80 40       	sbci	r24, 0x00	; 0
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <automode+0x390>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <automode+0x39a>
     cc8:	00 00       	nop
     cca:	29 81       	ldd	r18, Y+1	; 0x01
     ccc:	3a 81       	ldd	r19, Y+2	; 0x02
     cce:	f9 01       	movw	r30, r18
     cd0:	ee 0f       	add	r30, r30
		_delay_ms(300);
		//----------------------------------------------------------
		
		//팔 뻄-----------------------------------------------------
		if(XlocArr[row][column] <= 250) {
     cd2:	ff 1f       	adc	r31, r31
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	e2 0f       	add	r30, r18
     cde:	f3 1f       	adc	r31, r19
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	e8 0f       	add	r30, r24
     ce6:	f9 1f       	adc	r31, r25
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	e8 5f       	subi	r30, 0xF8	; 248
     cee:	fe 4f       	sbci	r31, 0xFE	; 254
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	8b 3f       	cpi	r24, 0xFB	; 251
     cf6:	91 05       	cpc	r25, r1
     cf8:	a4 f4       	brge	.+40     	; 0xd22 <automode+0x3f4>
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
			MoveXY_absolute(250, YlocArr[row]);
     cfe:	f9 01       	movw	r30, r18
     d00:	e0 50       	subi	r30, 0x00	; 0
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	8a ef       	ldi	r24, 0xFA	; 250
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	64 db       	rcall	.-2360   	; 0x3d6 <MoveXY_absolute>
     d0e:	c8 db       	rcall	.-2160   	; 0x4a0 <pauseUntilStop>
     d10:	9f ef       	ldi	r25, 0xFF	; 255
     d12:	25 ea       	ldi	r18, 0xA5	; 165
			pauseUntilStop();
     d14:	8e e0       	ldi	r24, 0x0E	; 14
     d16:	91 50       	subi	r25, 0x01	; 1
     d18:	20 40       	sbci	r18, 0x00	; 0
     d1a:	80 40       	sbci	r24, 0x00	; 0
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <automode+0x3e8>
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <automode+0x3f2>
     d20:	00 00       	nop
     d22:	8c da       	rcall	.-2792   	; 0x23c <closeHand>
     d24:	9f ef       	ldi	r25, 0xFF	; 255
     d26:	23 ec       	ldi	r18, 0xC3	; 195
     d28:	89 e0       	ldi	r24, 0x09	; 9
			_delay_ms(300);
		}
		
		closeHand();
     d2a:	91 50       	subi	r25, 0x01	; 1
     d2c:	20 40       	sbci	r18, 0x00	; 0
     d2e:	80 40       	sbci	r24, 0x00	; 0
     d30:	e1 f7       	brne	.-8      	; 0xd2a <automode+0x3fc>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <automode+0x406>
     d34:	00 00       	nop
     d36:	b3 da       	rcall	.-2714   	; 0x29e <normalTurnElbow>
     d38:	9f ef       	ldi	r25, 0xFF	; 255
     d3a:	23 ec       	ldi	r18, 0xC3	; 195
     d3c:	89 e0       	ldi	r24, 0x09	; 9
     d3e:	91 50       	subi	r25, 0x01	; 1
		_delay_ms(200);
		
		normalTurnElbow();
     d40:	20 40       	sbci	r18, 0x00	; 0
     d42:	80 40       	sbci	r24, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <automode+0x410>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <automode+0x41a>
     d48:	00 00       	nop
     d4a:	9b da       	rcall	.-2762   	; 0x282 <normalWrist>
     d4c:	9f ef       	ldi	r25, 0xFF	; 255
     d4e:	29 e6       	ldi	r18, 0x69	; 105
     d50:	88 e1       	ldi	r24, 0x18	; 24
     d52:	91 50       	subi	r25, 0x01	; 1
     d54:	20 40       	sbci	r18, 0x00	; 0
		_delay_ms(200);
		normalWrist();
     d56:	80 40       	sbci	r24, 0x00	; 0
     d58:	e1 f7       	brne	.-8      	; 0xd52 <automode+0x424>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <automode+0x42e>
     d5c:	00 00       	nop
     d5e:	f0 cd       	rjmp	.-1056   	; 0x940 <automode+0x12>
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
		//----------------------------------------------------------
		
		//복귀------------------------------------------------------
		//---------------------------------------------------------
	}
}
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <__vector_1>:
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	0b b6       	in	r0, 0x3b	; 59
     d7e:	0f 92       	push	r0

void setHereas00(void) {
	curX = 0; curY = 0;
}

ISR(INT0_vect) {//emergency switch
     d80:	2f 93       	push	r18
     d82:	3f 93       	push	r19
     d84:	4f 93       	push	r20
     d86:	5f 93       	push	r21
     d88:	6f 93       	push	r22
     d8a:	7f 93       	push	r23
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
     d90:	af 93       	push	r26
     d92:	bf 93       	push	r27
     d94:	ef 93       	push	r30
     d96:	ff 93       	push	r31
	freePoseArm();
     d98:	42 da       	rcall	.-2940   	; 0x21e <freePoseArm>
	printf("\r\n\r\n!!!!INT0 set!!!!!\r\n\r\n");
     d9a:	84 eb       	ldi	r24, 0xB4	; 180
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	35 d1       	rcall	.+618    	; 0x100a <puts>
	
	//set_V_Disable();//PORTC0 low : disable vertical motor
	//set_H_Disable();//PORTC4 low : disable horizontal motor
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <__vector_14>:

ISR(TIMER1_OVF_vect) {
     dc6:	1f 92       	push	r1
     dc8:	0f 92       	push	r0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	0f 92       	push	r0
     dce:	11 24       	eor	r1, r1
     dd0:	0b b6       	in	r0, 0x3b	; 59
     dd2:	0f 92       	push	r0
     dd4:	2f 93       	push	r18
     dd6:	3f 93       	push	r19
     dd8:	4f 93       	push	r20
     dda:	5f 93       	push	r21
     ddc:	6f 93       	push	r22
     dde:	7f 93       	push	r23
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	af 93       	push	r26
     de6:	bf 93       	push	r27
     de8:	ef 93       	push	r30
     dea:	ff 93       	push	r31
	if(h_ms != -1) h_ms--;
     dec:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <h_ms>
     df0:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <h_ms+0x1>
     df4:	8f 3f       	cpi	r24, 0xFF	; 255
     df6:	2f ef       	ldi	r18, 0xFF	; 255
     df8:	92 07       	cpc	r25, r18
     dfa:	29 f0       	breq	.+10     	; 0xe06 <__vector_14+0x40>
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <h_ms+0x1>
     e02:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <h_ms>
	if(v_ms != -1) v_ms--;
     e06:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <v_ms>
     e0a:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <v_ms+0x1>
     e0e:	8f 3f       	cpi	r24, 0xFF	; 255
     e10:	2f ef       	ldi	r18, 0xFF	; 255
     e12:	92 07       	cpc	r25, r18
     e14:	29 f0       	breq	.+10     	; 0xe20 <__vector_14+0x5a>
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <v_ms+0x1>
     e1c:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <v_ms>
	
	if(h_ms == 0) {
     e20:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <h_ms>
     e24:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <h_ms+0x1>
     e28:	89 2b       	or	r24, r25
     e2a:	39 f4       	brne	.+14     	; 0xe3a <__vector_14+0x74>
		H_MoveStop();
     e2c:	74 da       	rcall	.-2840   	; 0x316 <H_MoveStop>
		h_stopFlag = 1;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <h_stopFlag+0x1>
     e36:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <h_stopFlag>
	}
	if(v_ms == 0) {
     e3a:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <v_ms>
     e3e:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <v_ms+0x1>
     e42:	89 2b       	or	r24, r25
		V_MoveStop();
     e44:	39 f4       	brne	.+14     	; 0xe54 <__vector_14+0x8e>
     e46:	59 da       	rcall	.-2894   	; 0x2fa <V_MoveStop>
		v_stopFlag = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <v_stopFlag+0x1>
     e50:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <v_stopFlag>
	}
}
     e54:	ff 91       	pop	r31
     e56:	ef 91       	pop	r30
     e58:	bf 91       	pop	r27
     e5a:	af 91       	pop	r26
     e5c:	9f 91       	pop	r25
     e5e:	8f 91       	pop	r24
     e60:	7f 91       	pop	r23
     e62:	6f 91       	pop	r22
     e64:	5f 91       	pop	r21
     e66:	4f 91       	pop	r20
     e68:	3f 91       	pop	r19
     e6a:	2f 91       	pop	r18
     e6c:	0f 90       	pop	r0
     e6e:	0b be       	out	0x3b, r0	; 59
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <main>:


int main(void)
{
	DDRB |= (1 << PORTB2) | (1 << PORTB3);//vertical, PORTB2 : EN, PORTB3 : CW;
     e7a:	87 b3       	in	r24, 0x17	; 23
     e7c:	8c 60       	ori	r24, 0x0C	; 12
     e7e:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PORTB5) | (1 << PORTB6);//horizontal, PORTB5 : EN, PORTB6 : CW;
     e80:	87 b3       	in	r24, 0x17	; 23
     e82:	80 66       	ori	r24, 0x60	; 96
     e84:	87 bb       	out	0x17, r24	; 23

	PORTB &= ~(1 << PORTB2);//PORTC0 low : enable vertical motor
     e86:	88 b3       	in	r24, 0x18	; 24
     e88:	8b 7f       	andi	r24, 0xFB	; 251
     e8a:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1 << PORTB5);//PORTC4 low : enable horizontal motor
     e8c:	88 b3       	in	r24, 0x18	; 24
     e8e:	8f 7d       	andi	r24, 0xDF	; 223
     e90:	88 bb       	out	0x18, r24	; 24

	//T/C enable
	InitializeTimer0();//vertical step motor PWM channel
     e92:	21 d9       	rcall	.-3518   	; 0xd6 <InitializeTimer0>
	InitializeTimer2();//horizontal step motor PWM channel
     e94:	35 d9       	rcall	.-3478   	; 0x100 <InitializeTimer2>
	InitializeTimer3();//robot arm servo motor PWM channel
     e96:	5a d9       	rcall	.-3404   	; 0x14c <InitializeTimer3>
     e98:	48 d9       	rcall	.-3440   	; 0x12a <InitializeTimer1>
	
	InitializeTimer1();//user timer
     e9a:	87 b7       	in	r24, 0x37	; 55
     e9c:	84 60       	ori	r24, 0x04	; 4
	TIMSK |= (1<<TOIE1); //T/C1 overflow interrupt enable
     e9e:	87 bf       	out	0x37, r24	; 55
     ea0:	81 b3       	in	r24, 0x11	; 17
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
	
	//emergency button interrupt enable
	DDRD &= ~(1<<PORTD0);
     ea4:	81 bb       	out	0x11, r24	; 17
     ea6:	82 b3       	in	r24, 0x12	; 18
     ea8:	81 60       	ori	r24, 0x01	; 1
	PORTD |= (1<<PORTD0);
     eaa:	82 bb       	out	0x12, r24	; 18
     eac:	89 b7       	in	r24, 0x39	; 57
     eae:	81 60       	ori	r24, 0x01	; 1
	EIMSK |= (1<<INT0);
     eb0:	89 bf       	out	0x39, r24	; 57
     eb2:	ea e6       	ldi	r30, 0x6A	; 106
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
	EICRA |= (1<<ISC01);
     eb6:	80 81       	ld	r24, Z
     eb8:	82 60       	ori	r24, 0x02	; 2
     eba:	80 83       	st	Z, r24
     ebc:	78 94       	sei
	
	sei();
     ebe:	54 d0       	rcall	.+168    	; 0xf68 <UART1_init>
	
	UART1_init();
     ec0:	e0 e4       	ldi	r30, 0x40	; 64
     ec2:	f4 e0       	ldi	r31, 0x04	; 4
	stdout = &OUTPUT;
     ec4:	82 e7       	ldi	r24, 0x72	; 114
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	93 83       	std	Z+3, r25	; 0x03
     eca:	82 83       	std	Z+2, r24	; 0x02
     ecc:	84 e6       	ldi	r24, 0x64	; 100
	stdin = &INPUT;
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
     ed4:	93 d9       	rcall	.-3290   	; 0x1fc <basePoseArm>
	
	
	basePoseArm();
     ed6:	2f ef       	ldi	r18, 0xFF	; 255
     ed8:	83 e2       	ldi	r24, 0x23	; 35
     eda:	94 ef       	ldi	r25, 0xF4	; 244
     edc:	21 50       	subi	r18, 0x01	; 1
     ede:	80 40       	sbci	r24, 0x00	; 0
     ee0:	90 40       	sbci	r25, 0x00	; 0
     ee2:	e1 f7       	brne	.-8      	; 0xedc <main+0x62>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <main+0x6c>
     ee6:	00 00       	nop
     ee8:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <__data_end+0x1>
	_delay_ms(5000);

	while(1) {
		do {
			wronginput = 0;
     eec:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <__data_end>
     ef0:	8d ec       	ldi	r24, 0xCD	; 205
			
			printf("Testmode(1), automode(2), manualmode(3), setHereAs[0,0](4)?");
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	9f 93       	push	r25
     ef6:	8f 93       	push	r24
     ef8:	70 d0       	rcall	.+224    	; 0xfda <printf>
     efa:	80 e5       	ldi	r24, 0x50	; 80
     efc:	91 e0       	ldi	r25, 0x01	; 1
			scanf("%s", uartBuffer);
     efe:	9f 93       	push	r25
     f00:	8f 93       	push	r24
     f02:	83 ec       	ldi	r24, 0xC3	; 195
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	9f 93       	push	r25
     f08:	8f 93       	push	r24
     f0a:	af d0       	rcall	.+350    	; 0x106a <scanf>
     f0c:	66 ec       	ldi	r22, 0xC6	; 198
			
			if(strcasecmp(uartBuffer, "1")==0) 
     f0e:	71 e0       	ldi	r23, 0x01	; 1
     f10:	80 e5       	ldi	r24, 0x50	; 80
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	4f d0       	rcall	.+158    	; 0xfb4 <strcasecmp>
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	89 2b       	or	r24, r25
     f24:	11 f4       	brne	.+4      	; 0xf2a <main+0xb0>
				testmode();
     f26:	c9 da       	rcall	.-2670   	; 0x4ba <testmode>
     f28:	df cf       	rjmp	.-66     	; 0xee8 <main+0x6e>
			else if (strcasecmp(uartBuffer, "2")==0) 
     f2a:	68 ec       	ldi	r22, 0xC8	; 200
     f2c:	71 e0       	ldi	r23, 0x01	; 1
     f2e:	80 e5       	ldi	r24, 0x50	; 80
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	40 d0       	rcall	.+128    	; 0xfb4 <strcasecmp>
     f34:	89 2b       	or	r24, r25
				automode();
     f36:	11 f4       	brne	.+4      	; 0xf3c <main+0xc2>
     f38:	fa dc       	rcall	.-1548   	; 0x92e <automode>
     f3a:	d6 cf       	rjmp	.-84     	; 0xee8 <main+0x6e>
			else if (strcasecmp(uartBuffer, "3")==0)
     f3c:	6a ec       	ldi	r22, 0xCA	; 202
     f3e:	71 e0       	ldi	r23, 0x01	; 1
     f40:	80 e5       	ldi	r24, 0x50	; 80
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	37 d0       	rcall	.+110    	; 0xfb4 <strcasecmp>
     f46:	89 2b       	or	r24, r25
				manualmode();
     f48:	11 f4       	brne	.+4      	; 0xf4e <main+0xd4>
     f4a:	60 dc       	rcall	.-1856   	; 0x80c <manualmode>
			else if (strcasecmp(uartBuffer, "4")==0)
     f4c:	cd cf       	rjmp	.-102    	; 0xee8 <main+0x6e>
     f4e:	69 e0       	ldi	r22, 0x09	; 9
     f50:	74 e0       	ldi	r23, 0x04	; 4
     f52:	80 e5       	ldi	r24, 0x50	; 80
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	2e d0       	rcall	.+92     	; 0xfb4 <strcasecmp>
     f58:	89 2b       	or	r24, r25
     f5a:	11 f4       	brne	.+4      	; 0xf60 <main+0xe6>
				setHereas00();
     f5c:	df dc       	rcall	.-1602   	; 0x91c <setHereas00>
     f5e:	c4 cf       	rjmp	.-120    	; 0xee8 <main+0x6e>
     f60:	8b e0       	ldi	r24, 0x0B	; 11
			else{
				printf("input '1', '2', '3' or '4'\r\n");
     f62:	94 e0       	ldi	r25, 0x04	; 4
     f64:	52 d0       	rcall	.+164    	; 0x100a <puts>
     f66:	c0 cf       	rjmp	.-128    	; 0xee8 <main+0x6e>

00000f68 <UART1_init>:
﻿#include <avr/io.h>

void UART1_init(void)
{
	UBRR1H = 0x00;			// 9600 보율로 설정
     f68:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;
     f6c:	8f ec       	ldi	r24, 0xCF	; 207
     f6e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= _BV(U2X1);			// 2배속 모드
     f72:	eb e9       	ldi	r30, 0x9B	; 155
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	82 60       	ori	r24, 0x02	; 2
     f7a:	80 83       	st	Z, r24
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR1C |= 0x06;
     f7c:	ed e9       	ldi	r30, 0x9D	; 157
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	86 60       	ori	r24, 0x06	; 6
     f84:	80 83       	st	Z, r24
	
	UCSR1B |= _BV(RXEN1);		// 송수신 가능
     f86:	ea e9       	ldi	r30, 0x9A	; 154
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	80 61       	ori	r24, 0x10	; 16
     f8e:	80 83       	st	Z, r24
	UCSR1B |= _BV(TXEN1);
     f90:	80 81       	ld	r24, Z
     f92:	88 60       	ori	r24, 0x08	; 8
     f94:	80 83       	st	Z, r24
     f96:	08 95       	ret

00000f98 <UART1_transmit>:
}

void UART1_transmit(char data)
{
	while( !(UCSR1A & (1 << UDRE1)) );	// 송신 가능 대기
     f98:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     f9c:	95 ff       	sbrs	r25, 5
     f9e:	fc cf       	rjmp	.-8      	; 0xf98 <UART1_transmit>
	UDR1 = data;				// 데이터 전송
     fa0:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     fa4:	08 95       	ret

00000fa6 <UART1_receive>:
}

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );	// 데이터 수신 대기
     fa6:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     faa:	88 23       	and	r24, r24
     fac:	e4 f7       	brge	.-8      	; 0xfa6 <UART1_receive>
	return UDR1;
     fae:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
     fb2:	08 95       	ret

00000fb4 <strcasecmp>:
     fb4:	fb 01       	movw	r30, r22
     fb6:	dc 01       	movw	r26, r24
     fb8:	8d 91       	ld	r24, X+
     fba:	81 34       	cpi	r24, 0x41	; 65
     fbc:	1c f0       	brlt	.+6      	; 0xfc4 <strcasecmp+0x10>
     fbe:	8b 35       	cpi	r24, 0x5B	; 91
     fc0:	0c f4       	brge	.+2      	; 0xfc4 <strcasecmp+0x10>
     fc2:	80 5e       	subi	r24, 0xE0	; 224
     fc4:	61 91       	ld	r22, Z+
     fc6:	61 34       	cpi	r22, 0x41	; 65
     fc8:	1c f0       	brlt	.+6      	; 0xfd0 <strcasecmp+0x1c>
     fca:	6b 35       	cpi	r22, 0x5B	; 91
     fcc:	0c f4       	brge	.+2      	; 0xfd0 <strcasecmp+0x1c>
     fce:	60 5e       	subi	r22, 0xE0	; 224
     fd0:	86 1b       	sub	r24, r22
     fd2:	61 11       	cpse	r22, r1
     fd4:	89 f3       	breq	.-30     	; 0xfb8 <strcasecmp+0x4>
     fd6:	99 0b       	sbc	r25, r25
     fd8:	08 95       	ret

00000fda <printf>:
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	ae 01       	movw	r20, r28
     fe4:	4b 5f       	subi	r20, 0xFB	; 251
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	fa 01       	movw	r30, r20
     fea:	61 91       	ld	r22, Z+
     fec:	71 91       	ld	r23, Z+
     fee:	af 01       	movw	r20, r30
     ff0:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <__iob+0x2>
     ff4:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <__iob+0x3>
     ff8:	4b d0       	rcall	.+150    	; 0x1090 <vfprintf>
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <putchar>:
    1000:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <__iob+0x2>
    1004:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <__iob+0x3>
    1008:	70 c5       	rjmp	.+2784   	; 0x1aea <fputc>

0000100a <puts>:
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <__iob+0x2>
    1016:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <__iob+0x3>
    101a:	23 81       	ldd	r18, Z+3	; 0x03
    101c:	21 ff       	sbrs	r18, 1
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <puts+0x4c>
    1020:	8c 01       	movw	r16, r24
    1022:	d0 e0       	ldi	r29, 0x00	; 0
    1024:	c0 e0       	ldi	r28, 0x00	; 0
    1026:	f8 01       	movw	r30, r16
    1028:	81 91       	ld	r24, Z+
    102a:	8f 01       	movw	r16, r30
    102c:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <__iob+0x2>
    1030:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <__iob+0x3>
    1034:	db 01       	movw	r26, r22
    1036:	18 96       	adiw	r26, 0x08	; 8
    1038:	ed 91       	ld	r30, X+
    103a:	fc 91       	ld	r31, X
    103c:	19 97       	sbiw	r26, 0x09	; 9
    103e:	88 23       	and	r24, r24
    1040:	31 f0       	breq	.+12     	; 0x104e <puts+0x44>
    1042:	09 95       	icall
    1044:	89 2b       	or	r24, r25
    1046:	79 f3       	breq	.-34     	; 0x1026 <puts+0x1c>
    1048:	df ef       	ldi	r29, 0xFF	; 255
    104a:	cf ef       	ldi	r28, 0xFF	; 255
    104c:	ec cf       	rjmp	.-40     	; 0x1026 <puts+0x1c>
    104e:	8a e0       	ldi	r24, 0x0A	; 10
    1050:	09 95       	icall
    1052:	89 2b       	or	r24, r25
    1054:	19 f0       	breq	.+6      	; 0x105c <puts+0x52>
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	9f ef       	ldi	r25, 0xFF	; 255
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <puts+0x56>
    105c:	8d 2f       	mov	r24, r29
    105e:	9c 2f       	mov	r25, r28
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	08 95       	ret

0000106a <scanf>:
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	ae 01       	movw	r20, r28
    1074:	4b 5f       	subi	r20, 0xFB	; 251
    1076:	5f 4f       	sbci	r21, 0xFF	; 255
    1078:	fa 01       	movw	r30, r20
    107a:	61 91       	ld	r22, Z+
    107c:	71 91       	ld	r23, Z+
    107e:	af 01       	movw	r20, r30
    1080:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <__iob>
    1084:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <__iob+0x1>
    1088:	b2 d3       	rcall	.+1892   	; 0x17ee <vfscanf>
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <vfprintf>:
    1090:	2f 92       	push	r2
    1092:	3f 92       	push	r3
    1094:	4f 92       	push	r4
    1096:	5f 92       	push	r5
    1098:	6f 92       	push	r6
    109a:	7f 92       	push	r7
    109c:	8f 92       	push	r8
    109e:	9f 92       	push	r9
    10a0:	af 92       	push	r10
    10a2:	bf 92       	push	r11
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	2b 97       	sbiw	r28, 0x0b	; 11
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	6c 01       	movw	r12, r24
    10c6:	7b 01       	movw	r14, r22
    10c8:	8a 01       	movw	r16, r20
    10ca:	fc 01       	movw	r30, r24
    10cc:	17 82       	std	Z+7, r1	; 0x07
    10ce:	16 82       	std	Z+6, r1	; 0x06
    10d0:	83 81       	ldd	r24, Z+3	; 0x03
    10d2:	81 ff       	sbrs	r24, 1
    10d4:	bf c1       	rjmp	.+894    	; 0x1454 <__stack+0x355>
    10d6:	ce 01       	movw	r24, r28
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	3c 01       	movw	r6, r24
    10dc:	f6 01       	movw	r30, r12
    10de:	93 81       	ldd	r25, Z+3	; 0x03
    10e0:	f7 01       	movw	r30, r14
    10e2:	93 fd       	sbrc	r25, 3
    10e4:	85 91       	lpm	r24, Z+
    10e6:	93 ff       	sbrs	r25, 3
    10e8:	81 91       	ld	r24, Z+
    10ea:	7f 01       	movw	r14, r30
    10ec:	88 23       	and	r24, r24
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <vfprintf+0x62>
    10f0:	ad c1       	rjmp	.+858    	; 0x144c <__stack+0x34d>
    10f2:	85 32       	cpi	r24, 0x25	; 37
    10f4:	39 f4       	brne	.+14     	; 0x1104 <__stack+0x5>
    10f6:	93 fd       	sbrc	r25, 3
    10f8:	85 91       	lpm	r24, Z+
    10fa:	93 ff       	sbrs	r25, 3
    10fc:	81 91       	ld	r24, Z+
    10fe:	7f 01       	movw	r14, r30
    1100:	85 32       	cpi	r24, 0x25	; 37
    1102:	21 f4       	brne	.+8      	; 0x110c <__stack+0xd>
    1104:	b6 01       	movw	r22, r12
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	f0 d4       	rcall	.+2528   	; 0x1aea <fputc>
    110a:	e8 cf       	rjmp	.-48     	; 0x10dc <vfprintf+0x4c>
    110c:	91 2c       	mov	r9, r1
    110e:	21 2c       	mov	r2, r1
    1110:	31 2c       	mov	r3, r1
    1112:	ff e1       	ldi	r31, 0x1F	; 31
    1114:	f3 15       	cp	r31, r3
    1116:	d8 f0       	brcs	.+54     	; 0x114e <__stack+0x4f>
    1118:	8b 32       	cpi	r24, 0x2B	; 43
    111a:	79 f0       	breq	.+30     	; 0x113a <__stack+0x3b>
    111c:	38 f4       	brcc	.+14     	; 0x112c <__stack+0x2d>
    111e:	80 32       	cpi	r24, 0x20	; 32
    1120:	79 f0       	breq	.+30     	; 0x1140 <__stack+0x41>
    1122:	83 32       	cpi	r24, 0x23	; 35
    1124:	a1 f4       	brne	.+40     	; 0x114e <__stack+0x4f>
    1126:	23 2d       	mov	r18, r3
    1128:	20 61       	ori	r18, 0x10	; 16
    112a:	1d c0       	rjmp	.+58     	; 0x1166 <__stack+0x67>
    112c:	8d 32       	cpi	r24, 0x2D	; 45
    112e:	61 f0       	breq	.+24     	; 0x1148 <__stack+0x49>
    1130:	80 33       	cpi	r24, 0x30	; 48
    1132:	69 f4       	brne	.+26     	; 0x114e <__stack+0x4f>
    1134:	23 2d       	mov	r18, r3
    1136:	21 60       	ori	r18, 0x01	; 1
    1138:	16 c0       	rjmp	.+44     	; 0x1166 <__stack+0x67>
    113a:	83 2d       	mov	r24, r3
    113c:	82 60       	ori	r24, 0x02	; 2
    113e:	38 2e       	mov	r3, r24
    1140:	e3 2d       	mov	r30, r3
    1142:	e4 60       	ori	r30, 0x04	; 4
    1144:	3e 2e       	mov	r3, r30
    1146:	2a c0       	rjmp	.+84     	; 0x119c <__stack+0x9d>
    1148:	f3 2d       	mov	r31, r3
    114a:	f8 60       	ori	r31, 0x08	; 8
    114c:	1d c0       	rjmp	.+58     	; 0x1188 <__stack+0x89>
    114e:	37 fc       	sbrc	r3, 7
    1150:	2d c0       	rjmp	.+90     	; 0x11ac <__stack+0xad>
    1152:	20 ed       	ldi	r18, 0xD0	; 208
    1154:	28 0f       	add	r18, r24
    1156:	2a 30       	cpi	r18, 0x0A	; 10
    1158:	40 f0       	brcs	.+16     	; 0x116a <__stack+0x6b>
    115a:	8e 32       	cpi	r24, 0x2E	; 46
    115c:	b9 f4       	brne	.+46     	; 0x118c <__stack+0x8d>
    115e:	36 fc       	sbrc	r3, 6
    1160:	75 c1       	rjmp	.+746    	; 0x144c <__stack+0x34d>
    1162:	23 2d       	mov	r18, r3
    1164:	20 64       	ori	r18, 0x40	; 64
    1166:	32 2e       	mov	r3, r18
    1168:	19 c0       	rjmp	.+50     	; 0x119c <__stack+0x9d>
    116a:	36 fe       	sbrs	r3, 6
    116c:	06 c0       	rjmp	.+12     	; 0x117a <__stack+0x7b>
    116e:	8a e0       	ldi	r24, 0x0A	; 10
    1170:	98 9e       	mul	r9, r24
    1172:	20 0d       	add	r18, r0
    1174:	11 24       	eor	r1, r1
    1176:	92 2e       	mov	r9, r18
    1178:	11 c0       	rjmp	.+34     	; 0x119c <__stack+0x9d>
    117a:	ea e0       	ldi	r30, 0x0A	; 10
    117c:	2e 9e       	mul	r2, r30
    117e:	20 0d       	add	r18, r0
    1180:	11 24       	eor	r1, r1
    1182:	22 2e       	mov	r2, r18
    1184:	f3 2d       	mov	r31, r3
    1186:	f0 62       	ori	r31, 0x20	; 32
    1188:	3f 2e       	mov	r3, r31
    118a:	08 c0       	rjmp	.+16     	; 0x119c <__stack+0x9d>
    118c:	8c 36       	cpi	r24, 0x6C	; 108
    118e:	21 f4       	brne	.+8      	; 0x1198 <__stack+0x99>
    1190:	83 2d       	mov	r24, r3
    1192:	80 68       	ori	r24, 0x80	; 128
    1194:	38 2e       	mov	r3, r24
    1196:	02 c0       	rjmp	.+4      	; 0x119c <__stack+0x9d>
    1198:	88 36       	cpi	r24, 0x68	; 104
    119a:	41 f4       	brne	.+16     	; 0x11ac <__stack+0xad>
    119c:	f7 01       	movw	r30, r14
    119e:	93 fd       	sbrc	r25, 3
    11a0:	85 91       	lpm	r24, Z+
    11a2:	93 ff       	sbrs	r25, 3
    11a4:	81 91       	ld	r24, Z+
    11a6:	7f 01       	movw	r14, r30
    11a8:	81 11       	cpse	r24, r1
    11aa:	b3 cf       	rjmp	.-154    	; 0x1112 <__stack+0x13>
    11ac:	98 2f       	mov	r25, r24
    11ae:	9f 7d       	andi	r25, 0xDF	; 223
    11b0:	95 54       	subi	r25, 0x45	; 69
    11b2:	93 30       	cpi	r25, 0x03	; 3
    11b4:	28 f4       	brcc	.+10     	; 0x11c0 <__stack+0xc1>
    11b6:	0c 5f       	subi	r16, 0xFC	; 252
    11b8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ba:	9f e3       	ldi	r25, 0x3F	; 63
    11bc:	99 83       	std	Y+1, r25	; 0x01
    11be:	0d c0       	rjmp	.+26     	; 0x11da <__stack+0xdb>
    11c0:	83 36       	cpi	r24, 0x63	; 99
    11c2:	31 f0       	breq	.+12     	; 0x11d0 <__stack+0xd1>
    11c4:	83 37       	cpi	r24, 0x73	; 115
    11c6:	71 f0       	breq	.+28     	; 0x11e4 <__stack+0xe5>
    11c8:	83 35       	cpi	r24, 0x53	; 83
    11ca:	09 f0       	breq	.+2      	; 0x11ce <__stack+0xcf>
    11cc:	55 c0       	rjmp	.+170    	; 0x1278 <__stack+0x179>
    11ce:	20 c0       	rjmp	.+64     	; 0x1210 <__stack+0x111>
    11d0:	f8 01       	movw	r30, r16
    11d2:	80 81       	ld	r24, Z
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	0e 5f       	subi	r16, 0xFE	; 254
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	88 24       	eor	r8, r8
    11dc:	83 94       	inc	r8
    11de:	91 2c       	mov	r9, r1
    11e0:	53 01       	movw	r10, r6
    11e2:	12 c0       	rjmp	.+36     	; 0x1208 <__stack+0x109>
    11e4:	28 01       	movw	r4, r16
    11e6:	f2 e0       	ldi	r31, 0x02	; 2
    11e8:	4f 0e       	add	r4, r31
    11ea:	51 1c       	adc	r5, r1
    11ec:	f8 01       	movw	r30, r16
    11ee:	a0 80       	ld	r10, Z
    11f0:	b1 80       	ldd	r11, Z+1	; 0x01
    11f2:	36 fe       	sbrs	r3, 6
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <__stack+0xfd>
    11f6:	69 2d       	mov	r22, r9
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <__stack+0x101>
    11fc:	6f ef       	ldi	r22, 0xFF	; 255
    11fe:	7f ef       	ldi	r23, 0xFF	; 255
    1200:	c5 01       	movw	r24, r10
    1202:	2a d4       	rcall	.+2132   	; 0x1a58 <strnlen>
    1204:	4c 01       	movw	r8, r24
    1206:	82 01       	movw	r16, r4
    1208:	f3 2d       	mov	r31, r3
    120a:	ff 77       	andi	r31, 0x7F	; 127
    120c:	3f 2e       	mov	r3, r31
    120e:	15 c0       	rjmp	.+42     	; 0x123a <__stack+0x13b>
    1210:	28 01       	movw	r4, r16
    1212:	22 e0       	ldi	r18, 0x02	; 2
    1214:	42 0e       	add	r4, r18
    1216:	51 1c       	adc	r5, r1
    1218:	f8 01       	movw	r30, r16
    121a:	a0 80       	ld	r10, Z
    121c:	b1 80       	ldd	r11, Z+1	; 0x01
    121e:	36 fe       	sbrs	r3, 6
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <__stack+0x129>
    1222:	69 2d       	mov	r22, r9
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <__stack+0x12d>
    1228:	6f ef       	ldi	r22, 0xFF	; 255
    122a:	7f ef       	ldi	r23, 0xFF	; 255
    122c:	c5 01       	movw	r24, r10
    122e:	09 d4       	rcall	.+2066   	; 0x1a42 <strnlen_P>
    1230:	4c 01       	movw	r8, r24
    1232:	f3 2d       	mov	r31, r3
    1234:	f0 68       	ori	r31, 0x80	; 128
    1236:	3f 2e       	mov	r3, r31
    1238:	82 01       	movw	r16, r4
    123a:	33 fc       	sbrc	r3, 3
    123c:	19 c0       	rjmp	.+50     	; 0x1270 <__stack+0x171>
    123e:	82 2d       	mov	r24, r2
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	88 16       	cp	r8, r24
    1244:	99 06       	cpc	r9, r25
    1246:	a0 f4       	brcc	.+40     	; 0x1270 <__stack+0x171>
    1248:	b6 01       	movw	r22, r12
    124a:	80 e2       	ldi	r24, 0x20	; 32
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	4d d4       	rcall	.+2202   	; 0x1aea <fputc>
    1250:	2a 94       	dec	r2
    1252:	f5 cf       	rjmp	.-22     	; 0x123e <__stack+0x13f>
    1254:	f5 01       	movw	r30, r10
    1256:	37 fc       	sbrc	r3, 7
    1258:	85 91       	lpm	r24, Z+
    125a:	37 fe       	sbrs	r3, 7
    125c:	81 91       	ld	r24, Z+
    125e:	5f 01       	movw	r10, r30
    1260:	b6 01       	movw	r22, r12
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	42 d4       	rcall	.+2180   	; 0x1aea <fputc>
    1266:	21 10       	cpse	r2, r1
    1268:	2a 94       	dec	r2
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	82 1a       	sub	r8, r18
    126e:	91 08       	sbc	r9, r1
    1270:	81 14       	cp	r8, r1
    1272:	91 04       	cpc	r9, r1
    1274:	79 f7       	brne	.-34     	; 0x1254 <__stack+0x155>
    1276:	e1 c0       	rjmp	.+450    	; 0x143a <__stack+0x33b>
    1278:	84 36       	cpi	r24, 0x64	; 100
    127a:	11 f0       	breq	.+4      	; 0x1280 <__stack+0x181>
    127c:	89 36       	cpi	r24, 0x69	; 105
    127e:	39 f5       	brne	.+78     	; 0x12ce <__stack+0x1cf>
    1280:	f8 01       	movw	r30, r16
    1282:	37 fe       	sbrs	r3, 7
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <__stack+0x195>
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	0c 5f       	subi	r16, 0xFC	; 252
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <__stack+0x1a5>
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	07 2e       	mov	r0, r23
    129a:	00 0c       	add	r0, r0
    129c:	88 0b       	sbc	r24, r24
    129e:	99 0b       	sbc	r25, r25
    12a0:	0e 5f       	subi	r16, 0xFE	; 254
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	f3 2d       	mov	r31, r3
    12a6:	ff 76       	andi	r31, 0x6F	; 111
    12a8:	3f 2e       	mov	r3, r31
    12aa:	97 ff       	sbrs	r25, 7
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <__stack+0x1c1>
    12ae:	90 95       	com	r25
    12b0:	80 95       	com	r24
    12b2:	70 95       	com	r23
    12b4:	61 95       	neg	r22
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	f0 68       	ori	r31, 0x80	; 128
    12be:	3f 2e       	mov	r3, r31
    12c0:	2a e0       	ldi	r18, 0x0A	; 10
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	a3 01       	movw	r20, r6
    12c6:	66 d4       	rcall	.+2252   	; 0x1b94 <__ultoa_invert>
    12c8:	88 2e       	mov	r8, r24
    12ca:	86 18       	sub	r8, r6
    12cc:	44 c0       	rjmp	.+136    	; 0x1356 <__stack+0x257>
    12ce:	85 37       	cpi	r24, 0x75	; 117
    12d0:	31 f4       	brne	.+12     	; 0x12de <__stack+0x1df>
    12d2:	23 2d       	mov	r18, r3
    12d4:	2f 7e       	andi	r18, 0xEF	; 239
    12d6:	b2 2e       	mov	r11, r18
    12d8:	2a e0       	ldi	r18, 0x0A	; 10
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	25 c0       	rjmp	.+74     	; 0x1328 <__stack+0x229>
    12de:	93 2d       	mov	r25, r3
    12e0:	99 7f       	andi	r25, 0xF9	; 249
    12e2:	b9 2e       	mov	r11, r25
    12e4:	8f 36       	cpi	r24, 0x6F	; 111
    12e6:	c1 f0       	breq	.+48     	; 0x1318 <__stack+0x219>
    12e8:	18 f4       	brcc	.+6      	; 0x12f0 <__stack+0x1f1>
    12ea:	88 35       	cpi	r24, 0x58	; 88
    12ec:	79 f0       	breq	.+30     	; 0x130c <__stack+0x20d>
    12ee:	ae c0       	rjmp	.+348    	; 0x144c <__stack+0x34d>
    12f0:	80 37       	cpi	r24, 0x70	; 112
    12f2:	19 f0       	breq	.+6      	; 0x12fa <__stack+0x1fb>
    12f4:	88 37       	cpi	r24, 0x78	; 120
    12f6:	21 f0       	breq	.+8      	; 0x1300 <__stack+0x201>
    12f8:	a9 c0       	rjmp	.+338    	; 0x144c <__stack+0x34d>
    12fa:	e9 2f       	mov	r30, r25
    12fc:	e0 61       	ori	r30, 0x10	; 16
    12fe:	be 2e       	mov	r11, r30
    1300:	b4 fe       	sbrs	r11, 4
    1302:	0d c0       	rjmp	.+26     	; 0x131e <__stack+0x21f>
    1304:	fb 2d       	mov	r31, r11
    1306:	f4 60       	ori	r31, 0x04	; 4
    1308:	bf 2e       	mov	r11, r31
    130a:	09 c0       	rjmp	.+18     	; 0x131e <__stack+0x21f>
    130c:	34 fe       	sbrs	r3, 4
    130e:	0a c0       	rjmp	.+20     	; 0x1324 <__stack+0x225>
    1310:	29 2f       	mov	r18, r25
    1312:	26 60       	ori	r18, 0x06	; 6
    1314:	b2 2e       	mov	r11, r18
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <__stack+0x225>
    1318:	28 e0       	ldi	r18, 0x08	; 8
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <__stack+0x229>
    131e:	20 e1       	ldi	r18, 0x10	; 16
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <__stack+0x229>
    1324:	20 e1       	ldi	r18, 0x10	; 16
    1326:	32 e0       	ldi	r19, 0x02	; 2
    1328:	f8 01       	movw	r30, r16
    132a:	b7 fe       	sbrs	r11, 7
    132c:	07 c0       	rjmp	.+14     	; 0x133c <__stack+0x23d>
    132e:	60 81       	ld	r22, Z
    1330:	71 81       	ldd	r23, Z+1	; 0x01
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	93 81       	ldd	r25, Z+3	; 0x03
    1336:	0c 5f       	subi	r16, 0xFC	; 252
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <__stack+0x249>
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 5f       	subi	r16, 0xFE	; 254
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	a3 01       	movw	r20, r6
    134a:	24 d4       	rcall	.+2120   	; 0x1b94 <__ultoa_invert>
    134c:	88 2e       	mov	r8, r24
    134e:	86 18       	sub	r8, r6
    1350:	fb 2d       	mov	r31, r11
    1352:	ff 77       	andi	r31, 0x7F	; 127
    1354:	3f 2e       	mov	r3, r31
    1356:	36 fe       	sbrs	r3, 6
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <__stack+0x275>
    135a:	23 2d       	mov	r18, r3
    135c:	2e 7f       	andi	r18, 0xFE	; 254
    135e:	a2 2e       	mov	r10, r18
    1360:	89 14       	cp	r8, r9
    1362:	58 f4       	brcc	.+22     	; 0x137a <__stack+0x27b>
    1364:	34 fe       	sbrs	r3, 4
    1366:	0b c0       	rjmp	.+22     	; 0x137e <__stack+0x27f>
    1368:	32 fc       	sbrc	r3, 2
    136a:	09 c0       	rjmp	.+18     	; 0x137e <__stack+0x27f>
    136c:	83 2d       	mov	r24, r3
    136e:	8e 7e       	andi	r24, 0xEE	; 238
    1370:	a8 2e       	mov	r10, r24
    1372:	05 c0       	rjmp	.+10     	; 0x137e <__stack+0x27f>
    1374:	b8 2c       	mov	r11, r8
    1376:	a3 2c       	mov	r10, r3
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <__stack+0x281>
    137a:	b8 2c       	mov	r11, r8
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <__stack+0x281>
    137e:	b9 2c       	mov	r11, r9
    1380:	a4 fe       	sbrs	r10, 4
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <__stack+0x2a3>
    1384:	fe 01       	movw	r30, r28
    1386:	e8 0d       	add	r30, r8
    1388:	f1 1d       	adc	r31, r1
    138a:	80 81       	ld	r24, Z
    138c:	80 33       	cpi	r24, 0x30	; 48
    138e:	21 f4       	brne	.+8      	; 0x1398 <__stack+0x299>
    1390:	9a 2d       	mov	r25, r10
    1392:	99 7e       	andi	r25, 0xE9	; 233
    1394:	a9 2e       	mov	r10, r25
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <__stack+0x2ab>
    1398:	a2 fe       	sbrs	r10, 2
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <__stack+0x2a9>
    139c:	b3 94       	inc	r11
    139e:	b3 94       	inc	r11
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <__stack+0x2ab>
    13a2:	8a 2d       	mov	r24, r10
    13a4:	86 78       	andi	r24, 0x86	; 134
    13a6:	09 f0       	breq	.+2      	; 0x13aa <__stack+0x2ab>
    13a8:	b3 94       	inc	r11
    13aa:	a3 fc       	sbrc	r10, 3
    13ac:	10 c0       	rjmp	.+32     	; 0x13ce <__stack+0x2cf>
    13ae:	a0 fe       	sbrs	r10, 0
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <__stack+0x2bf>
    13b2:	b2 14       	cp	r11, r2
    13b4:	80 f4       	brcc	.+32     	; 0x13d6 <__stack+0x2d7>
    13b6:	28 0c       	add	r2, r8
    13b8:	92 2c       	mov	r9, r2
    13ba:	9b 18       	sub	r9, r11
    13bc:	0d c0       	rjmp	.+26     	; 0x13d8 <__stack+0x2d9>
    13be:	b2 14       	cp	r11, r2
    13c0:	58 f4       	brcc	.+22     	; 0x13d8 <__stack+0x2d9>
    13c2:	b6 01       	movw	r22, r12
    13c4:	80 e2       	ldi	r24, 0x20	; 32
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	90 d3       	rcall	.+1824   	; 0x1aea <fputc>
    13ca:	b3 94       	inc	r11
    13cc:	f8 cf       	rjmp	.-16     	; 0x13be <__stack+0x2bf>
    13ce:	b2 14       	cp	r11, r2
    13d0:	18 f4       	brcc	.+6      	; 0x13d8 <__stack+0x2d9>
    13d2:	2b 18       	sub	r2, r11
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <__stack+0x2db>
    13d6:	98 2c       	mov	r9, r8
    13d8:	21 2c       	mov	r2, r1
    13da:	a4 fe       	sbrs	r10, 4
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <__stack+0x2fd>
    13de:	b6 01       	movw	r22, r12
    13e0:	80 e3       	ldi	r24, 0x30	; 48
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	82 d3       	rcall	.+1796   	; 0x1aea <fputc>
    13e6:	a2 fe       	sbrs	r10, 2
    13e8:	16 c0       	rjmp	.+44     	; 0x1416 <__stack+0x317>
    13ea:	a1 fc       	sbrc	r10, 1
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <__stack+0x2f5>
    13ee:	88 e7       	ldi	r24, 0x78	; 120
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <__stack+0x2f9>
    13f4:	88 e5       	ldi	r24, 0x58	; 88
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	b6 01       	movw	r22, r12
    13fa:	0c c0       	rjmp	.+24     	; 0x1414 <__stack+0x315>
    13fc:	8a 2d       	mov	r24, r10
    13fe:	86 78       	andi	r24, 0x86	; 134
    1400:	51 f0       	breq	.+20     	; 0x1416 <__stack+0x317>
    1402:	a1 fe       	sbrs	r10, 1
    1404:	02 c0       	rjmp	.+4      	; 0x140a <__stack+0x30b>
    1406:	8b e2       	ldi	r24, 0x2B	; 43
    1408:	01 c0       	rjmp	.+2      	; 0x140c <__stack+0x30d>
    140a:	80 e2       	ldi	r24, 0x20	; 32
    140c:	a7 fc       	sbrc	r10, 7
    140e:	8d e2       	ldi	r24, 0x2D	; 45
    1410:	b6 01       	movw	r22, r12
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	6a d3       	rcall	.+1748   	; 0x1aea <fputc>
    1416:	89 14       	cp	r8, r9
    1418:	30 f4       	brcc	.+12     	; 0x1426 <__stack+0x327>
    141a:	b6 01       	movw	r22, r12
    141c:	80 e3       	ldi	r24, 0x30	; 48
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	64 d3       	rcall	.+1736   	; 0x1aea <fputc>
    1422:	9a 94       	dec	r9
    1424:	f8 cf       	rjmp	.-16     	; 0x1416 <__stack+0x317>
    1426:	8a 94       	dec	r8
    1428:	f3 01       	movw	r30, r6
    142a:	e8 0d       	add	r30, r8
    142c:	f1 1d       	adc	r31, r1
    142e:	80 81       	ld	r24, Z
    1430:	b6 01       	movw	r22, r12
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	5a d3       	rcall	.+1716   	; 0x1aea <fputc>
    1436:	81 10       	cpse	r8, r1
    1438:	f6 cf       	rjmp	.-20     	; 0x1426 <__stack+0x327>
    143a:	22 20       	and	r2, r2
    143c:	09 f4       	brne	.+2      	; 0x1440 <__stack+0x341>
    143e:	4e ce       	rjmp	.-868    	; 0x10dc <vfprintf+0x4c>
    1440:	b6 01       	movw	r22, r12
    1442:	80 e2       	ldi	r24, 0x20	; 32
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	51 d3       	rcall	.+1698   	; 0x1aea <fputc>
    1448:	2a 94       	dec	r2
    144a:	f7 cf       	rjmp	.-18     	; 0x143a <__stack+0x33b>
    144c:	f6 01       	movw	r30, r12
    144e:	86 81       	ldd	r24, Z+6	; 0x06
    1450:	97 81       	ldd	r25, Z+7	; 0x07
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <__stack+0x359>
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	9f ef       	ldi	r25, 0xFF	; 255
    1458:	2b 96       	adiw	r28, 0x0b	; 11
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	cf 90       	pop	r12
    1474:	bf 90       	pop	r11
    1476:	af 90       	pop	r10
    1478:	9f 90       	pop	r9
    147a:	8f 90       	pop	r8
    147c:	7f 90       	pop	r7
    147e:	6f 90       	pop	r6
    1480:	5f 90       	pop	r5
    1482:	4f 90       	pop	r4
    1484:	3f 90       	pop	r3
    1486:	2f 90       	pop	r2
    1488:	08 95       	ret

0000148a <putval>:
    148a:	20 fd       	sbrc	r18, 0
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <putval+0x16>
    148e:	fc 01       	movw	r30, r24
    1490:	23 fd       	sbrc	r18, 3
    1492:	05 c0       	rjmp	.+10     	; 0x149e <putval+0x14>
    1494:	22 ff       	sbrs	r18, 2
    1496:	02 c0       	rjmp	.+4      	; 0x149c <putval+0x12>
    1498:	73 83       	std	Z+3, r23	; 0x03
    149a:	62 83       	std	Z+2, r22	; 0x02
    149c:	51 83       	std	Z+1, r21	; 0x01
    149e:	40 83       	st	Z, r20
    14a0:	08 95       	ret

000014a2 <mulacc>:
    14a2:	44 fd       	sbrc	r20, 4
    14a4:	17 c0       	rjmp	.+46     	; 0x14d4 <mulacc+0x32>
    14a6:	46 fd       	sbrc	r20, 6
    14a8:	17 c0       	rjmp	.+46     	; 0x14d8 <mulacc+0x36>
    14aa:	ab 01       	movw	r20, r22
    14ac:	bc 01       	movw	r22, r24
    14ae:	da 01       	movw	r26, r20
    14b0:	fb 01       	movw	r30, r22
    14b2:	aa 0f       	add	r26, r26
    14b4:	bb 1f       	adc	r27, r27
    14b6:	ee 1f       	adc	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	10 94       	com	r1
    14bc:	d1 f7       	brne	.-12     	; 0x14b2 <mulacc+0x10>
    14be:	4a 0f       	add	r20, r26
    14c0:	5b 1f       	adc	r21, r27
    14c2:	6e 1f       	adc	r22, r30
    14c4:	7f 1f       	adc	r23, r31
    14c6:	cb 01       	movw	r24, r22
    14c8:	ba 01       	movw	r22, r20
    14ca:	66 0f       	add	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <mulacc+0x44>
    14d4:	33 e0       	ldi	r19, 0x03	; 3
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <mulacc+0x38>
    14d8:	34 e0       	ldi	r19, 0x04	; 4
    14da:	66 0f       	add	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	31 50       	subi	r19, 0x01	; 1
    14e4:	d1 f7       	brne	.-12     	; 0x14da <mulacc+0x38>
    14e6:	62 0f       	add	r22, r18
    14e8:	71 1d       	adc	r23, r1
    14ea:	81 1d       	adc	r24, r1
    14ec:	91 1d       	adc	r25, r1
    14ee:	08 95       	ret

000014f0 <skip_spaces>:
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	8c 01       	movw	r16, r24
    14fa:	c8 01       	movw	r24, r16
    14fc:	b8 d2       	rcall	.+1392   	; 0x1a6e <fgetc>
    14fe:	ec 01       	movw	r28, r24
    1500:	97 fd       	sbrc	r25, 7
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <skip_spaces+0x20>
    1504:	8b d2       	rcall	.+1302   	; 0x1a1c <isspace>
    1506:	89 2b       	or	r24, r25
    1508:	c1 f7       	brne	.-16     	; 0x14fa <skip_spaces+0xa>
    150a:	b8 01       	movw	r22, r16
    150c:	ce 01       	movw	r24, r28
    150e:	29 d3       	rcall	.+1618   	; 0x1b62 <ungetc>
    1510:	ce 01       	movw	r24, r28
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <conv_int>:
    151c:	8f 92       	push	r8
    151e:	9f 92       	push	r9
    1520:	af 92       	push	r10
    1522:	bf 92       	push	r11
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	8c 01       	movw	r16, r24
    1532:	d6 2f       	mov	r29, r22
    1534:	7a 01       	movw	r14, r20
    1536:	b2 2e       	mov	r11, r18
    1538:	9a d2       	rcall	.+1332   	; 0x1a6e <fgetc>
    153a:	9c 01       	movw	r18, r24
    153c:	33 27       	eor	r19, r19
    153e:	2b 32       	cpi	r18, 0x2B	; 43
    1540:	31 05       	cpc	r19, r1
    1542:	31 f0       	breq	.+12     	; 0x1550 <conv_int+0x34>
    1544:	2d 32       	cpi	r18, 0x2D	; 45
    1546:	31 05       	cpc	r19, r1
    1548:	59 f4       	brne	.+22     	; 0x1560 <conv_int+0x44>
    154a:	8b 2d       	mov	r24, r11
    154c:	80 68       	ori	r24, 0x80	; 128
    154e:	b8 2e       	mov	r11, r24
    1550:	d1 50       	subi	r29, 0x01	; 1
    1552:	11 f4       	brne	.+4      	; 0x1558 <conv_int+0x3c>
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	61 c0       	rjmp	.+194    	; 0x161a <conv_int+0xfe>
    1558:	c8 01       	movw	r24, r16
    155a:	89 d2       	rcall	.+1298   	; 0x1a6e <fgetc>
    155c:	97 fd       	sbrc	r25, 7
    155e:	fa cf       	rjmp	.-12     	; 0x1554 <conv_int+0x38>
    1560:	cb 2d       	mov	r28, r11
    1562:	cd 7f       	andi	r28, 0xFD	; 253
    1564:	2b 2d       	mov	r18, r11
    1566:	20 73       	andi	r18, 0x30	; 48
    1568:	f9 f4       	brne	.+62     	; 0x15a8 <conv_int+0x8c>
    156a:	80 33       	cpi	r24, 0x30	; 48
    156c:	e9 f4       	brne	.+58     	; 0x15a8 <conv_int+0x8c>
    156e:	aa 24       	eor	r10, r10
    1570:	aa 94       	dec	r10
    1572:	ad 0e       	add	r10, r29
    1574:	09 f4       	brne	.+2      	; 0x1578 <conv_int+0x5c>
    1576:	3e c0       	rjmp	.+124    	; 0x15f4 <conv_int+0xd8>
    1578:	c8 01       	movw	r24, r16
    157a:	79 d2       	rcall	.+1266   	; 0x1a6e <fgetc>
    157c:	97 fd       	sbrc	r25, 7
    157e:	3a c0       	rjmp	.+116    	; 0x15f4 <conv_int+0xd8>
    1580:	9c 01       	movw	r18, r24
    1582:	2f 7d       	andi	r18, 0xDF	; 223
    1584:	33 27       	eor	r19, r19
    1586:	28 35       	cpi	r18, 0x58	; 88
    1588:	31 05       	cpc	r19, r1
    158a:	41 f4       	brne	.+16     	; 0x159c <conv_int+0x80>
    158c:	c2 64       	ori	r28, 0x42	; 66
    158e:	d2 50       	subi	r29, 0x02	; 2
    1590:	89 f1       	breq	.+98     	; 0x15f4 <conv_int+0xd8>
    1592:	c8 01       	movw	r24, r16
    1594:	6c d2       	rcall	.+1240   	; 0x1a6e <fgetc>
    1596:	97 ff       	sbrs	r25, 7
    1598:	07 c0       	rjmp	.+14     	; 0x15a8 <conv_int+0x8c>
    159a:	2c c0       	rjmp	.+88     	; 0x15f4 <conv_int+0xd8>
    159c:	b6 fe       	sbrs	r11, 6
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <conv_int+0x88>
    15a0:	c2 60       	ori	r28, 0x02	; 2
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <conv_int+0x8a>
    15a4:	c2 61       	ori	r28, 0x12	; 18
    15a6:	da 2d       	mov	r29, r10
    15a8:	81 2c       	mov	r8, r1
    15aa:	91 2c       	mov	r9, r1
    15ac:	54 01       	movw	r10, r8
    15ae:	20 ed       	ldi	r18, 0xD0	; 208
    15b0:	28 0f       	add	r18, r24
    15b2:	28 30       	cpi	r18, 0x08	; 8
    15b4:	78 f0       	brcs	.+30     	; 0x15d4 <conv_int+0xb8>
    15b6:	c4 ff       	sbrs	r28, 4
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <conv_int+0xa4>
    15ba:	b8 01       	movw	r22, r16
    15bc:	d2 d2       	rcall	.+1444   	; 0x1b62 <ungetc>
    15be:	17 c0       	rjmp	.+46     	; 0x15ee <conv_int+0xd2>
    15c0:	2a 30       	cpi	r18, 0x0A	; 10
    15c2:	40 f0       	brcs	.+16     	; 0x15d4 <conv_int+0xb8>
    15c4:	c6 ff       	sbrs	r28, 6
    15c6:	f9 cf       	rjmp	.-14     	; 0x15ba <conv_int+0x9e>
    15c8:	2f 7d       	andi	r18, 0xDF	; 223
    15ca:	3f ee       	ldi	r19, 0xEF	; 239
    15cc:	32 0f       	add	r19, r18
    15ce:	36 30       	cpi	r19, 0x06	; 6
    15d0:	a0 f7       	brcc	.-24     	; 0x15ba <conv_int+0x9e>
    15d2:	27 50       	subi	r18, 0x07	; 7
    15d4:	4c 2f       	mov	r20, r28
    15d6:	c5 01       	movw	r24, r10
    15d8:	b4 01       	movw	r22, r8
    15da:	63 df       	rcall	.-314    	; 0x14a2 <mulacc>
    15dc:	4b 01       	movw	r8, r22
    15de:	5c 01       	movw	r10, r24
    15e0:	c2 60       	ori	r28, 0x02	; 2
    15e2:	d1 50       	subi	r29, 0x01	; 1
    15e4:	51 f0       	breq	.+20     	; 0x15fa <conv_int+0xde>
    15e6:	c8 01       	movw	r24, r16
    15e8:	42 d2       	rcall	.+1156   	; 0x1a6e <fgetc>
    15ea:	97 ff       	sbrs	r25, 7
    15ec:	e0 cf       	rjmp	.-64     	; 0x15ae <conv_int+0x92>
    15ee:	c1 fd       	sbrc	r28, 1
    15f0:	04 c0       	rjmp	.+8      	; 0x15fa <conv_int+0xde>
    15f2:	b0 cf       	rjmp	.-160    	; 0x1554 <conv_int+0x38>
    15f4:	81 2c       	mov	r8, r1
    15f6:	91 2c       	mov	r9, r1
    15f8:	54 01       	movw	r10, r8
    15fa:	c7 ff       	sbrs	r28, 7
    15fc:	08 c0       	rjmp	.+16     	; 0x160e <conv_int+0xf2>
    15fe:	b0 94       	com	r11
    1600:	a0 94       	com	r10
    1602:	90 94       	com	r9
    1604:	80 94       	com	r8
    1606:	81 1c       	adc	r8, r1
    1608:	91 1c       	adc	r9, r1
    160a:	a1 1c       	adc	r10, r1
    160c:	b1 1c       	adc	r11, r1
    160e:	2c 2f       	mov	r18, r28
    1610:	b5 01       	movw	r22, r10
    1612:	a4 01       	movw	r20, r8
    1614:	c7 01       	movw	r24, r14
    1616:	39 df       	rcall	.-398    	; 0x148a <putval>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	bf 90       	pop	r11
    1628:	af 90       	pop	r10
    162a:	9f 90       	pop	r9
    162c:	8f 90       	pop	r8
    162e:	08 95       	ret

00001630 <conv_brk>:
    1630:	5f 92       	push	r5
    1632:	6f 92       	push	r6
    1634:	7f 92       	push	r7
    1636:	8f 92       	push	r8
    1638:	9f 92       	push	r9
    163a:	af 92       	push	r10
    163c:	bf 92       	push	r11
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	a0 97       	sbiw	r28, 0x20	; 32
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	5c 01       	movw	r10, r24
    1660:	96 2e       	mov	r9, r22
    1662:	7a 01       	movw	r14, r20
    1664:	f9 01       	movw	r30, r18
    1666:	8e 01       	movw	r16, r28
    1668:	0f 5f       	subi	r16, 0xFF	; 255
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	68 01       	movw	r12, r16
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	d8 01       	movw	r26, r16
    1672:	1d 92       	st	X+, r1
    1674:	8a 95       	dec	r24
    1676:	e9 f7       	brne	.-6      	; 0x1672 <conv_brk+0x42>
    1678:	d5 01       	movw	r26, r10
    167a:	13 96       	adiw	r26, 0x03	; 3
    167c:	8c 90       	ld	r8, X
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	61 2c       	mov	r6, r1
    1684:	71 2c       	mov	r7, r1
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	83 fc       	sbrc	r8, 3
    168e:	25 91       	lpm	r18, Z+
    1690:	83 fe       	sbrs	r8, 3
    1692:	21 91       	ld	r18, Z+
    1694:	8f 01       	movw	r16, r30
    1696:	52 2e       	mov	r5, r18
    1698:	21 11       	cpse	r18, r1
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <conv_brk+0x72>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	90 c0       	rjmp	.+288    	; 0x17c2 <conv_brk+0x192>
    16a2:	2e 35       	cpi	r18, 0x5E	; 94
    16a4:	11 f4       	brne	.+4      	; 0x16aa <conv_brk+0x7a>
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	51 f1       	breq	.+84     	; 0x16fe <conv_brk+0xce>
    16aa:	43 2f       	mov	r20, r19
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	48 17       	cp	r20, r24
    16b0:	59 07       	cpc	r21, r25
    16b2:	3c f4       	brge	.+14     	; 0x16c2 <conv_brk+0x92>
    16b4:	2d 35       	cpi	r18, 0x5D	; 93
    16b6:	59 f1       	breq	.+86     	; 0x170e <conv_brk+0xde>
    16b8:	2d 32       	cpi	r18, 0x2D	; 45
    16ba:	19 f4       	brne	.+6      	; 0x16c2 <conv_brk+0x92>
    16bc:	77 20       	and	r7, r7
    16be:	09 f1       	breq	.+66     	; 0x1702 <conv_brk+0xd2>
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <conv_brk+0x98>
    16c2:	77 20       	and	r7, r7
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <conv_brk+0x98>
    16c6:	68 c0       	rjmp	.+208    	; 0x1798 <conv_brk+0x168>
    16c8:	45 2d       	mov	r20, r5
    16ca:	46 95       	lsr	r20
    16cc:	46 95       	lsr	r20
    16ce:	46 95       	lsr	r20
    16d0:	d6 01       	movw	r26, r12
    16d2:	a4 0f       	add	r26, r20
    16d4:	b1 1d       	adc	r27, r1
    16d6:	45 2d       	mov	r20, r5
    16d8:	47 70       	andi	r20, 0x07	; 7
    16da:	8b 01       	movw	r16, r22
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <conv_brk+0xb2>
    16de:	00 0f       	add	r16, r16
    16e0:	11 1f       	adc	r17, r17
    16e2:	4a 95       	dec	r20
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <conv_brk+0xae>
    16e6:	a8 01       	movw	r20, r16
    16e8:	5c 91       	ld	r21, X
    16ea:	45 2b       	or	r20, r21
    16ec:	4c 93       	st	X, r20
    16ee:	65 14       	cp	r6, r5
    16f0:	59 f0       	breq	.+22     	; 0x1708 <conv_brk+0xd8>
    16f2:	56 14       	cp	r5, r6
    16f4:	10 f4       	brcc	.+4      	; 0x16fa <conv_brk+0xca>
    16f6:	53 94       	inc	r5
    16f8:	e7 cf       	rjmp	.-50     	; 0x16c8 <conv_brk+0x98>
    16fa:	5a 94       	dec	r5
    16fc:	e5 cf       	rjmp	.-54     	; 0x16c8 <conv_brk+0x98>
    16fe:	31 e0       	ldi	r19, 0x01	; 1
    1700:	04 c0       	rjmp	.+8      	; 0x170a <conv_brk+0xda>
    1702:	77 24       	eor	r7, r7
    1704:	73 94       	inc	r7
    1706:	01 c0       	rjmp	.+2      	; 0x170a <conv_brk+0xda>
    1708:	71 2c       	mov	r7, r1
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	bf cf       	rjmp	.-130    	; 0x168c <conv_brk+0x5c>
    170e:	77 20       	and	r7, r7
    1710:	19 f0       	breq	.+6      	; 0x1718 <conv_brk+0xe8>
    1712:	8e 81       	ldd	r24, Y+6	; 0x06
    1714:	80 62       	ori	r24, 0x20	; 32
    1716:	8e 83       	std	Y+6, r24	; 0x06
    1718:	31 11       	cpse	r19, r1
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <conv_brk+0xf2>
    171c:	88 24       	eor	r8, r8
    171e:	83 94       	inc	r8
    1720:	17 c0       	rjmp	.+46     	; 0x1750 <conv_brk+0x120>
    1722:	f6 01       	movw	r30, r12
    1724:	9e 01       	movw	r18, r28
    1726:	2f 5d       	subi	r18, 0xDF	; 223
    1728:	3f 4f       	sbci	r19, 0xFF	; 255
    172a:	80 81       	ld	r24, Z
    172c:	80 95       	com	r24
    172e:	81 93       	st	Z+, r24
    1730:	2e 17       	cp	r18, r30
    1732:	3f 07       	cpc	r19, r31
    1734:	d1 f7       	brne	.-12     	; 0x172a <conv_brk+0xfa>
    1736:	f2 cf       	rjmp	.-28     	; 0x171c <conv_brk+0xec>
    1738:	e1 14       	cp	r14, r1
    173a:	f1 04       	cpc	r15, r1
    173c:	29 f0       	breq	.+10     	; 0x1748 <conv_brk+0x118>
    173e:	d7 01       	movw	r26, r14
    1740:	8c 93       	st	X, r24
    1742:	f7 01       	movw	r30, r14
    1744:	31 96       	adiw	r30, 0x01	; 1
    1746:	7f 01       	movw	r14, r30
    1748:	9a 94       	dec	r9
    174a:	81 2c       	mov	r8, r1
    174c:	99 20       	and	r9, r9
    174e:	e9 f0       	breq	.+58     	; 0x178a <conv_brk+0x15a>
    1750:	c5 01       	movw	r24, r10
    1752:	8d d1       	rcall	.+794    	; 0x1a6e <fgetc>
    1754:	97 fd       	sbrc	r25, 7
    1756:	17 c0       	rjmp	.+46     	; 0x1786 <conv_brk+0x156>
    1758:	fc 01       	movw	r30, r24
    175a:	ff 27       	eor	r31, r31
    175c:	23 e0       	ldi	r18, 0x03	; 3
    175e:	f5 95       	asr	r31
    1760:	e7 95       	ror	r30
    1762:	2a 95       	dec	r18
    1764:	e1 f7       	brne	.-8      	; 0x175e <conv_brk+0x12e>
    1766:	ec 0d       	add	r30, r12
    1768:	fd 1d       	adc	r31, r13
    176a:	20 81       	ld	r18, Z
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	ac 01       	movw	r20, r24
    1770:	47 70       	andi	r20, 0x07	; 7
    1772:	55 27       	eor	r21, r21
    1774:	02 c0       	rjmp	.+4      	; 0x177a <conv_brk+0x14a>
    1776:	35 95       	asr	r19
    1778:	27 95       	ror	r18
    177a:	4a 95       	dec	r20
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <conv_brk+0x146>
    177e:	20 fd       	sbrc	r18, 0
    1780:	db cf       	rjmp	.-74     	; 0x1738 <conv_brk+0x108>
    1782:	b5 01       	movw	r22, r10
    1784:	ee d1       	rcall	.+988    	; 0x1b62 <ungetc>
    1786:	81 10       	cpse	r8, r1
    1788:	89 cf       	rjmp	.-238    	; 0x169c <conv_brk+0x6c>
    178a:	e1 14       	cp	r14, r1
    178c:	f1 04       	cpc	r15, r1
    178e:	11 f0       	breq	.+4      	; 0x1794 <conv_brk+0x164>
    1790:	d7 01       	movw	r26, r14
    1792:	1c 92       	st	X, r1
    1794:	c8 01       	movw	r24, r16
    1796:	15 c0       	rjmp	.+42     	; 0x17c2 <conv_brk+0x192>
    1798:	42 2f       	mov	r20, r18
    179a:	46 95       	lsr	r20
    179c:	46 95       	lsr	r20
    179e:	46 95       	lsr	r20
    17a0:	d6 01       	movw	r26, r12
    17a2:	a4 0f       	add	r26, r20
    17a4:	b1 1d       	adc	r27, r1
    17a6:	42 2f       	mov	r20, r18
    17a8:	47 70       	andi	r20, 0x07	; 7
    17aa:	8b 01       	movw	r16, r22
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <conv_brk+0x182>
    17ae:	00 0f       	add	r16, r16
    17b0:	11 1f       	adc	r17, r17
    17b2:	4a 95       	dec	r20
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <conv_brk+0x17e>
    17b6:	a8 01       	movw	r20, r16
    17b8:	5c 91       	ld	r21, X
    17ba:	45 2b       	or	r20, r21
    17bc:	4c 93       	st	X, r20
    17be:	62 2e       	mov	r6, r18
    17c0:	a4 cf       	rjmp	.-184    	; 0x170a <conv_brk+0xda>
    17c2:	a0 96       	adiw	r28, 0x20	; 32
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	bf 90       	pop	r11
    17e0:	af 90       	pop	r10
    17e2:	9f 90       	pop	r9
    17e4:	8f 90       	pop	r8
    17e6:	7f 90       	pop	r7
    17e8:	6f 90       	pop	r6
    17ea:	5f 90       	pop	r5
    17ec:	08 95       	ret

000017ee <vfscanf>:
    17ee:	5f 92       	push	r5
    17f0:	6f 92       	push	r6
    17f2:	7f 92       	push	r7
    17f4:	8f 92       	push	r8
    17f6:	9f 92       	push	r9
    17f8:	af 92       	push	r10
    17fa:	bf 92       	push	r11
    17fc:	cf 92       	push	r12
    17fe:	df 92       	push	r13
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	6c 01       	movw	r12, r24
    180e:	eb 01       	movw	r28, r22
    1810:	5a 01       	movw	r10, r20
    1812:	fc 01       	movw	r30, r24
    1814:	17 82       	std	Z+7, r1	; 0x07
    1816:	16 82       	std	Z+6, r1	; 0x06
    1818:	51 2c       	mov	r5, r1
    181a:	f6 01       	movw	r30, r12
    181c:	e3 80       	ldd	r14, Z+3	; 0x03
    181e:	fe 01       	movw	r30, r28
    1820:	e3 fc       	sbrc	r14, 3
    1822:	85 91       	lpm	r24, Z+
    1824:	e3 fe       	sbrs	r14, 3
    1826:	81 91       	ld	r24, Z+
    1828:	18 2f       	mov	r17, r24
    182a:	ef 01       	movw	r28, r30
    182c:	88 23       	and	r24, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <vfscanf+0x44>
    1830:	e0 c0       	rjmp	.+448    	; 0x19f2 <vfscanf+0x204>
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	f3 d0       	rcall	.+486    	; 0x1a1c <isspace>
    1836:	89 2b       	or	r24, r25
    1838:	19 f0       	breq	.+6      	; 0x1840 <vfscanf+0x52>
    183a:	c6 01       	movw	r24, r12
    183c:	59 de       	rcall	.-846    	; 0x14f0 <skip_spaces>
    183e:	ed cf       	rjmp	.-38     	; 0x181a <vfscanf+0x2c>
    1840:	15 32       	cpi	r17, 0x25	; 37
    1842:	41 f4       	brne	.+16     	; 0x1854 <vfscanf+0x66>
    1844:	fe 01       	movw	r30, r28
    1846:	e3 fc       	sbrc	r14, 3
    1848:	15 91       	lpm	r17, Z+
    184a:	e3 fe       	sbrs	r14, 3
    184c:	11 91       	ld	r17, Z+
    184e:	ef 01       	movw	r28, r30
    1850:	15 32       	cpi	r17, 0x25	; 37
    1852:	71 f4       	brne	.+28     	; 0x1870 <vfscanf+0x82>
    1854:	c6 01       	movw	r24, r12
    1856:	0b d1       	rcall	.+534    	; 0x1a6e <fgetc>
    1858:	97 fd       	sbrc	r25, 7
    185a:	c9 c0       	rjmp	.+402    	; 0x19ee <vfscanf+0x200>
    185c:	41 2f       	mov	r20, r17
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	9c 01       	movw	r18, r24
    1862:	33 27       	eor	r19, r19
    1864:	24 17       	cp	r18, r20
    1866:	35 07       	cpc	r19, r21
    1868:	c1 f2       	breq	.-80     	; 0x181a <vfscanf+0x2c>
    186a:	b6 01       	movw	r22, r12
    186c:	7a d1       	rcall	.+756    	; 0x1b62 <ungetc>
    186e:	c1 c0       	rjmp	.+386    	; 0x19f2 <vfscanf+0x204>
    1870:	1a 32       	cpi	r17, 0x2A	; 42
    1872:	39 f4       	brne	.+14     	; 0x1882 <vfscanf+0x94>
    1874:	e3 fc       	sbrc	r14, 3
    1876:	15 91       	lpm	r17, Z+
    1878:	e3 fe       	sbrs	r14, 3
    187a:	11 91       	ld	r17, Z+
    187c:	ef 01       	movw	r28, r30
    187e:	01 e0       	ldi	r16, 0x01	; 1
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <vfscanf+0x96>
    1882:	00 e0       	ldi	r16, 0x00	; 0
    1884:	f1 2c       	mov	r15, r1
    1886:	20 ed       	ldi	r18, 0xD0	; 208
    1888:	21 0f       	add	r18, r17
    188a:	2a 30       	cpi	r18, 0x0A	; 10
    188c:	78 f4       	brcc	.+30     	; 0x18ac <vfscanf+0xbe>
    188e:	02 60       	ori	r16, 0x02	; 2
    1890:	6f 2d       	mov	r22, r15
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	40 e2       	ldi	r20, 0x20	; 32
    189a:	03 de       	rcall	.-1018   	; 0x14a2 <mulacc>
    189c:	f6 2e       	mov	r15, r22
    189e:	fe 01       	movw	r30, r28
    18a0:	e3 fc       	sbrc	r14, 3
    18a2:	15 91       	lpm	r17, Z+
    18a4:	e3 fe       	sbrs	r14, 3
    18a6:	11 91       	ld	r17, Z+
    18a8:	ef 01       	movw	r28, r30
    18aa:	ed cf       	rjmp	.-38     	; 0x1886 <vfscanf+0x98>
    18ac:	01 ff       	sbrs	r16, 1
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <vfscanf+0xc8>
    18b0:	f1 10       	cpse	r15, r1
    18b2:	03 c0       	rjmp	.+6      	; 0x18ba <vfscanf+0xcc>
    18b4:	9e c0       	rjmp	.+316    	; 0x19f2 <vfscanf+0x204>
    18b6:	ff 24       	eor	r15, r15
    18b8:	fa 94       	dec	r15
    18ba:	18 36       	cpi	r17, 0x68	; 104
    18bc:	19 f0       	breq	.+6      	; 0x18c4 <vfscanf+0xd6>
    18be:	1c 36       	cpi	r17, 0x6C	; 108
    18c0:	51 f0       	breq	.+20     	; 0x18d6 <vfscanf+0xe8>
    18c2:	10 c0       	rjmp	.+32     	; 0x18e4 <vfscanf+0xf6>
    18c4:	fe 01       	movw	r30, r28
    18c6:	e3 fc       	sbrc	r14, 3
    18c8:	15 91       	lpm	r17, Z+
    18ca:	e3 fe       	sbrs	r14, 3
    18cc:	11 91       	ld	r17, Z+
    18ce:	ef 01       	movw	r28, r30
    18d0:	18 36       	cpi	r17, 0x68	; 104
    18d2:	41 f4       	brne	.+16     	; 0x18e4 <vfscanf+0xf6>
    18d4:	08 60       	ori	r16, 0x08	; 8
    18d6:	04 60       	ori	r16, 0x04	; 4
    18d8:	fe 01       	movw	r30, r28
    18da:	e3 fc       	sbrc	r14, 3
    18dc:	15 91       	lpm	r17, Z+
    18de:	e3 fe       	sbrs	r14, 3
    18e0:	11 91       	ld	r17, Z+
    18e2:	ef 01       	movw	r28, r30
    18e4:	11 23       	and	r17, r17
    18e6:	09 f4       	brne	.+2      	; 0x18ea <vfscanf+0xfc>
    18e8:	84 c0       	rjmp	.+264    	; 0x19f2 <vfscanf+0x204>
    18ea:	61 2f       	mov	r22, r17
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	8c e8       	ldi	r24, 0x8C	; 140
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9c d0       	rcall	.+312    	; 0x1a2c <strchr_P>
    18f4:	89 2b       	or	r24, r25
    18f6:	09 f4       	brne	.+2      	; 0x18fa <vfscanf+0x10c>
    18f8:	7c c0       	rjmp	.+248    	; 0x19f2 <vfscanf+0x204>
    18fa:	00 fd       	sbrc	r16, 0
    18fc:	07 c0       	rjmp	.+14     	; 0x190c <vfscanf+0x11e>
    18fe:	f5 01       	movw	r30, r10
    1900:	80 80       	ld	r8, Z
    1902:	91 80       	ldd	r9, Z+1	; 0x01
    1904:	c5 01       	movw	r24, r10
    1906:	02 96       	adiw	r24, 0x02	; 2
    1908:	5c 01       	movw	r10, r24
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfscanf+0x122>
    190c:	81 2c       	mov	r8, r1
    190e:	91 2c       	mov	r9, r1
    1910:	1e 36       	cpi	r17, 0x6E	; 110
    1912:	49 f4       	brne	.+18     	; 0x1926 <vfscanf+0x138>
    1914:	f6 01       	movw	r30, r12
    1916:	46 81       	ldd	r20, Z+6	; 0x06
    1918:	57 81       	ldd	r21, Z+7	; 0x07
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	20 2f       	mov	r18, r16
    1920:	c4 01       	movw	r24, r8
    1922:	b3 dd       	rcall	.-1178   	; 0x148a <putval>
    1924:	7a cf       	rjmp	.-268    	; 0x181a <vfscanf+0x2c>
    1926:	13 36       	cpi	r17, 0x63	; 99
    1928:	a1 f4       	brne	.+40     	; 0x1952 <vfscanf+0x164>
    192a:	01 fd       	sbrc	r16, 1
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <vfscanf+0x144>
    192e:	ff 24       	eor	r15, r15
    1930:	f3 94       	inc	r15
    1932:	c6 01       	movw	r24, r12
    1934:	9c d0       	rcall	.+312    	; 0x1a6e <fgetc>
    1936:	97 fd       	sbrc	r25, 7
    1938:	5a c0       	rjmp	.+180    	; 0x19ee <vfscanf+0x200>
    193a:	81 14       	cp	r8, r1
    193c:	91 04       	cpc	r9, r1
    193e:	29 f0       	breq	.+10     	; 0x194a <vfscanf+0x15c>
    1940:	f4 01       	movw	r30, r8
    1942:	80 83       	st	Z, r24
    1944:	c4 01       	movw	r24, r8
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	4c 01       	movw	r8, r24
    194a:	fa 94       	dec	r15
    194c:	f1 10       	cpse	r15, r1
    194e:	f1 cf       	rjmp	.-30     	; 0x1932 <vfscanf+0x144>
    1950:	4a c0       	rjmp	.+148    	; 0x19e6 <vfscanf+0x1f8>
    1952:	1b 35       	cpi	r17, 0x5B	; 91
    1954:	51 f4       	brne	.+20     	; 0x196a <vfscanf+0x17c>
    1956:	9e 01       	movw	r18, r28
    1958:	a4 01       	movw	r20, r8
    195a:	6f 2d       	mov	r22, r15
    195c:	c6 01       	movw	r24, r12
    195e:	68 de       	rcall	.-816    	; 0x1630 <conv_brk>
    1960:	ec 01       	movw	r28, r24
    1962:	89 2b       	or	r24, r25
    1964:	09 f0       	breq	.+2      	; 0x1968 <vfscanf+0x17a>
    1966:	3f c0       	rjmp	.+126    	; 0x19e6 <vfscanf+0x1f8>
    1968:	39 c0       	rjmp	.+114    	; 0x19dc <vfscanf+0x1ee>
    196a:	c6 01       	movw	r24, r12
    196c:	c1 dd       	rcall	.-1150   	; 0x14f0 <skip_spaces>
    196e:	97 fd       	sbrc	r25, 7
    1970:	3e c0       	rjmp	.+124    	; 0x19ee <vfscanf+0x200>
    1972:	1f 36       	cpi	r17, 0x6F	; 111
    1974:	49 f1       	breq	.+82     	; 0x19c8 <vfscanf+0x1da>
    1976:	28 f4       	brcc	.+10     	; 0x1982 <vfscanf+0x194>
    1978:	14 36       	cpi	r17, 0x64	; 100
    197a:	21 f1       	breq	.+72     	; 0x19c4 <vfscanf+0x1d6>
    197c:	19 36       	cpi	r17, 0x69	; 105
    197e:	39 f1       	breq	.+78     	; 0x19ce <vfscanf+0x1e0>
    1980:	25 c0       	rjmp	.+74     	; 0x19cc <vfscanf+0x1de>
    1982:	13 37       	cpi	r17, 0x73	; 115
    1984:	71 f0       	breq	.+28     	; 0x19a2 <vfscanf+0x1b4>
    1986:	15 37       	cpi	r17, 0x75	; 117
    1988:	e9 f0       	breq	.+58     	; 0x19c4 <vfscanf+0x1d6>
    198a:	20 c0       	rjmp	.+64     	; 0x19cc <vfscanf+0x1de>
    198c:	81 14       	cp	r8, r1
    198e:	91 04       	cpc	r9, r1
    1990:	29 f0       	breq	.+10     	; 0x199c <vfscanf+0x1ae>
    1992:	f4 01       	movw	r30, r8
    1994:	60 82       	st	Z, r6
    1996:	c4 01       	movw	r24, r8
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	4c 01       	movw	r8, r24
    199c:	fa 94       	dec	r15
    199e:	ff 20       	and	r15, r15
    19a0:	59 f0       	breq	.+22     	; 0x19b8 <vfscanf+0x1ca>
    19a2:	c6 01       	movw	r24, r12
    19a4:	64 d0       	rcall	.+200    	; 0x1a6e <fgetc>
    19a6:	3c 01       	movw	r6, r24
    19a8:	97 fd       	sbrc	r25, 7
    19aa:	06 c0       	rjmp	.+12     	; 0x19b8 <vfscanf+0x1ca>
    19ac:	37 d0       	rcall	.+110    	; 0x1a1c <isspace>
    19ae:	89 2b       	or	r24, r25
    19b0:	69 f3       	breq	.-38     	; 0x198c <vfscanf+0x19e>
    19b2:	b6 01       	movw	r22, r12
    19b4:	c3 01       	movw	r24, r6
    19b6:	d5 d0       	rcall	.+426    	; 0x1b62 <ungetc>
    19b8:	81 14       	cp	r8, r1
    19ba:	91 04       	cpc	r9, r1
    19bc:	a1 f0       	breq	.+40     	; 0x19e6 <vfscanf+0x1f8>
    19be:	f4 01       	movw	r30, r8
    19c0:	10 82       	st	Z, r1
    19c2:	11 c0       	rjmp	.+34     	; 0x19e6 <vfscanf+0x1f8>
    19c4:	00 62       	ori	r16, 0x20	; 32
    19c6:	03 c0       	rjmp	.+6      	; 0x19ce <vfscanf+0x1e0>
    19c8:	00 61       	ori	r16, 0x10	; 16
    19ca:	01 c0       	rjmp	.+2      	; 0x19ce <vfscanf+0x1e0>
    19cc:	00 64       	ori	r16, 0x40	; 64
    19ce:	20 2f       	mov	r18, r16
    19d0:	a4 01       	movw	r20, r8
    19d2:	6f 2d       	mov	r22, r15
    19d4:	c6 01       	movw	r24, r12
    19d6:	a2 dd       	rcall	.-1212   	; 0x151c <conv_int>
    19d8:	81 11       	cpse	r24, r1
    19da:	05 c0       	rjmp	.+10     	; 0x19e6 <vfscanf+0x1f8>
    19dc:	f6 01       	movw	r30, r12
    19de:	83 81       	ldd	r24, Z+3	; 0x03
    19e0:	80 73       	andi	r24, 0x30	; 48
    19e2:	29 f4       	brne	.+10     	; 0x19ee <vfscanf+0x200>
    19e4:	06 c0       	rjmp	.+12     	; 0x19f2 <vfscanf+0x204>
    19e6:	00 fd       	sbrc	r16, 0
    19e8:	18 cf       	rjmp	.-464    	; 0x181a <vfscanf+0x2c>
    19ea:	53 94       	inc	r5
    19ec:	16 cf       	rjmp	.-468    	; 0x181a <vfscanf+0x2c>
    19ee:	55 20       	and	r5, r5
    19f0:	19 f0       	breq	.+6      	; 0x19f8 <vfscanf+0x20a>
    19f2:	85 2d       	mov	r24, r5
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <vfscanf+0x20e>
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	9f ef       	ldi	r25, 0xFF	; 255
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	df 90       	pop	r13
    1a0a:	cf 90       	pop	r12
    1a0c:	bf 90       	pop	r11
    1a0e:	af 90       	pop	r10
    1a10:	9f 90       	pop	r9
    1a12:	8f 90       	pop	r8
    1a14:	7f 90       	pop	r7
    1a16:	6f 90       	pop	r6
    1a18:	5f 90       	pop	r5
    1a1a:	08 95       	ret

00001a1c <isspace>:
    1a1c:	91 11       	cpse	r25, r1
    1a1e:	18 c1       	rjmp	.+560    	; 0x1c50 <__ctype_isfalse>
    1a20:	80 32       	cpi	r24, 0x20	; 32
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <isspace+0xe>
    1a24:	89 50       	subi	r24, 0x09	; 9
    1a26:	85 50       	subi	r24, 0x05	; 5
    1a28:	d0 f7       	brcc	.-12     	; 0x1a1e <isspace+0x2>
    1a2a:	08 95       	ret

00001a2c <strchr_P>:
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	05 90       	lpm	r0, Z+
    1a30:	06 16       	cp	r0, r22
    1a32:	21 f0       	breq	.+8      	; 0x1a3c <strchr_P+0x10>
    1a34:	00 20       	and	r0, r0
    1a36:	d9 f7       	brne	.-10     	; 0x1a2e <strchr_P+0x2>
    1a38:	c0 01       	movw	r24, r0
    1a3a:	08 95       	ret
    1a3c:	31 97       	sbiw	r30, 0x01	; 1
    1a3e:	cf 01       	movw	r24, r30
    1a40:	08 95       	ret

00001a42 <strnlen_P>:
    1a42:	fc 01       	movw	r30, r24
    1a44:	05 90       	lpm	r0, Z+
    1a46:	61 50       	subi	r22, 0x01	; 1
    1a48:	70 40       	sbci	r23, 0x00	; 0
    1a4a:	01 10       	cpse	r0, r1
    1a4c:	d8 f7       	brcc	.-10     	; 0x1a44 <strnlen_P+0x2>
    1a4e:	80 95       	com	r24
    1a50:	90 95       	com	r25
    1a52:	8e 0f       	add	r24, r30
    1a54:	9f 1f       	adc	r25, r31
    1a56:	08 95       	ret

00001a58 <strnlen>:
    1a58:	fc 01       	movw	r30, r24
    1a5a:	61 50       	subi	r22, 0x01	; 1
    1a5c:	70 40       	sbci	r23, 0x00	; 0
    1a5e:	01 90       	ld	r0, Z+
    1a60:	01 10       	cpse	r0, r1
    1a62:	d8 f7       	brcc	.-10     	; 0x1a5a <strnlen+0x2>
    1a64:	80 95       	com	r24
    1a66:	90 95       	com	r25
    1a68:	8e 0f       	add	r24, r30
    1a6a:	9f 1f       	adc	r25, r31
    1a6c:	08 95       	ret

00001a6e <fgetc>:
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	ec 01       	movw	r28, r24
    1a74:	2b 81       	ldd	r18, Y+3	; 0x03
    1a76:	20 ff       	sbrs	r18, 0
    1a78:	33 c0       	rjmp	.+102    	; 0x1ae0 <fgetc+0x72>
    1a7a:	26 ff       	sbrs	r18, 6
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92 <fgetc+0x24>
    1a7e:	2f 7b       	andi	r18, 0xBF	; 191
    1a80:	2b 83       	std	Y+3, r18	; 0x03
    1a82:	8e 81       	ldd	r24, Y+6	; 0x06
    1a84:	9f 81       	ldd	r25, Y+7	; 0x07
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	9f 83       	std	Y+7, r25	; 0x07
    1a8a:	8e 83       	std	Y+6, r24	; 0x06
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	29 c0       	rjmp	.+82     	; 0x1ae4 <fgetc+0x76>
    1a92:	22 ff       	sbrs	r18, 2
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <fgetc+0x46>
    1a96:	e8 81       	ld	r30, Y
    1a98:	f9 81       	ldd	r31, Y+1	; 0x01
    1a9a:	80 81       	ld	r24, Z
    1a9c:	08 2e       	mov	r0, r24
    1a9e:	00 0c       	add	r0, r0
    1aa0:	99 0b       	sbc	r25, r25
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	19 f4       	brne	.+6      	; 0x1aac <fgetc+0x3e>
    1aa6:	20 62       	ori	r18, 0x20	; 32
    1aa8:	2b 83       	std	Y+3, r18	; 0x03
    1aaa:	1a c0       	rjmp	.+52     	; 0x1ae0 <fgetc+0x72>
    1aac:	31 96       	adiw	r30, 0x01	; 1
    1aae:	f9 83       	std	Y+1, r31	; 0x01
    1ab0:	e8 83       	st	Y, r30
    1ab2:	0e c0       	rjmp	.+28     	; 0x1ad0 <fgetc+0x62>
    1ab4:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ab6:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ab8:	09 95       	icall
    1aba:	97 ff       	sbrs	r25, 7
    1abc:	09 c0       	rjmp	.+18     	; 0x1ad0 <fgetc+0x62>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <fgetc+0x5a>
    1ac4:	80 e2       	ldi	r24, 0x20	; 32
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <fgetc+0x5c>
    1ac8:	80 e1       	ldi	r24, 0x10	; 16
    1aca:	82 2b       	or	r24, r18
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <fgetc+0x72>
    1ad0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ad2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ad4:	2f 5f       	subi	r18, 0xFF	; 255
    1ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad8:	3f 83       	std	Y+7, r19	; 0x07
    1ada:	2e 83       	std	Y+6, r18	; 0x06
    1adc:	99 27       	eor	r25, r25
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <fgetc+0x76>
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	9f ef       	ldi	r25, 0xFF	; 255
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	08 95       	ret

00001aea <fputc>:
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	fb 01       	movw	r30, r22
    1af4:	23 81       	ldd	r18, Z+3	; 0x03
    1af6:	21 fd       	sbrc	r18, 1
    1af8:	03 c0       	rjmp	.+6      	; 0x1b00 <fputc+0x16>
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	9f ef       	ldi	r25, 0xFF	; 255
    1afe:	2c c0       	rjmp	.+88     	; 0x1b58 <fputc+0x6e>
    1b00:	22 ff       	sbrs	r18, 2
    1b02:	16 c0       	rjmp	.+44     	; 0x1b30 <fputc+0x46>
    1b04:	46 81       	ldd	r20, Z+6	; 0x06
    1b06:	57 81       	ldd	r21, Z+7	; 0x07
    1b08:	24 81       	ldd	r18, Z+4	; 0x04
    1b0a:	35 81       	ldd	r19, Z+5	; 0x05
    1b0c:	42 17       	cp	r20, r18
    1b0e:	53 07       	cpc	r21, r19
    1b10:	44 f4       	brge	.+16     	; 0x1b22 <fputc+0x38>
    1b12:	a0 81       	ld	r26, Z
    1b14:	b1 81       	ldd	r27, Z+1	; 0x01
    1b16:	9d 01       	movw	r18, r26
    1b18:	2f 5f       	subi	r18, 0xFF	; 255
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	31 83       	std	Z+1, r19	; 0x01
    1b1e:	20 83       	st	Z, r18
    1b20:	8c 93       	st	X, r24
    1b22:	26 81       	ldd	r18, Z+6	; 0x06
    1b24:	37 81       	ldd	r19, Z+7	; 0x07
    1b26:	2f 5f       	subi	r18, 0xFF	; 255
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	37 83       	std	Z+7, r19	; 0x07
    1b2c:	26 83       	std	Z+6, r18	; 0x06
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <fputc+0x6e>
    1b30:	8b 01       	movw	r16, r22
    1b32:	ec 01       	movw	r28, r24
    1b34:	fb 01       	movw	r30, r22
    1b36:	00 84       	ldd	r0, Z+8	; 0x08
    1b38:	f1 85       	ldd	r31, Z+9	; 0x09
    1b3a:	e0 2d       	mov	r30, r0
    1b3c:	09 95       	icall
    1b3e:	89 2b       	or	r24, r25
    1b40:	e1 f6       	brne	.-72     	; 0x1afa <fputc+0x10>
    1b42:	d8 01       	movw	r26, r16
    1b44:	16 96       	adiw	r26, 0x06	; 6
    1b46:	8d 91       	ld	r24, X+
    1b48:	9c 91       	ld	r25, X
    1b4a:	17 97       	sbiw	r26, 0x07	; 7
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	17 96       	adiw	r26, 0x07	; 7
    1b50:	9c 93       	st	X, r25
    1b52:	8e 93       	st	-X, r24
    1b54:	16 97       	sbiw	r26, 0x06	; 6
    1b56:	ce 01       	movw	r24, r28
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	08 95       	ret

00001b62 <ungetc>:
    1b62:	fb 01       	movw	r30, r22
    1b64:	23 81       	ldd	r18, Z+3	; 0x03
    1b66:	20 ff       	sbrs	r18, 0
    1b68:	12 c0       	rjmp	.+36     	; 0x1b8e <ungetc+0x2c>
    1b6a:	26 fd       	sbrc	r18, 6
    1b6c:	10 c0       	rjmp	.+32     	; 0x1b8e <ungetc+0x2c>
    1b6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	93 07       	cpc	r25, r19
    1b74:	61 f0       	breq	.+24     	; 0x1b8e <ungetc+0x2c>
    1b76:	82 83       	std	Z+2, r24	; 0x02
    1b78:	2f 7d       	andi	r18, 0xDF	; 223
    1b7a:	20 64       	ori	r18, 0x40	; 64
    1b7c:	23 83       	std	Z+3, r18	; 0x03
    1b7e:	26 81       	ldd	r18, Z+6	; 0x06
    1b80:	37 81       	ldd	r19, Z+7	; 0x07
    1b82:	21 50       	subi	r18, 0x01	; 1
    1b84:	31 09       	sbc	r19, r1
    1b86:	37 83       	std	Z+7, r19	; 0x07
    1b88:	26 83       	std	Z+6, r18	; 0x06
    1b8a:	99 27       	eor	r25, r25
    1b8c:	08 95       	ret
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	9f ef       	ldi	r25, 0xFF	; 255
    1b92:	08 95       	ret

00001b94 <__ultoa_invert>:
    1b94:	fa 01       	movw	r30, r20
    1b96:	aa 27       	eor	r26, r26
    1b98:	28 30       	cpi	r18, 0x08	; 8
    1b9a:	51 f1       	breq	.+84     	; 0x1bf0 <__ultoa_invert+0x5c>
    1b9c:	20 31       	cpi	r18, 0x10	; 16
    1b9e:	81 f1       	breq	.+96     	; 0x1c00 <__ultoa_invert+0x6c>
    1ba0:	e8 94       	clt
    1ba2:	6f 93       	push	r22
    1ba4:	6e 7f       	andi	r22, 0xFE	; 254
    1ba6:	6e 5f       	subi	r22, 0xFE	; 254
    1ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    1baa:	8f 4f       	sbci	r24, 0xFF	; 255
    1bac:	9f 4f       	sbci	r25, 0xFF	; 255
    1bae:	af 4f       	sbci	r26, 0xFF	; 255
    1bb0:	b1 e0       	ldi	r27, 0x01	; 1
    1bb2:	3e d0       	rcall	.+124    	; 0x1c30 <__ultoa_invert+0x9c>
    1bb4:	b4 e0       	ldi	r27, 0x04	; 4
    1bb6:	3c d0       	rcall	.+120    	; 0x1c30 <__ultoa_invert+0x9c>
    1bb8:	67 0f       	add	r22, r23
    1bba:	78 1f       	adc	r23, r24
    1bbc:	89 1f       	adc	r24, r25
    1bbe:	9a 1f       	adc	r25, r26
    1bc0:	a1 1d       	adc	r26, r1
    1bc2:	68 0f       	add	r22, r24
    1bc4:	79 1f       	adc	r23, r25
    1bc6:	8a 1f       	adc	r24, r26
    1bc8:	91 1d       	adc	r25, r1
    1bca:	a1 1d       	adc	r26, r1
    1bcc:	6a 0f       	add	r22, r26
    1bce:	71 1d       	adc	r23, r1
    1bd0:	81 1d       	adc	r24, r1
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	a1 1d       	adc	r26, r1
    1bd6:	20 d0       	rcall	.+64     	; 0x1c18 <__ultoa_invert+0x84>
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <__ultoa_invert+0x48>
    1bda:	68 94       	set
    1bdc:	3f 91       	pop	r19
    1bde:	2a e0       	ldi	r18, 0x0A	; 10
    1be0:	26 9f       	mul	r18, r22
    1be2:	11 24       	eor	r1, r1
    1be4:	30 19       	sub	r19, r0
    1be6:	30 5d       	subi	r19, 0xD0	; 208
    1be8:	31 93       	st	Z+, r19
    1bea:	de f6       	brtc	.-74     	; 0x1ba2 <__ultoa_invert+0xe>
    1bec:	cf 01       	movw	r24, r30
    1bee:	08 95       	ret
    1bf0:	46 2f       	mov	r20, r22
    1bf2:	47 70       	andi	r20, 0x07	; 7
    1bf4:	40 5d       	subi	r20, 0xD0	; 208
    1bf6:	41 93       	st	Z+, r20
    1bf8:	b3 e0       	ldi	r27, 0x03	; 3
    1bfa:	0f d0       	rcall	.+30     	; 0x1c1a <__ultoa_invert+0x86>
    1bfc:	c9 f7       	brne	.-14     	; 0x1bf0 <__ultoa_invert+0x5c>
    1bfe:	f6 cf       	rjmp	.-20     	; 0x1bec <__ultoa_invert+0x58>
    1c00:	46 2f       	mov	r20, r22
    1c02:	4f 70       	andi	r20, 0x0F	; 15
    1c04:	40 5d       	subi	r20, 0xD0	; 208
    1c06:	4a 33       	cpi	r20, 0x3A	; 58
    1c08:	18 f0       	brcs	.+6      	; 0x1c10 <__ultoa_invert+0x7c>
    1c0a:	49 5d       	subi	r20, 0xD9	; 217
    1c0c:	31 fd       	sbrc	r19, 1
    1c0e:	40 52       	subi	r20, 0x20	; 32
    1c10:	41 93       	st	Z+, r20
    1c12:	02 d0       	rcall	.+4      	; 0x1c18 <__ultoa_invert+0x84>
    1c14:	a9 f7       	brne	.-22     	; 0x1c00 <__ultoa_invert+0x6c>
    1c16:	ea cf       	rjmp	.-44     	; 0x1bec <__ultoa_invert+0x58>
    1c18:	b4 e0       	ldi	r27, 0x04	; 4
    1c1a:	a6 95       	lsr	r26
    1c1c:	97 95       	ror	r25
    1c1e:	87 95       	ror	r24
    1c20:	77 95       	ror	r23
    1c22:	67 95       	ror	r22
    1c24:	ba 95       	dec	r27
    1c26:	c9 f7       	brne	.-14     	; 0x1c1a <__ultoa_invert+0x86>
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	61 05       	cpc	r22, r1
    1c2c:	71 05       	cpc	r23, r1
    1c2e:	08 95       	ret
    1c30:	9b 01       	movw	r18, r22
    1c32:	ac 01       	movw	r20, r24
    1c34:	0a 2e       	mov	r0, r26
    1c36:	06 94       	lsr	r0
    1c38:	57 95       	ror	r21
    1c3a:	47 95       	ror	r20
    1c3c:	37 95       	ror	r19
    1c3e:	27 95       	ror	r18
    1c40:	ba 95       	dec	r27
    1c42:	c9 f7       	brne	.-14     	; 0x1c36 <__ultoa_invert+0xa2>
    1c44:	62 0f       	add	r22, r18
    1c46:	73 1f       	adc	r23, r19
    1c48:	84 1f       	adc	r24, r20
    1c4a:	95 1f       	adc	r25, r21
    1c4c:	a0 1d       	adc	r26, r0
    1c4e:	08 95       	ret

00001c50 <__ctype_isfalse>:
    1c50:	99 27       	eor	r25, r25
    1c52:	88 27       	eor	r24, r24

00001c54 <__ctype_istrue>:
    1c54:	08 95       	ret

00001c56 <_exit>:
    1c56:	f8 94       	cli

00001c58 <__stop_program>:
    1c58:	ff cf       	rjmp	.-2      	; 0x1c58 <__stop_program>
