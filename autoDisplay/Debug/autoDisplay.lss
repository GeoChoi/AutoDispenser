
autoDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000033c  00800100  00001cae  00001d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080043c  0080043c  0000207e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000207e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002639  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e02  00000000  00000000  00004955  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ae  00000000  00000000  00005757  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00006a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080d  00000000  00000000  00006f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001190  00000000  00000000  00007751  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000088e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	cf c6       	rjmp	.+3486   	; 0xda4 <__vector_1>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
      36:	00 00       	nop
      38:	df c6       	rjmp	.+3518   	; 0xdf8 <__vector_14>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	63 64       	ori	r22, 0x43	; 67
      8e:	69 6e       	ori	r22, 0xE9	; 233
      90:	6f 70       	andi	r22, 0x0F	; 15
      92:	73 75       	andi	r23, 0x53	; 83
      94:	78 58       	subi	r23, 0x88	; 136
      96:	5b 00       	.word	0x005b	; ????

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ee ea       	ldi	r30, 0xAE	; 174
      ac:	fc e1       	ldi	r31, 0x1C	; 28
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	ac 33       	cpi	r26, 0x3C	; 60
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	24 e0       	ldi	r18, 0x04	; 4
      c0:	ac e3       	ldi	r26, 0x3C	; 60
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	aa 34       	cpi	r26, 0x4A	; 74
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	ee d6       	rcall	.+3548   	; 0xeac <main>
      d0:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <_exit>

000000d4 <__bad_interrupt>:
      d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <testmode>:



char uartBuffer[20] = "0";

void testmode() {
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	2a 97       	sbiw	r28, 0x0a	; 10
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	cd bf       	out	0x3d, r28	; 61
	int quit = 0;
      fe:	c1 2c       	mov	r12, r1
     100:	d1 2c       	mov	r13, r1
	while(1) {
		do {
			do {
				wronginput = 0;
				
				printf("Select mode : step_rel(1), step_abs(2), servo_con(3), quit(q)?");
     102:	84 e8       	ldi	r24, 0x84	; 132
     104:	91 e0       	ldi	r25, 0x01	; 1
     106:	9f 93       	push	r25
     108:	8f 93       	push	r24
     10a:	91 d7       	rcall	.+3874   	; 0x102e <printf>
				scanf("%s", uartBuffer);
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	9f 93       	push	r25
     112:	8f 93       	push	r24
     114:	83 ec       	ldi	r24, 0xC3	; 195
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	9f 93       	push	r25
     11a:	8f 93       	push	r24
     11c:	d0 d7       	rcall	.+4000   	; 0x10be <scanf>
				
				if(strcasecmp(uartBuffer, "1")==0)
     11e:	66 ec       	ldi	r22, 0xC6	; 198
     120:	71 e0       	ldi	r23, 0x01	; 1
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	70 d7       	rcall	.+3808   	; 0x1008 <strcasecmp>
     128:	0f 90       	pop	r0
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	89 2b       	or	r24, r25
     136:	d9 f0       	breq	.+54     	; 0x16e <testmode+0x98>
				testModeSelect = 1;
				else if (strcasecmp(uartBuffer, "2")==0)
     138:	68 ec       	ldi	r22, 0xC8	; 200
     13a:	71 e0       	ldi	r23, 0x01	; 1
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	63 d7       	rcall	.+3782   	; 0x1008 <strcasecmp>
     142:	89 2b       	or	r24, r25
     144:	d1 f0       	breq	.+52     	; 0x17a <testmode+0xa4>
				testModeSelect = 2;
				else if (strcasecmp(uartBuffer, "3")==0)
     146:	6a ec       	ldi	r22, 0xCA	; 202
     148:	71 e0       	ldi	r23, 0x01	; 1
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	5c d7       	rcall	.+3768   	; 0x1008 <strcasecmp>
     150:	89 2b       	or	r24, r25
     152:	d1 f0       	breq	.+52     	; 0x188 <testmode+0xb2>
				testModeSelect = 3;
				else if (strcasecmp(uartBuffer, "q")==0)
     154:	6c ec       	ldi	r22, 0xCC	; 204
     156:	71 e0       	ldi	r23, 0x01	; 1
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	55 d7       	rcall	.+3754   	; 0x1008 <strcasecmp>
     15e:	89 2b       	or	r24, r25
				quit = 1;
				else{
					printf("input '1', '2', '3' or 'q'\r\n");
     160:	d9 f0       	breq	.+54     	; 0x198 <testmode+0xc2>
     162:	8e ec       	ldi	r24, 0xCE	; 206
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	7b d7       	rcall	.+3830   	; 0x105e <puts>
					wronginput = 1;
     168:	01 e0       	ldi	r16, 0x01	; 1
     16a:	10 e0       	ldi	r17, 0x00	; 0
     16c:	1a c0       	rjmp	.+52     	; 0x1a2 <testmode+0xcc>
				
				printf("Select mode : step_rel(1), step_abs(2), servo_con(3), quit(q)?");
				scanf("%s", uartBuffer);
				
				if(strcasecmp(uartBuffer, "1")==0)
				testModeSelect = 1;
     16e:	ee 24       	eor	r14, r14
     170:	e3 94       	inc	r14
     172:	f1 2c       	mov	r15, r1
	unsigned int hand,  wrist, elbow;
	
	while(1) {
		do {
			do {
				wronginput = 0;
     174:	00 e0       	ldi	r16, 0x00	; 0
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	14 c0       	rjmp	.+40     	; 0x1a2 <testmode+0xcc>
				scanf("%s", uartBuffer);
				
				if(strcasecmp(uartBuffer, "1")==0)
				testModeSelect = 1;
				else if (strcasecmp(uartBuffer, "2")==0)
				testModeSelect = 2;
     17a:	68 94       	set
     17c:	ee 24       	eor	r14, r14
     17e:	e1 f8       	bld	r14, 1
     180:	f1 2c       	mov	r15, r1
	unsigned int hand,  wrist, elbow;
	
	while(1) {
		do {
			do {
				wronginput = 0;
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	10 e0       	ldi	r17, 0x00	; 0
     186:	0d c0       	rjmp	.+26     	; 0x1a2 <testmode+0xcc>
				if(strcasecmp(uartBuffer, "1")==0)
				testModeSelect = 1;
				else if (strcasecmp(uartBuffer, "2")==0)
				testModeSelect = 2;
				else if (strcasecmp(uartBuffer, "3")==0)
				testModeSelect = 3;
     188:	0f 2e       	mov	r0, r31
     18a:	f3 e0       	ldi	r31, 0x03	; 3
     18c:	ef 2e       	mov	r14, r31
     18e:	f1 2c       	mov	r15, r1
     190:	f0 2d       	mov	r31, r0
	unsigned int hand,  wrist, elbow;
	
	while(1) {
		do {
			do {
				wronginput = 0;
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	10 e0       	ldi	r17, 0x00	; 0
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <testmode+0xcc>
     198:	00 e0       	ldi	r16, 0x00	; 0
     19a:	10 e0       	ldi	r17, 0x00	; 0
				else if (strcasecmp(uartBuffer, "2")==0)
				testModeSelect = 2;
				else if (strcasecmp(uartBuffer, "3")==0)
				testModeSelect = 3;
				else if (strcasecmp(uartBuffer, "q")==0)
				quit = 1;
     19c:	cc 24       	eor	r12, r12
     19e:	c3 94       	inc	r12
     1a0:	d1 2c       	mov	r13, r1
				else{
					printf("input '1', '2', '3' or 'q'\r\n");
					wronginput = 1;
				}
			} while(wronginput);
     1a2:	01 15       	cp	r16, r1
     1a4:	11 05       	cpc	r17, r1
     1a6:	09 f0       	breq	.+2      	; 0x1aa <testmode+0xd4>
     1a8:	ac cf       	rjmp	.-168    	; 0x102 <testmode+0x2c>
			
			if(quit) break;
     1aa:	c1 14       	cp	r12, r1
     1ac:	d1 04       	cpc	r13, r1
     1ae:	09 f0       	breq	.+2      	; 0x1b2 <testmode+0xdc>
     1b0:	b5 c0       	rjmp	.+362    	; 0x31c <testmode+0x246>
			
			if(testModeSelect==1||testModeSelect==2) {
     1b2:	c7 01       	movw	r24, r14
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	02 97       	sbiw	r24, 0x02	; 2
     1b8:	08 f0       	brcs	.+2      	; 0x1bc <testmode+0xe6>
     1ba:	45 c0       	rjmp	.+138    	; 0x246 <testmode+0x170>
				printf("X coordinate : ");
     1bc:	8a ee       	ldi	r24, 0xEA	; 234
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	9f 93       	push	r25
     1c2:	8f 93       	push	r24
     1c4:	34 d7       	rcall	.+3688   	; 0x102e <printf>
				scanf("%u", &coordinate_X);
     1c6:	ce 01       	movw	r24, r28
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	9f 93       	push	r25
     1cc:	8f 93       	push	r24
     1ce:	0f 2e       	mov	r0, r31
     1d0:	f7 e5       	ldi	r31, 0x57	; 87
     1d2:	8f 2e       	mov	r8, r31
     1d4:	f3 e0       	ldi	r31, 0x03	; 3
     1d6:	9f 2e       	mov	r9, r31
     1d8:	f0 2d       	mov	r31, r0
     1da:	9f 92       	push	r9
     1dc:	8f 92       	push	r8
     1de:	6f d7       	rcall	.+3806   	; 0x10be <scanf>
				printf("your input : %5d\r\n\r\n", coordinate_X);
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	8f 93       	push	r24
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	8f 93       	push	r24
     1e8:	0f 2e       	mov	r0, r31
     1ea:	fa ef       	ldi	r31, 0xFA	; 250
     1ec:	af 2e       	mov	r10, r31
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
     1f0:	bf 2e       	mov	r11, r31
     1f2:	f0 2d       	mov	r31, r0
     1f4:	bf 92       	push	r11
     1f6:	af 92       	push	r10
     1f8:	1a d7       	rcall	.+3636   	; 0x102e <printf>
				
				printf("Y coordinate : ");
     1fa:	8f e0       	ldi	r24, 0x0F	; 15
     1fc:	92 e0       	ldi	r25, 0x02	; 2
     1fe:	9f 93       	push	r25
     200:	8f 93       	push	r24
     202:	15 d7       	rcall	.+3626   	; 0x102e <printf>
     204:	ce 01       	movw	r24, r28
				scanf("%u", &coordinate_Y);
     206:	03 96       	adiw	r24, 0x03	; 3
     208:	9f 93       	push	r25
     20a:	8f 93       	push	r24
     20c:	9f 92       	push	r9
     20e:	8f 92       	push	r8
     210:	56 d7       	rcall	.+3756   	; 0x10be <scanf>
     212:	8c 81       	ldd	r24, Y+4	; 0x04
				printf("your input : %5d\r\n\r\n", coordinate_Y);
     214:	8f 93       	push	r24
     216:	8b 81       	ldd	r24, Y+3	; 0x03
     218:	8f 93       	push	r24
     21a:	bf 92       	push	r11
     21c:	af 92       	push	r10
     21e:	07 d7       	rcall	.+3598   	; 0x102e <printf>
     220:	8c 81       	ldd	r24, Y+4	; 0x04
     222:	8f 93       	push	r24
				
				printf("[x,y] = [%5d, %5d]\r\n",coordinate_X, coordinate_Y);
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	8f 93       	push	r24
     228:	8a 81       	ldd	r24, Y+2	; 0x02
     22a:	8f 93       	push	r24
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	8f 93       	push	r24
     230:	8f e1       	ldi	r24, 0x1F	; 31
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	9f 93       	push	r25
     236:	8f 93       	push	r24
     238:	fa d6       	rcall	.+3572   	; 0x102e <printf>
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	f8 94       	cli
     23e:	de bf       	out	0x3e, r29	; 62
     240:	0f be       	out	0x3f, r0	; 63
     242:	cd bf       	out	0x3d, r28	; 61
     244:	33 c0       	rjmp	.+102    	; 0x2ac <testmode+0x1d6>
     246:	93 e0       	ldi	r25, 0x03	; 3
     248:	e9 16       	cp	r14, r25
			}
			else if(testModeSelect==3) {
     24a:	f1 04       	cpc	r15, r1
     24c:	79 f5       	brne	.+94     	; 0x2ac <testmode+0x1d6>
     24e:	84 e3       	ldi	r24, 0x34	; 52
     250:	92 e0       	ldi	r25, 0x02	; 2
				printf("hand  : ");
     252:	9f 93       	push	r25
     254:	8f 93       	push	r24
     256:	eb d6       	rcall	.+3542   	; 0x102e <printf>
     258:	ce 01       	movw	r24, r28
     25a:	05 96       	adiw	r24, 0x05	; 5
     25c:	9f 93       	push	r25
				scanf("%u", &hand);
     25e:	8f 93       	push	r24
     260:	0f 2e       	mov	r0, r31
     262:	f7 e5       	ldi	r31, 0x57	; 87
     264:	af 2e       	mov	r10, r31
     266:	f3 e0       	ldi	r31, 0x03	; 3
     268:	bf 2e       	mov	r11, r31
     26a:	f0 2d       	mov	r31, r0
     26c:	bf 92       	push	r11
     26e:	af 92       	push	r10
     270:	26 d7       	rcall	.+3660   	; 0x10be <scanf>
     272:	8d e3       	ldi	r24, 0x3D	; 61
     274:	92 e0       	ldi	r25, 0x02	; 2
				printf("wrist : ");
     276:	9f 93       	push	r25
     278:	8f 93       	push	r24
     27a:	d9 d6       	rcall	.+3506   	; 0x102e <printf>
     27c:	ce 01       	movw	r24, r28
     27e:	07 96       	adiw	r24, 0x07	; 7
				scanf("%u", &wrist);
     280:	9f 93       	push	r25
     282:	8f 93       	push	r24
     284:	bf 92       	push	r11
     286:	af 92       	push	r10
     288:	1a d7       	rcall	.+3636   	; 0x10be <scanf>
     28a:	86 e4       	ldi	r24, 0x46	; 70
     28c:	92 e0       	ldi	r25, 0x02	; 2
				printf("elbow : ");
     28e:	9f 93       	push	r25
     290:	8f 93       	push	r24
     292:	cd d6       	rcall	.+3482   	; 0x102e <printf>
     294:	ce 01       	movw	r24, r28
     296:	09 96       	adiw	r24, 0x09	; 9
     298:	9f 93       	push	r25
				scanf("%u", &elbow);
     29a:	8f 93       	push	r24
     29c:	bf 92       	push	r11
     29e:	af 92       	push	r10
     2a0:	0e d7       	rcall	.+3612   	; 0x10be <scanf>
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	8f e4       	ldi	r24, 0x4F	; 79
     2ae:	92 e0       	ldi	r25, 0x02	; 2
			}
			
			do {
				wronginput = 0;
				
				printf("Do you want to proceed?[y/n]");
     2b0:	9f 93       	push	r25
     2b2:	8f 93       	push	r24
     2b4:	bc d6       	rcall	.+3448   	; 0x102e <printf>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	91 e0       	ldi	r25, 0x01	; 1
				scanf("%s", uartBuffer);
     2ba:	9f 93       	push	r25
     2bc:	8f 93       	push	r24
     2be:	83 ec       	ldi	r24, 0xC3	; 195
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	9f 93       	push	r25
     2c4:	8f 93       	push	r24
     2c6:	fb d6       	rcall	.+3574   	; 0x10be <scanf>
     2c8:	6c e6       	ldi	r22, 0x6C	; 108
     2ca:	72 e0       	ldi	r23, 0x02	; 2
     2cc:	80 e0       	ldi	r24, 0x00	; 0
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	9b d6       	rcall	.+3382   	; 0x1008 <strcasecmp>
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	89 2b       	or	r24, r25
     2e0:	69 f0       	breq	.+26     	; 0x2fc <testmode+0x226>
     2e2:	6e e6       	ldi	r22, 0x6E	; 110
     2e4:	72 e0       	ldi	r23, 0x02	; 2
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	8e d6       	rcall	.+3356   	; 0x1008 <strcasecmp>
     2ec:	89 2b       	or	r24, r25
     2ee:	41 f0       	breq	.+16     	; 0x300 <testmode+0x22a>
     2f0:	80 e7       	ldi	r24, 0x70	; 112
     2f2:	92 e0       	ldi	r25, 0x02	; 2
					printf("input 'y' or 'n' only\r\n");
     2f4:	b4 d6       	rcall	.+3432   	; 0x105e <puts>
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	03 c0       	rjmp	.+6      	; 0x302 <testmode+0x22c>
					wronginput = 1;
     2fc:	c8 01       	movw	r24, r16
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <testmode+0x22c>
     300:	c8 01       	movw	r24, r16
				printf("elbow : ");
				scanf("%u", &elbow);
			}
			
			do {
				wronginput = 0;
     302:	89 2b       	or	r24, r25
     304:	99 f6       	brne	.-90     	; 0x2ac <testmode+0x1d6>
     306:	80 ee       	ldi	r24, 0xE0	; 224
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
					printf("input 'y' or 'n' only\r\n");
					wronginput = 1;
				}
			} while(wronginput);
     308:	93 e0       	ldi	r25, 0x03	; 3
     30a:	a9 d6       	rcall	.+3410   	; 0x105e <puts>
			
			printf("\r\n");
     30c:	6c e6       	ldi	r22, 0x6C	; 108
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	80 e0       	ldi	r24, 0x00	; 0
		} while(strcasecmp(uartBuffer, "y"));
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	79 d6       	rcall	.+3314   	; 0x1008 <strcasecmp>
     316:	89 2b       	or	r24, r25
     318:	09 f0       	breq	.+2      	; 0x31c <testmode+0x246>
     31a:	f3 ce       	rjmp	.-538    	; 0x102 <testmode+0x2c>
     31c:	c1 14       	cp	r12, r1
     31e:	d1 04       	cpc	r13, r1
     320:	09 f0       	breq	.+2      	; 0x324 <testmode+0x24e>
		
		if(quit) break;
     322:	63 c0       	rjmp	.+198    	; 0x3ea <testmode+0x314>
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	e9 16       	cp	r14, r25
     328:	f1 04       	cpc	r15, r1
		else if(testModeSelect == 1) {
     32a:	39 f5       	brne	.+78     	; 0x37a <testmode+0x2a4>
     32c:	6b 81       	ldd	r22, Y+3	; 0x03
     32e:	7c 81       	ldd	r23, Y+4	; 0x04
     330:	89 81       	ldd	r24, Y+1	; 0x01
			MoveXY_relative(coordinate_X, coordinate_Y);
     332:	9a 81       	ldd	r25, Y+2	; 0x02
     334:	fa d3       	rcall	.+2036   	; 0xb2a <MoveXY_relative>
     336:	b7 d4       	rcall	.+2414   	; 0xca6 <pauseUntilStop>
     338:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <curY+0x1>
			pauseUntilStop();
     33c:	8f 93       	push	r24
     33e:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <curY>
			printf("current Position : [%4d, %4d]\r\n\r\n", curX, curY);
     342:	8f 93       	push	r24
     344:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <curX+0x1>
     348:	8f 93       	push	r24
     34a:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <curX>
     34e:	8f 93       	push	r24
     350:	87 e8       	ldi	r24, 0x87	; 135
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	9f 93       	push	r25
     356:	8f 93       	push	r24
     358:	6a d6       	rcall	.+3284   	; 0x102e <printf>
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	83 ed       	ldi	r24, 0xD3	; 211
     35e:	90 e3       	ldi	r25, 0x30	; 48
     360:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <testmode+0x28a>
     368:	00 c0       	rjmp	.+0      	; 0x36a <testmode+0x294>
     36a:	00 00       	nop
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	c4 ce       	rjmp	.-632    	; 0x102 <testmode+0x2c>
     37a:	22 e0       	ldi	r18, 0x02	; 2
     37c:	e2 16       	cp	r14, r18
     37e:	f1 04       	cpc	r15, r1
			_delay_ms(1000);
		}
		else if(testModeSelect == 2) {
     380:	39 f5       	brne	.+78     	; 0x3d0 <testmode+0x2fa>
     382:	6b 81       	ldd	r22, Y+3	; 0x03
     384:	7c 81       	ldd	r23, Y+4	; 0x04
			MoveXY_absolute(coordinate_X, coordinate_Y);
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	28 d4       	rcall	.+2128   	; 0xbdc <MoveXY_absolute>
     38c:	8c d4       	rcall	.+2328   	; 0xca6 <pauseUntilStop>
     38e:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <curY+0x1>
			pauseUntilStop();
     392:	8f 93       	push	r24
     394:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <curY>
			printf("current Position : [%4d, %4d]\r\n\r\n", curX, curY);
     398:	8f 93       	push	r24
     39a:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <curX+0x1>
     39e:	8f 93       	push	r24
     3a0:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <curX>
     3a4:	8f 93       	push	r24
     3a6:	87 e8       	ldi	r24, 0x87	; 135
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	9f 93       	push	r25
     3ac:	8f 93       	push	r24
     3ae:	3f d6       	rcall	.+3198   	; 0x102e <printf>
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	93 ed       	ldi	r25, 0xD3	; 211
     3b4:	20 e3       	ldi	r18, 0x30	; 48
     3b6:	81 50       	subi	r24, 0x01	; 1
     3b8:	90 40       	sbci	r25, 0x00	; 0
     3ba:	20 40       	sbci	r18, 0x00	; 0
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <testmode+0x2e0>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <testmode+0x2ea>
     3c0:	00 00       	nop
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	99 ce       	rjmp	.-718    	; 0x102 <testmode+0x2c>
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	e8 16       	cp	r14, r24
     3d4:	f1 04       	cpc	r15, r1
     3d6:	09 f0       	breq	.+2      	; 0x3da <testmode+0x304>
			_delay_ms(1000);
		}
		else if(testModeSelect == 3){
     3d8:	94 ce       	rjmp	.-728    	; 0x102 <testmode+0x2c>
     3da:	49 85       	ldd	r20, Y+9	; 0x09
     3dc:	5a 85       	ldd	r21, Y+10	; 0x0a
     3de:	6f 81       	ldd	r22, Y+7	; 0x07
     3e0:	78 85       	ldd	r23, Y+8	; 0x08
			MoveArm(hand,wrist,elbow);
     3e2:	8d 81       	ldd	r24, Y+5	; 0x05
     3e4:	9e 81       	ldd	r25, Y+6	; 0x06
     3e6:	ec d2       	rcall	.+1496   	; 0x9c0 <MoveArm>
     3e8:	8c ce       	rjmp	.-744    	; 0x102 <testmode+0x2c>
     3ea:	2a 96       	adiw	r28, 0x0a	; 10
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
		}
		
	}
}
     3f4:	cd bf       	out	0x3d, r28	; 61
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	df 90       	pop	r13
     404:	cf 90       	pop	r12
     406:	bf 90       	pop	r11
     408:	af 90       	pop	r10
     40a:	9f 90       	pop	r9
     40c:	8f 90       	pop	r8
     40e:	08 95       	ret

00000410 <manualmode>:
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	50 d3       	rcall	.+1696   	; 0xaba <set_V_Disable>

void manualmode(void) {
	int wronginput=0;
	
	set_V_Disable();//PORTC0 low : disable vertical motor
	set_H_Disable();//PORTC4 low : disable horizontal motor
     41a:	5f d3       	rcall	.+1726   	; 0xada <set_H_Disable>
	freePoseArm();
     41c:	03 d3       	rcall	.+1542   	; 0xa24 <freePoseArm>
     41e:	89 ea       	ldi	r24, 0xA9	; 169
	
	while(1) {
		printf("Moveup(1), Movedown(2), gotoMainMenu(q)?");
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	9f 93       	push	r25
     424:	8f 93       	push	r24
     426:	03 d6       	rcall	.+3078   	; 0x102e <printf>
     428:	80 e0       	ldi	r24, 0x00	; 0
		scanf("%s", uartBuffer);
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	83 ec       	ldi	r24, 0xC3	; 195
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	9f 93       	push	r25
     436:	8f 93       	push	r24
     438:	42 d6       	rcall	.+3204   	; 0x10be <scanf>
     43a:	66 ec       	ldi	r22, 0xC6	; 198
		
		if(strcasecmp(uartBuffer, "1")==0) {
     43c:	71 e0       	ldi	r23, 0x01	; 1
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	e2 d5       	rcall	.+3012   	; 0x1008 <strcasecmp>
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	89 2b       	or	r24, r25
     452:	31 f5       	brne	.+76     	; 0x4a0 <manualmode+0x90>
     454:	82 ed       	ldi	r24, 0xD2	; 210
			printf("ready?(any word) : ");
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	e8 d5       	rcall	.+3024   	; 0x102e <printf>
     45e:	00 e0       	ldi	r16, 0x00	; 0
     460:	11 e0       	ldi	r17, 0x01	; 1
			scanf("%s",uartBuffer);
     462:	1f 93       	push	r17
     464:	0f 93       	push	r16
     466:	c3 ec       	ldi	r28, 0xC3	; 195
     468:	d1 e0       	ldi	r29, 0x01	; 1
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
			set_V_Enable();
     46e:	27 d6       	rcall	.+3150   	; 0x10be <scanf>
     470:	20 d3       	rcall	.+1600   	; 0xab2 <set_V_Enable>
			set_V_Up();
     472:	27 d3       	rcall	.+1614   	; 0xac2 <set_V_Up>
     474:	3e d3       	rcall	.+1660   	; 0xaf2 <V_MoveStart>
			V_MoveStart();
     476:	86 ee       	ldi	r24, 0xE6	; 230
			printf("stop(any word) : ");
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	9f 93       	push	r25
     47c:	8f 93       	push	r24
     47e:	d7 d5       	rcall	.+2990   	; 0x102e <printf>
     480:	1f 93       	push	r17
			scanf("%s",uartBuffer);
     482:	0f 93       	push	r16
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	1a d6       	rcall	.+3124   	; 0x10be <scanf>
     48a:	3a d3       	rcall	.+1652   	; 0xb00 <V_MoveStop>
     48c:	16 d3       	rcall	.+1580   	; 0xaba <set_V_Disable>
			V_MoveStop();
     48e:	8d b7       	in	r24, 0x3d	; 61
     490:	9e b7       	in	r25, 0x3e	; 62
			set_V_Disable();
     492:	0c 96       	adiw	r24, 0x0c	; 12
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	9e bf       	out	0x3e, r25	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	8d bf       	out	0x3d, r24	; 61
     49e:	bf cf       	rjmp	.-130    	; 0x41e <manualmode+0xe>
     4a0:	68 ec       	ldi	r22, 0xC8	; 200
     4a2:	71 e0       	ldi	r23, 0x01	; 1
		}
		else if (strcasecmp(uartBuffer, "2")==0){
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	af d5       	rcall	.+2910   	; 0x1008 <strcasecmp>
     4aa:	89 2b       	or	r24, r25
     4ac:	31 f5       	brne	.+76     	; 0x4fa <manualmode+0xea>
     4ae:	82 ed       	ldi	r24, 0xD2	; 210
			printf("ready?(any word) : ");
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	9f 93       	push	r25
     4b4:	8f 93       	push	r24
     4b6:	bb d5       	rcall	.+2934   	; 0x102e <printf>
     4b8:	00 e0       	ldi	r16, 0x00	; 0
			scanf("%s",uartBuffer);
     4ba:	11 e0       	ldi	r17, 0x01	; 1
     4bc:	1f 93       	push	r17
     4be:	0f 93       	push	r16
     4c0:	c3 ec       	ldi	r28, 0xC3	; 195
     4c2:	d1 e0       	ldi	r29, 0x01	; 1
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
			set_V_Enable();
     4c8:	fa d5       	rcall	.+3060   	; 0x10be <scanf>
     4ca:	f3 d2       	rcall	.+1510   	; 0xab2 <set_V_Enable>
			set_V_Down();
     4cc:	fe d2       	rcall	.+1532   	; 0xaca <set_V_Down>
     4ce:	11 d3       	rcall	.+1570   	; 0xaf2 <V_MoveStart>
			V_MoveStart();
     4d0:	86 ee       	ldi	r24, 0xE6	; 230
     4d2:	92 e0       	ldi	r25, 0x02	; 2
			printf("stop(any word) : ");
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	aa d5       	rcall	.+2900   	; 0x102e <printf>
     4da:	1f 93       	push	r17
     4dc:	0f 93       	push	r16
			scanf("%s",uartBuffer);
     4de:	df 93       	push	r29
     4e0:	cf 93       	push	r28
     4e2:	ed d5       	rcall	.+3034   	; 0x10be <scanf>
     4e4:	0d d3       	rcall	.+1562   	; 0xb00 <V_MoveStop>
     4e6:	e9 d2       	rcall	.+1490   	; 0xaba <set_V_Disable>
			V_MoveStop();
     4e8:	8d b7       	in	r24, 0x3d	; 61
			set_V_Disable();
     4ea:	9e b7       	in	r25, 0x3e	; 62
     4ec:	0c 96       	adiw	r24, 0x0c	; 12
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	9e bf       	out	0x3e, r25	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	8d bf       	out	0x3d, r24	; 61
     4f8:	92 cf       	rjmp	.-220    	; 0x41e <manualmode+0xe>
     4fa:	6c ec       	ldi	r22, 0xCC	; 204
     4fc:	71 e0       	ldi	r23, 0x01	; 1
     4fe:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (strcasecmp(uartBuffer, "q")==0)
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	82 d5       	rcall	.+2820   	; 0x1008 <strcasecmp>
     504:	89 2b       	or	r24, r25
     506:	21 f0       	breq	.+8      	; 0x510 <manualmode+0x100>
     508:	88 ef       	ldi	r24, 0xF8	; 248
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	a8 d5       	rcall	.+2896   	; 0x105e <puts>
     50e:	87 cf       	rjmp	.-242    	; 0x41e <manualmode+0xe>
		break;
		else
		printf("input '1', '2' or 'q'\r\n");
     510:	78 d2       	rcall	.+1264   	; 0xa02 <basePoseArm>
     512:	cf d2       	rcall	.+1438   	; 0xab2 <set_V_Enable>
     514:	de d2       	rcall	.+1468   	; 0xad2 <set_H_Enable>
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
	}
	
	basePoseArm();
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
	
	set_V_Enable();//PORTC0 low : enable vertical motor
     51e:	08 95       	ret

00000520 <setHereas00>:
     520:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <curX+0x1>
	set_H_Enable();//PORTC4 low : enable horizontal motor
     524:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <curX>
}
     528:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <curY+0x1>
     52c:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <curY>

void setHereas00(void) {
	curX = 0; curY = 0;
     530:	08 95       	ret

00000532 <automode>:
		}
		
	}
}

void automode(void) {
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	00 d0       	rcall	.+0      	; 0x53c <automode+0xa>
     53c:	00 d0       	rcall	.+0      	; 0x53e <automode+0xc>
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
	unsigned int column;
	
	int wronginput=0;
	int quit = 0;
	
	setHereas00();
     542:	ee df       	rcall	.-36     	; 0x520 <setHereas00>
	
	while(1) {
		do{
			quit = 0;
			printf("n");
     544:	8e e6       	ldi	r24, 0x6E	; 110
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	85 d5       	rcall	.+2826   	; 0x1054 <putchar>
			printf("\r\n");
     54a:	80 ee       	ldi	r24, 0xE0	; 224
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	87 d5       	rcall	.+2830   	; 0x105e <puts>
			printf("(forUser)@@quit for row == 4@@\r\n");
     550:	8f e0       	ldi	r24, 0x0F	; 15
     552:	93 e0       	ldi	r25, 0x03	; 3
     554:	84 d5       	rcall	.+2824   	; 0x105e <puts>
     556:	8f e2       	ldi	r24, 0x2F	; 47
			printf("(forUser)waiting for [row,column] : ");
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	9f 93       	push	r25
     55c:	8f 93       	push	r24
     55e:	67 d5       	rcall	.+2766   	; 0x102e <printf>
     560:	ce 01       	movw	r24, r28
			scanf("%u,%u", &row, &column);
     562:	03 96       	adiw	r24, 0x03	; 3
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	02 97       	sbiw	r24, 0x02	; 2
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	84 e5       	ldi	r24, 0x54	; 84
     570:	93 e0       	ldi	r25, 0x03	; 3
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	a3 d5       	rcall	.+2886   	; 0x10be <scanf>
     578:	0f b6       	in	r0, 0x3f	; 63
			
			while(row>=5||column>=9) {
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	24 c0       	rjmp	.+72     	; 0x5cc <automode+0x9a>
				printf("r");
     584:	82 e7       	ldi	r24, 0x72	; 114
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	65 d5       	rcall	.+2762   	; 0x1054 <putchar>
     58a:	80 ee       	ldi	r24, 0xE0	; 224
				printf("\r\n");
     58c:	93 e0       	ldi	r25, 0x03	; 3
     58e:	67 d5       	rcall	.+2766   	; 0x105e <puts>
     590:	8a e5       	ldi	r24, 0x5A	; 90
				printf("(forUser)worng input");
     592:	93 e0       	ldi	r25, 0x03	; 3
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	4a d5       	rcall	.+2708   	; 0x102e <printf>
     59a:	8f e0       	ldi	r24, 0x0F	; 15
				printf("(forUser)@@quit for row == 4@@\r\n");
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	5f d5       	rcall	.+2750   	; 0x105e <puts>
     5a0:	8f e2       	ldi	r24, 0x2F	; 47
     5a2:	93 e0       	ldi	r25, 0x03	; 3
				printf("(forUser)waiting for [row,column] : ");
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	42 d5       	rcall	.+2692   	; 0x102e <printf>
     5aa:	ce 01       	movw	r24, r28
     5ac:	03 96       	adiw	r24, 0x03	; 3
     5ae:	9f 93       	push	r25
				scanf("%u,%u", &row, &column);
     5b0:	8f 93       	push	r24
     5b2:	02 97       	sbiw	r24, 0x02	; 2
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	84 e5       	ldi	r24, 0x54	; 84
     5ba:	93 e0       	ldi	r25, 0x03	; 3
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	7e d5       	rcall	.+2812   	; 0x10be <scanf>
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	9a 81       	ldd	r25, Y+2	; 0x02
     5d0:	05 97       	sbiw	r24, 0x05	; 5
			printf("\r\n");
			printf("(forUser)@@quit for row == 4@@\r\n");
			printf("(forUser)waiting for [row,column] : ");
			scanf("%u,%u", &row, &column);
			
			while(row>=5||column>=9) {
     5d2:	c0 f6       	brcc	.-80     	; 0x584 <automode+0x52>
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	9c 81       	ldd	r25, Y+4	; 0x04
     5d8:	09 97       	sbiw	r24, 0x09	; 9
     5da:	a0 f6       	brcc	.-88     	; 0x584 <automode+0x52>
     5dc:	00 e0       	ldi	r16, 0x00	; 0
     5de:	10 e0       	ldi	r17, 0x00	; 0
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
				scanf("%u,%u", &row, &column);
			}
			
			do {
				wronginput = 0;
				if(row==4) {
     5e4:	84 30       	cpi	r24, 0x04	; 4
     5e6:	91 05       	cpc	r25, r1
     5e8:	51 f4       	brne	.+20     	; 0x5fe <automode+0xcc>
     5ea:	8f e6       	ldi	r24, 0x6F	; 111
     5ec:	93 e0       	ldi	r25, 0x03	; 3
					printf("(forUser)quit - ");
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	1d d5       	rcall	.+2618   	; 0x102e <printf>
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	01 e0       	ldi	r16, 0x01	; 1
     5fa:	10 e0       	ldi	r17, 0x00	; 0
     5fc:	11 c0       	rjmp	.+34     	; 0x620 <automode+0xee>
					quit = 1;
     5fe:	2c 81       	ldd	r18, Y+4	; 0x04
     600:	2f 93       	push	r18
					} else {
					printf("(forUser)[%u,%u] - ",row, column);
     602:	2b 81       	ldd	r18, Y+3	; 0x03
     604:	2f 93       	push	r18
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	80 e8       	ldi	r24, 0x80	; 128
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0d d5       	rcall	.+2586   	; 0x102e <printf>
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	84 e9       	ldi	r24, 0x94	; 148
     622:	93 e0       	ldi	r25, 0x03	; 3
				}
				
				printf("Do you want to proceed?[y/n] : ");
     624:	9f 93       	push	r25
     626:	8f 93       	push	r24
     628:	02 d5       	rcall	.+2564   	; 0x102e <printf>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	91 e0       	ldi	r25, 0x01	; 1
				scanf("%s", uartBuffer);
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	83 ec       	ldi	r24, 0xC3	; 195
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	9f 93       	push	r25
     638:	8f 93       	push	r24
     63a:	41 d5       	rcall	.+2690   	; 0x10be <scanf>
     63c:	6c e6       	ldi	r22, 0x6C	; 108
     63e:	72 e0       	ldi	r23, 0x02	; 2
     640:	80 e0       	ldi	r24, 0x00	; 0
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	e1 d4       	rcall	.+2498   	; 0x1008 <strcasecmp>
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	89 2b       	or	r24, r25
     654:	69 f0       	breq	.+26     	; 0x670 <automode+0x13e>
     656:	6e e6       	ldi	r22, 0x6E	; 110
     658:	72 e0       	ldi	r23, 0x02	; 2
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	d4 d4       	rcall	.+2472   	; 0x1008 <strcasecmp>
     660:	89 2b       	or	r24, r25
     662:	49 f0       	breq	.+18     	; 0x676 <automode+0x144>
     664:	80 e7       	ldi	r24, 0x70	; 112
     666:	92 e0       	ldi	r25, 0x02	; 2
					printf("input 'y' or 'n' only\r\n");
     668:	fa d4       	rcall	.+2548   	; 0x105e <puts>
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
					wronginput = 1;
     66e:	05 c0       	rjmp	.+10     	; 0x67a <automode+0x148>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
				printf("(forUser)waiting for [row,column] : ");
				scanf("%u,%u", &row, &column);
			}
			
			do {
				wronginput = 0;
     674:	02 c0       	rjmp	.+4      	; 0x67a <automode+0x148>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	89 2b       	or	r24, r25
     67c:	09 f0       	breq	.+2      	; 0x680 <automode+0x14e>
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
					printf("input 'y' or 'n' only\r\n");
					wronginput = 1;
				}
			} while(wronginput);
     67e:	b0 cf       	rjmp	.-160    	; 0x5e0 <automode+0xae>
     680:	80 ee       	ldi	r24, 0xE0	; 224
     682:	93 e0       	ldi	r25, 0x03	; 3
			printf("\r\n");
     684:	ec d4       	rcall	.+2520   	; 0x105e <puts>
     686:	6c e6       	ldi	r22, 0x6C	; 108
     688:	72 e0       	ldi	r23, 0x02	; 2
     68a:	80 e0       	ldi	r24, 0x00	; 0
		} while(strcasecmp(uartBuffer, "y"));
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	bc d4       	rcall	.+2424   	; 0x1008 <strcasecmp>
     690:	89 2b       	or	r24, r25
     692:	09 f0       	breq	.+2      	; 0x696 <automode+0x164>
     694:	57 cf       	rjmp	.-338    	; 0x544 <automode+0x12>
     696:	01 30       	cpi	r16, 0x01	; 1
     698:	11 05       	cpc	r17, r1
     69a:	09 f4       	brne	.+2      	; 0x69e <automode+0x16c>
     69c:	88 c1       	rjmp	.+784    	; 0x9ae <automode+0x47c>
		if(quit == 1) break;
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	fc 01       	movw	r30, r24
     6a4:	ee 0f       	add	r30, r30
		
		//시작 준비------------------------------------------------
		printf("location : [%u,%u]\r\n", XlocArr[row][column],  YlocArr[row]);
     6a6:	ff 1f       	adc	r31, r31
     6a8:	ec 5e       	subi	r30, 0xEC	; 236
     6aa:	fe 4f       	sbci	r31, 0xFE	; 254
     6ac:	21 81       	ldd	r18, Z+1	; 0x01
     6ae:	2f 93       	push	r18
     6b0:	20 81       	ld	r18, Z
     6b2:	2f 93       	push	r18
     6b4:	fc 01       	movw	r30, r24
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	e8 0f       	add	r30, r24
     6c4:	f9 1f       	adc	r31, r25
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ca:	e8 0f       	add	r30, r24
     6cc:	f9 1f       	adc	r31, r25
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	e4 5e       	subi	r30, 0xE4	; 228
     6d4:	fe 4f       	sbci	r31, 0xFE	; 254
     6d6:	81 81       	ldd	r24, Z+1	; 0x01
     6d8:	8f 93       	push	r24
     6da:	80 81       	ld	r24, Z
     6dc:	8f 93       	push	r24
     6de:	84 eb       	ldi	r24, 0xB4	; 180
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	a3 d4       	rcall	.+2374   	; 0x102e <printf>
     6e8:	8c d1       	rcall	.+792    	; 0xa02 <basePoseArm>
		
		basePoseArm();
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
     6ec:	29 e6       	ldi	r18, 0x69	; 105
     6ee:	88 e1       	ldi	r24, 0x18	; 24
     6f0:	91 50       	subi	r25, 0x01	; 1
     6f2:	20 40       	sbci	r18, 0x00	; 0
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	e1 f7       	brne	.-8      	; 0x6f0 <automode+0x1be>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <automode+0x1c8>
     6fa:	00 00       	nop
		_delay_ms(500);
		//---------------------------------------------------------
		
		//음료수 집음-----------------------------------------------
		MoveXY_absolute(140, 210);
     6fc:	62 ed       	ldi	r22, 0xD2	; 210
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	8c e8       	ldi	r24, 0x8C	; 140
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	6b d2       	rcall	.+1238   	; 0xbdc <MoveXY_absolute>
     706:	cf d2       	rcall	.+1438   	; 0xca6 <pauseUntilStop>
		pauseUntilStop();
     708:	9f ef       	ldi	r25, 0xFF	; 255
     70a:	29 e6       	ldi	r18, 0x69	; 105
     70c:	88 e1       	ldi	r24, 0x18	; 24
     70e:	91 50       	subi	r25, 0x01	; 1
     710:	20 40       	sbci	r18, 0x00	; 0
     712:	80 40       	sbci	r24, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <automode+0x1dc>
     716:	00 c0       	rjmp	.+0      	; 0x718 <automode+0x1e6>
     718:	00 00       	nop
     71a:	a8 d1       	rcall	.+848    	; 0xa6c <openHand>
		_delay_ms(500);
		
		openHand();
     71c:	62 ed       	ldi	r22, 0xD2	; 210
     71e:	70 e0       	ldi	r23, 0x00	; 0
		
		MoveXY_absolute(0, 210);
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	5b d2       	rcall	.+1206   	; 0xbdc <MoveXY_absolute>
     726:	bf d2       	rcall	.+1406   	; 0xca6 <pauseUntilStop>
		pauseUntilStop();
     728:	9f ef       	ldi	r25, 0xFF	; 255
     72a:	23 ec       	ldi	r18, 0xC3	; 195
     72c:	89 e0       	ldi	r24, 0x09	; 9
     72e:	91 50       	subi	r25, 0x01	; 1
     730:	20 40       	sbci	r18, 0x00	; 0
     732:	80 40       	sbci	r24, 0x00	; 0
     734:	e1 f7       	brne	.-8      	; 0x72e <automode+0x1fc>
     736:	00 c0       	rjmp	.+0      	; 0x738 <automode+0x206>
     738:	00 00       	nop
     73a:	8a d1       	rcall	.+788    	; 0xa50 <catchHand_thin>
     73c:	9f ef       	ldi	r25, 0xFF	; 255
		_delay_ms(200);
		
		catchHand_thin();
     73e:	23 ec       	ldi	r18, 0xC3	; 195
     740:	89 e0       	ldi	r24, 0x09	; 9
     742:	91 50       	subi	r25, 0x01	; 1
     744:	20 40       	sbci	r18, 0x00	; 0
     746:	80 40       	sbci	r24, 0x00	; 0
     748:	e1 f7       	brne	.-8      	; 0x742 <automode+0x210>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <automode+0x21a>
     74c:	00 00       	nop
     74e:	68 e2       	ldi	r22, 0x28	; 40
		_delay_ms(200);
		
		MoveXY_relative(0, 40);
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	e9 d1       	rcall	.+978    	; 0xb2a <MoveXY_relative>
     758:	a6 d2       	rcall	.+1356   	; 0xca6 <pauseUntilStop>
     75a:	9f ef       	ldi	r25, 0xFF	; 255
		pauseUntilStop();
     75c:	21 ee       	ldi	r18, 0xE1	; 225
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	91 50       	subi	r25, 0x01	; 1
     762:	20 40       	sbci	r18, 0x00	; 0
     764:	80 40       	sbci	r24, 0x00	; 0
     766:	e1 f7       	brne	.-8      	; 0x760 <automode+0x22e>
     768:	00 c0       	rjmp	.+0      	; 0x76a <automode+0x238>
     76a:	00 00       	nop
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	84 e6       	ldi	r24, 0x64	; 100
		_delay_ms(100);
		MoveXY_relative(100, 0);
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	da d1       	rcall	.+948    	; 0xb2a <MoveXY_relative>
     776:	97 d2       	rcall	.+1326   	; 0xca6 <pauseUntilStop>
     778:	9f ef       	ldi	r25, 0xFF	; 255
     77a:	21 ee       	ldi	r18, 0xE1	; 225
     77c:	84 e0       	ldi	r24, 0x04	; 4
		pauseUntilStop();
     77e:	91 50       	subi	r25, 0x01	; 1
     780:	20 40       	sbci	r18, 0x00	; 0
     782:	80 40       	sbci	r24, 0x00	; 0
     784:	e1 f7       	brne	.-8      	; 0x77e <automode+0x24c>
     786:	00 c0       	rjmp	.+0      	; 0x788 <automode+0x256>
     788:	00 00       	nop
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	3a 81       	ldd	r19, Y+2	; 0x02
     78e:	f9 01       	movw	r30, r18
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
		_delay_ms(100);
		//-----------------------------------------------------------
		
		//음료수 집은 후 지정된 위치로 이동--------------------
		if(XlocArr[row][column] <= 250) {
     794:	ee 0f       	add	r30, r30
     796:	ff 1f       	adc	r31, r31
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	e2 0f       	add	r30, r18
     79e:	f3 1f       	adc	r31, r19
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	9c 81       	ldd	r25, Y+4	; 0x04
     7a4:	e8 0f       	add	r30, r24
     7a6:	f9 1f       	adc	r31, r25
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	e4 5e       	subi	r30, 0xE4	; 228
     7ae:	fe 4f       	sbci	r31, 0xFE	; 254
     7b0:	80 81       	ld	r24, Z
     7b2:	91 81       	ldd	r25, Z+1	; 0x01
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	8b 3f       	cpi	r24, 0xFB	; 251
     7c2:	91 05       	cpc	r25, r1
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <automode+0x296>
     7c6:	50 c0       	rjmp	.+160    	; 0x868 <automode+0x336>
     7c8:	22 0f       	add	r18, r18
     7ca:	33 1f       	adc	r19, r19
			MoveXY_absolute(250, YlocArr[row]);
     7cc:	f9 01       	movw	r30, r18
     7ce:	ec 5e       	subi	r30, 0xEC	; 236
     7d0:	fe 4f       	sbci	r31, 0xFE	; 254
     7d2:	60 81       	ld	r22, Z
     7d4:	71 81       	ldd	r23, Z+1	; 0x01
     7d6:	8a ef       	ldi	r24, 0xFA	; 250
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	00 d2       	rcall	.+1024   	; 0xbdc <MoveXY_absolute>
     7dc:	64 d2       	rcall	.+1224   	; 0xca6 <pauseUntilStop>
     7de:	9f ef       	ldi	r25, 0xFF	; 255
     7e0:	23 ec       	ldi	r18, 0xC3	; 195
			pauseUntilStop();
     7e2:	89 e0       	ldi	r24, 0x09	; 9
     7e4:	91 50       	subi	r25, 0x01	; 1
     7e6:	20 40       	sbci	r18, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <automode+0x2b2>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <automode+0x2bc>
     7ee:	00 00       	nop
     7f0:	44 d1       	rcall	.+648    	; 0xa7a <CWturnWrist>
     7f2:	9f ef       	ldi	r25, 0xFF	; 255
     7f4:	29 e6       	ldi	r18, 0x69	; 105
     7f6:	88 e1       	ldi	r24, 0x18	; 24
			_delay_ms(200);
			
			CWturnWrist();
     7f8:	91 50       	subi	r25, 0x01	; 1
     7fa:	20 40       	sbci	r18, 0x00	; 0
     7fc:	80 40       	sbci	r24, 0x00	; 0
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <automode+0x2c6>
     800:	00 c0       	rjmp	.+0      	; 0x802 <automode+0x2d0>
     802:	00 00       	nop
     804:	48 d1       	rcall	.+656    	; 0xa96 <innerTurnElbow>
     806:	9f ef       	ldi	r25, 0xFF	; 255
     808:	29 e6       	ldi	r18, 0x69	; 105
     80a:	88 e1       	ldi	r24, 0x18	; 24
     80c:	91 50       	subi	r25, 0x01	; 1
			_delay_ms(500);
			innerTurnElbow();
     80e:	20 40       	sbci	r18, 0x00	; 0
     810:	80 40       	sbci	r24, 0x00	; 0
     812:	e1 f7       	brne	.-8      	; 0x80c <automode+0x2da>
     814:	00 c0       	rjmp	.+0      	; 0x816 <automode+0x2e4>
     816:	00 00       	nop
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	9a 81       	ldd	r25, Y+2	; 0x02
     81c:	fc 01       	movw	r30, r24
     81e:	ee 0f       	add	r30, r30
			_delay_ms(500);
			
			
			MoveXY_absolute(XlocArr[row][column], YlocArr[row]);
     820:	ff 1f       	adc	r31, r31
     822:	ec 5e       	subi	r30, 0xEC	; 236
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	60 81       	ld	r22, Z
     828:	71 81       	ldd	r23, Z+1	; 0x01
     82a:	fc 01       	movw	r30, r24
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	e8 0f       	add	r30, r24
     83a:	f9 1f       	adc	r31, r25
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	9c 81       	ldd	r25, Y+4	; 0x04
     840:	e8 0f       	add	r30, r24
     842:	f9 1f       	adc	r31, r25
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	e4 5e       	subi	r30, 0xE4	; 228
     84a:	fe 4f       	sbci	r31, 0xFE	; 254
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	c5 d1       	rcall	.+906    	; 0xbdc <MoveXY_absolute>
     852:	29 d2       	rcall	.+1106   	; 0xca6 <pauseUntilStop>
     854:	9f ef       	ldi	r25, 0xFF	; 255
			pauseUntilStop();
     856:	23 ec       	ldi	r18, 0xC3	; 195
     858:	89 e0       	ldi	r24, 0x09	; 9
     85a:	91 50       	subi	r25, 0x01	; 1
     85c:	20 40       	sbci	r18, 0x00	; 0
     85e:	80 40       	sbci	r24, 0x00	; 0
     860:	e1 f7       	brne	.-8      	; 0x85a <automode+0x328>
     862:	00 c0       	rjmp	.+0      	; 0x864 <automode+0x332>
     864:	00 00       	nop
     866:	26 c0       	rjmp	.+76     	; 0x8b4 <automode+0x382>
     868:	22 0f       	add	r18, r18
			_delay_ms(200);
			} else {
			MoveXY_absolute(XlocArr[row][column], YlocArr[row]);
     86a:	33 1f       	adc	r19, r19
     86c:	f9 01       	movw	r30, r18
     86e:	ec 5e       	subi	r30, 0xEC	; 236
     870:	fe 4f       	sbci	r31, 0xFE	; 254
     872:	60 81       	ld	r22, Z
     874:	71 81       	ldd	r23, Z+1	; 0x01
     876:	b2 d1       	rcall	.+868    	; 0xbdc <MoveXY_absolute>
     878:	16 d2       	rcall	.+1068   	; 0xca6 <pauseUntilStop>
     87a:	9f ef       	ldi	r25, 0xFF	; 255
			pauseUntilStop();
     87c:	23 ec       	ldi	r18, 0xC3	; 195
     87e:	89 e0       	ldi	r24, 0x09	; 9
     880:	91 50       	subi	r25, 0x01	; 1
     882:	20 40       	sbci	r18, 0x00	; 0
     884:	80 40       	sbci	r24, 0x00	; 0
     886:	e1 f7       	brne	.-8      	; 0x880 <automode+0x34e>
     888:	00 c0       	rjmp	.+0      	; 0x88a <automode+0x358>
     88a:	00 00       	nop
     88c:	f6 d0       	rcall	.+492    	; 0xa7a <CWturnWrist>
			_delay_ms(200);
			
			CWturnWrist();
     88e:	9f ef       	ldi	r25, 0xFF	; 255
     890:	29 e6       	ldi	r18, 0x69	; 105
     892:	88 e1       	ldi	r24, 0x18	; 24
     894:	91 50       	subi	r25, 0x01	; 1
     896:	20 40       	sbci	r18, 0x00	; 0
     898:	80 40       	sbci	r24, 0x00	; 0
     89a:	e1 f7       	brne	.-8      	; 0x894 <automode+0x362>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <automode+0x36c>
     89e:	00 00       	nop
     8a0:	fa d0       	rcall	.+500    	; 0xa96 <innerTurnElbow>
			_delay_ms(500);
			innerTurnElbow();
     8a2:	9f ef       	ldi	r25, 0xFF	; 255
     8a4:	29 e6       	ldi	r18, 0x69	; 105
     8a6:	88 e1       	ldi	r24, 0x18	; 24
     8a8:	91 50       	subi	r25, 0x01	; 1
     8aa:	20 40       	sbci	r18, 0x00	; 0
     8ac:	80 40       	sbci	r24, 0x00	; 0
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <automode+0x376>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <automode+0x380>
     8b2:	00 00       	nop
			_delay_ms(500);
		}
		//---------------------------------------------------------
		
		//음료수 놓음---------------------------------------------
		holdHand_thin();
     8b4:	d4 d0       	rcall	.+424    	; 0xa5e <holdHand_thin>
     8b6:	9f ef       	ldi	r25, 0xFF	; 255
     8b8:	21 ee       	ldi	r18, 0xE1	; 225
     8ba:	84 e0       	ldi	r24, 0x04	; 4
     8bc:	91 50       	subi	r25, 0x01	; 1
     8be:	20 40       	sbci	r18, 0x00	; 0
     8c0:	80 40       	sbci	r24, 0x00	; 0
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <automode+0x38a>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <automode+0x394>
     8c6:	00 00       	nop
     8c8:	6e ec       	ldi	r22, 0xCE	; 206
		_delay_ms(100);
		MoveXY_relative(0, -50);
     8ca:	7f ef       	ldi	r23, 0xFF	; 255
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	2c d1       	rcall	.+600    	; 0xb2a <MoveXY_relative>
     8d2:	e9 d1       	rcall	.+978    	; 0xca6 <pauseUntilStop>
     8d4:	9f ef       	ldi	r25, 0xFF	; 255
		pauseUntilStop();
     8d6:	23 ec       	ldi	r18, 0xC3	; 195
     8d8:	89 e0       	ldi	r24, 0x09	; 9
     8da:	91 50       	subi	r25, 0x01	; 1
     8dc:	20 40       	sbci	r18, 0x00	; 0
     8de:	80 40       	sbci	r24, 0x00	; 0
     8e0:	e1 f7       	brne	.-8      	; 0x8da <automode+0x3a8>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <automode+0x3b2>
     8e4:	00 00       	nop
     8e6:	c2 d0       	rcall	.+388    	; 0xa6c <openHand>
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	2d e3       	ldi	r18, 0x3D	; 61
		_delay_ms(200);
		
		openHand();
     8ec:	89 e4       	ldi	r24, 0x49	; 73
     8ee:	91 50       	subi	r25, 0x01	; 1
     8f0:	20 40       	sbci	r18, 0x00	; 0
     8f2:	80 40       	sbci	r24, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <automode+0x3bc>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <automode+0x3c6>
     8f8:	00 00       	nop
     8fa:	62 e3       	ldi	r22, 0x32	; 50
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1500);
		
		MoveXY_relative(0, 50);
     902:	13 d1       	rcall	.+550    	; 0xb2a <MoveXY_relative>
     904:	d0 d1       	rcall	.+928    	; 0xca6 <pauseUntilStop>
     906:	9f ef       	ldi	r25, 0xFF	; 255
     908:	23 ec       	ldi	r18, 0xC3	; 195
		pauseUntilStop();
     90a:	89 e0       	ldi	r24, 0x09	; 9
     90c:	91 50       	subi	r25, 0x01	; 1
     90e:	20 40       	sbci	r18, 0x00	; 0
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	e1 f7       	brne	.-8      	; 0x90c <automode+0x3da>
     914:	00 c0       	rjmp	.+0      	; 0x916 <automode+0x3e4>
     916:	00 00       	nop
     918:	29 81       	ldd	r18, Y+1	; 0x01
     91a:	3a 81       	ldd	r19, Y+2	; 0x02
     91c:	f9 01       	movw	r30, r18
		_delay_ms(200);
		//----------------------------------------------------------
		
		//팔 뺌-----------------------------------------------------
		if(XlocArr[row][column] <= 250) {
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	e2 0f       	add	r30, r18
     92c:	f3 1f       	adc	r31, r19
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	9c 81       	ldd	r25, Y+4	; 0x04
     932:	e8 0f       	add	r30, r24
     934:	f9 1f       	adc	r31, r25
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	e4 5e       	subi	r30, 0xE4	; 228
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	80 81       	ld	r24, Z
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	8b 3f       	cpi	r24, 0xFB	; 251
     944:	91 05       	cpc	r25, r1
     946:	a4 f4       	brge	.+40     	; 0x970 <automode+0x43e>
     948:	22 0f       	add	r18, r18
			MoveXY_absolute(250, YlocArr[row]);
     94a:	33 1f       	adc	r19, r19
     94c:	f9 01       	movw	r30, r18
     94e:	ec 5e       	subi	r30, 0xEC	; 236
     950:	fe 4f       	sbci	r31, 0xFE	; 254
     952:	60 81       	ld	r22, Z
     954:	71 81       	ldd	r23, Z+1	; 0x01
     956:	8a ef       	ldi	r24, 0xFA	; 250
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	40 d1       	rcall	.+640    	; 0xbdc <MoveXY_absolute>
     95c:	a4 d1       	rcall	.+840    	; 0xca6 <pauseUntilStop>
     95e:	9f ef       	ldi	r25, 0xFF	; 255
			pauseUntilStop();
     960:	23 ec       	ldi	r18, 0xC3	; 195
     962:	89 e0       	ldi	r24, 0x09	; 9
     964:	91 50       	subi	r25, 0x01	; 1
     966:	20 40       	sbci	r18, 0x00	; 0
     968:	80 40       	sbci	r24, 0x00	; 0
     96a:	e1 f7       	brne	.-8      	; 0x964 <automode+0x432>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <automode+0x43c>
     96e:	00 00       	nop
     970:	68 d0       	rcall	.+208    	; 0xa42 <closeHand>
     972:	9f ef       	ldi	r25, 0xFF	; 255
     974:	23 ec       	ldi	r18, 0xC3	; 195
			_delay_ms(200);
		}
		
		closeHand();
     976:	89 e0       	ldi	r24, 0x09	; 9
     978:	91 50       	subi	r25, 0x01	; 1
     97a:	20 40       	sbci	r18, 0x00	; 0
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <automode+0x446>
     980:	00 c0       	rjmp	.+0      	; 0x982 <automode+0x450>
     982:	00 00       	nop
     984:	8f d0       	rcall	.+286    	; 0xaa4 <normalTurnElbow>
     986:	9f ef       	ldi	r25, 0xFF	; 255
     988:	29 e6       	ldi	r18, 0x69	; 105
     98a:	88 e1       	ldi	r24, 0x18	; 24
		_delay_ms(200);
		
		normalTurnElbow();
     98c:	91 50       	subi	r25, 0x01	; 1
     98e:	20 40       	sbci	r18, 0x00	; 0
     990:	80 40       	sbci	r24, 0x00	; 0
     992:	e1 f7       	brne	.-8      	; 0x98c <automode+0x45a>
     994:	00 c0       	rjmp	.+0      	; 0x996 <automode+0x464>
     996:	00 00       	nop
     998:	77 d0       	rcall	.+238    	; 0xa88 <normalWrist>
     99a:	9f ef       	ldi	r25, 0xFF	; 255
     99c:	29 e6       	ldi	r18, 0x69	; 105
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	91 50       	subi	r25, 0x01	; 1
		_delay_ms(500);
		normalWrist();
     9a2:	20 40       	sbci	r18, 0x00	; 0
     9a4:	80 40       	sbci	r24, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <automode+0x46e>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <automode+0x478>
     9aa:	00 00       	nop
     9ac:	cb cd       	rjmp	.-1130   	; 0x544 <automode+0x12>
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
		//----------------------------------------------------------
		
		//종료------------------------------------------------------
		//---------------------------------------------------------
	}
}
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	08 95       	ret

000009c0 <MoveArm>:
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	41 f0       	breq	.+16     	; 0x9d4 <MoveArm+0x14>
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
void normalWrist(void) {
	OCR3B = 800*4;
}

void CCWturnWrist(void) {
	OCR3B = 1300*4;
     9cc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     9d0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     9d4:	61 15       	cp	r22, r1
     9d6:	71 05       	cpc	r23, r1
     9d8:	41 f0       	breq	.+16     	; 0x9ea <MoveArm+0x2a>
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	66 0f       	add	r22, r22
     9e0:	77 1f       	adc	r23, r23
     9e2:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     9e6:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     9ea:	41 15       	cp	r20, r1
     9ec:	51 05       	cpc	r21, r1
     9ee:	41 f0       	breq	.+16     	; 0xa00 <MoveArm+0x40>
     9f0:	44 0f       	add	r20, r20
     9f2:	55 1f       	adc	r21, r21
     9f4:	44 0f       	add	r20, r20
     9f6:	55 1f       	adc	r21, r21
     9f8:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     9fc:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     a00:	08 95       	ret

00000a02 <basePoseArm>:
     a02:	80 e8       	ldi	r24, 0x80	; 128
     a04:	9c e0       	ldi	r25, 0x0C	; 12
     a06:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a0a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     a0e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a12:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a16:	80 e1       	ldi	r24, 0x10	; 16
     a18:	9e e0       	ldi	r25, 0x0E	; 14
     a1a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     a1e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     a22:	08 95       	ret

00000a24 <freePoseArm>:
     a24:	80 ee       	ldi	r24, 0xE0	; 224
     a26:	9e e2       	ldi	r25, 0x2E	; 46
     a28:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a2c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     a30:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a34:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a38:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     a3c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     a40:	08 95       	ret

00000a42 <closeHand>:
     a42:	80 e8       	ldi	r24, 0x80	; 128
     a44:	9c e0       	ldi	r25, 0x0C	; 12
     a46:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a4a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     a4e:	08 95       	ret

00000a50 <catchHand_thin>:
     a50:	88 ef       	ldi	r24, 0xF8	; 248
     a52:	9c e0       	ldi	r25, 0x0C	; 12
     a54:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a58:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     a5c:	08 95       	ret

00000a5e <holdHand_thin>:
     a5e:	88 e4       	ldi	r24, 0x48	; 72
     a60:	9d e0       	ldi	r25, 0x0D	; 13
     a62:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a66:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     a6a:	08 95       	ret

00000a6c <openHand>:
     a6c:	88 e8       	ldi	r24, 0x88	; 136
     a6e:	9e e0       	ldi	r25, 0x0E	; 14
     a70:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a74:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     a78:	08 95       	ret

00000a7a <CWturnWrist>:
     a7a:	80 eb       	ldi	r24, 0xB0	; 176
     a7c:	94 e0       	ldi	r25, 0x04	; 4
     a7e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a82:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a86:	08 95       	ret

00000a88 <normalWrist>:
     a88:	80 e8       	ldi	r24, 0x80	; 128
     a8a:	9c e0       	ldi	r25, 0x0C	; 12
     a8c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a90:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a94:	08 95       	ret

00000a96 <innerTurnElbow>:
}


void innerTurnElbow(void) {
	OCR3C = 310*4;
     a96:	88 ed       	ldi	r24, 0xD8	; 216
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     a9e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     aa2:	08 95       	ret

00000aa4 <normalTurnElbow>:
}

void normalTurnElbow(void) {
	OCR3C = 900*4;
     aa4:	80 e1       	ldi	r24, 0x10	; 16
     aa6:	9e e0       	ldi	r25, 0x0E	; 14
     aa8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     aac:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     ab0:	08 95       	ret

00000ab2 <set_V_Enable>:
#include "global_variable.h"
#include "stepMove.h"


void set_V_Enable() {
	PORTB &= ~(1 << PORTB2);
     ab2:	88 b3       	in	r24, 0x18	; 24
     ab4:	8b 7f       	andi	r24, 0xFB	; 251
     ab6:	88 bb       	out	0x18, r24	; 24
     ab8:	08 95       	ret

00000aba <set_V_Disable>:
}
void set_V_Disable() {
	PORTB |= (1 << PORTB2);
     aba:	88 b3       	in	r24, 0x18	; 24
     abc:	84 60       	ori	r24, 0x04	; 4
     abe:	88 bb       	out	0x18, r24	; 24
     ac0:	08 95       	ret

00000ac2 <set_V_Up>:
}
void set_V_Up() {
	PORTB &= ~(1 << PORTB3);
     ac2:	88 b3       	in	r24, 0x18	; 24
     ac4:	87 7f       	andi	r24, 0xF7	; 247
     ac6:	88 bb       	out	0x18, r24	; 24
     ac8:	08 95       	ret

00000aca <set_V_Down>:
}
void set_V_Down() {
	PORTB |= (1 << PORTB3);
     aca:	88 b3       	in	r24, 0x18	; 24
     acc:	88 60       	ori	r24, 0x08	; 8
     ace:	88 bb       	out	0x18, r24	; 24
     ad0:	08 95       	ret

00000ad2 <set_H_Enable>:
}


void set_H_Enable() {
	PORTB &= ~(1 << PORTB5);
     ad2:	88 b3       	in	r24, 0x18	; 24
     ad4:	8f 7d       	andi	r24, 0xDF	; 223
     ad6:	88 bb       	out	0x18, r24	; 24
     ad8:	08 95       	ret

00000ada <set_H_Disable>:
}
void set_H_Disable() {
	PORTB |= (1 << PORTB5);
     ada:	88 b3       	in	r24, 0x18	; 24
     adc:	80 62       	ori	r24, 0x20	; 32
     ade:	88 bb       	out	0x18, r24	; 24
     ae0:	08 95       	ret

00000ae2 <set_H_Right>:
}
void set_H_Right() {
	PORTB &= ~(1 << PORTB6);
     ae2:	88 b3       	in	r24, 0x18	; 24
     ae4:	8f 7b       	andi	r24, 0xBF	; 191
     ae6:	88 bb       	out	0x18, r24	; 24
     ae8:	08 95       	ret

00000aea <set_H_Left>:
}
void set_H_Left() {
	PORTB |= (1 << PORTB6);
     aea:	88 b3       	in	r24, 0x18	; 24
     aec:	80 64       	ori	r24, 0x40	; 64
     aee:	88 bb       	out	0x18, r24	; 24
     af0:	08 95       	ret

00000af2 <V_MoveStart>:
}


void V_MoveStart(void) {
	TCCR0 |= (1 << COM00);
     af2:	83 b7       	in	r24, 0x33	; 51
     af4:	80 61       	ori	r24, 0x10	; 16
     af6:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << COM01);
     af8:	83 b7       	in	r24, 0x33	; 51
     afa:	8f 7d       	andi	r24, 0xDF	; 223
     afc:	83 bf       	out	0x33, r24	; 51
     afe:	08 95       	ret

00000b00 <V_MoveStop>:
}

void V_MoveStop(void) {
	TCCR0 &= ~(1 << COM00);
     b00:	83 b7       	in	r24, 0x33	; 51
     b02:	8f 7e       	andi	r24, 0xEF	; 239
     b04:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);
     b06:	83 b7       	in	r24, 0x33	; 51
     b08:	80 62       	ori	r24, 0x20	; 32
     b0a:	83 bf       	out	0x33, r24	; 51
     b0c:	08 95       	ret

00000b0e <H_MoveStart>:
}

void H_MoveStart(void) {
	
	TCCR2 |= (1 << COM20);
     b0e:	85 b5       	in	r24, 0x25	; 37
     b10:	80 61       	ori	r24, 0x10	; 16
     b12:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1 << COM21);
     b14:	85 b5       	in	r24, 0x25	; 37
     b16:	8f 7d       	andi	r24, 0xDF	; 223
     b18:	85 bd       	out	0x25, r24	; 37
     b1a:	08 95       	ret

00000b1c <H_MoveStop>:
}

void H_MoveStop(void) {
	TCCR2 &= ~(1 << COM20);
     b1c:	85 b5       	in	r24, 0x25	; 37
     b1e:	8f 7e       	andi	r24, 0xEF	; 239
     b20:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << COM21);
     b22:	85 b5       	in	r24, 0x25	; 37
     b24:	80 62       	ori	r24, 0x20	; 32
     b26:	85 bd       	out	0x25, r24	; 37
     b28:	08 95       	ret

00000b2a <MoveXY_relative>:
}



void MoveXY_relative(int x_mm, int y_mm) {
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	ec 01       	movw	r28, r24
     b34:	8b 01       	movw	r16, r22
	curX += x_mm;
     b36:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <curX>
     b3a:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <curX+0x1>
     b3e:	8c 0f       	add	r24, r28
     b40:	9d 1f       	adc	r25, r29
     b42:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <curX+0x1>
     b46:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <curX>
	curY += y_mm;
     b4a:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <curY>
     b4e:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <curY+0x1>
     b52:	86 0f       	add	r24, r22
     b54:	97 1f       	adc	r25, r23
     b56:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <curY+0x1>
     b5a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <curY>
	
	if(x_mm >= 0) set_H_Right();
     b5e:	dd 23       	and	r29, r29
     b60:	14 f0       	brlt	.+4      	; 0xb66 <MoveXY_relative+0x3c>
     b62:	bf df       	rcall	.-130    	; 0xae2 <set_H_Right>
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <MoveXY_relative+0x44>
	else {
		set_H_Left();
     b66:	c1 df       	rcall	.-126    	; 0xaea <set_H_Left>
     b68:	d1 95       	neg	r29
		x_mm = -x_mm;
     b6a:	c1 95       	neg	r28
     b6c:	d1 09       	sbc	r29, r1
     b6e:	11 23       	and	r17, r17
	}
	
	if(y_mm >= 0) set_V_Up();
     b70:	14 f0       	brlt	.+4      	; 0xb76 <MoveXY_relative+0x4c>
     b72:	a7 df       	rcall	.-178    	; 0xac2 <set_V_Up>
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <MoveXY_relative+0x54>
	else {
		set_V_Down();
     b76:	a9 df       	rcall	.-174    	; 0xaca <set_V_Down>
     b78:	11 95       	neg	r17
		y_mm = -y_mm;
     b7a:	01 95       	neg	r16
     b7c:	11 09       	sbc	r17, r1
     b7e:	1d bc       	out	0x2d, r1	; 45
	}

	TCNT1 = 0;
     b80:	1c bc       	out	0x2c, r1	; 44
	if(x_mm) {
     b82:	20 97       	sbiw	r28, 0x00	; 0
     b84:	29 f0       	breq	.+10     	; 0xb90 <MoveXY_relative+0x66>
		H_MoveStart();
     b86:	c3 df       	rcall	.-122    	; 0xb0e <H_MoveStart>
     b88:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <h_stopFlag+0x1>
		h_stopFlag = 0;
     b8c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <h_stopFlag>
	}
	if(y_mm) {
     b90:	01 15       	cp	r16, r1
     b92:	11 05       	cpc	r17, r1
     b94:	29 f0       	breq	.+10     	; 0xba0 <MoveXY_relative+0x76>
		V_MoveStart();
     b96:	ad df       	rcall	.-166    	; 0xaf2 <V_MoveStart>
     b98:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <v_stopFlag+0x1>
		v_stopFlag = 0;
     b9c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <v_stopFlag>
     ba0:	ce 01       	movw	r24, r28
	}
	h_ms = x_mm*10;
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	cc 0f       	add	r28, r28
     ba8:	dd 1f       	adc	r29, r29
     baa:	cc 0f       	add	r28, r28
     bac:	dd 1f       	adc	r29, r29
     bae:	cc 0f       	add	r28, r28
     bb0:	dd 1f       	adc	r29, r29
     bb2:	c8 0f       	add	r28, r24
     bb4:	d9 1f       	adc	r29, r25
     bb6:	d0 93 3f 04 	sts	0x043F, r29	; 0x80043f <h_ms+0x1>
     bba:	c0 93 3e 04 	sts	0x043E, r28	; 0x80043e <h_ms>
     bbe:	29 e1       	ldi	r18, 0x19	; 25
	v_ms = y_mm*25;
     bc0:	20 9f       	mul	r18, r16
     bc2:	c0 01       	movw	r24, r0
     bc4:	21 9f       	mul	r18, r17
     bc6:	90 0d       	add	r25, r0
     bc8:	11 24       	eor	r1, r1
     bca:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <__data_end+0x1>
     bce:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <__data_end>
     bd2:	df 91       	pop	r29
	
	
}
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <MoveXY_absolute>:
     bdc:	cf 92       	push	r12

void MoveXY_absolute(unsigned int dstX, unsigned int dstY) {
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
	int Xdistance = dstX-curX;
     bec:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <curX>
     bf0:	30 91 43 04 	lds	r19, 0x0443	; 0x800443 <curX+0x1>
     bf4:	6c 01       	movw	r12, r24
     bf6:	c2 1a       	sub	r12, r18
     bf8:	d3 0a       	sbc	r13, r19
     bfa:	e6 01       	movw	r28, r12
	int Ydistance = dstY-curY;
     bfc:	20 91 40 04 	lds	r18, 0x0440	; 0x800440 <curY>
     c00:	30 91 41 04 	lds	r19, 0x0441	; 0x800441 <curY+0x1>
     c04:	7b 01       	movw	r14, r22
     c06:	e2 1a       	sub	r14, r18
     c08:	f3 0a       	sbc	r15, r19
     c0a:	87 01       	movw	r16, r14
	
	curX = dstX;
     c0c:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <curX+0x1>
     c10:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <curX>
	curY = dstY;
     c14:	70 93 41 04 	sts	0x0441, r23	; 0x800441 <curY+0x1>
     c18:	60 93 40 04 	sts	0x0440, r22	; 0x800440 <curY>
	
	if(Xdistance >= 0) set_H_Right();
     c1c:	dd 23       	and	r29, r29
     c1e:	14 f0       	brlt	.+4      	; 0xc24 <MoveXY_absolute+0x48>
     c20:	60 df       	rcall	.-320    	; 0xae2 <set_H_Right>
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <MoveXY_absolute+0x52>
	else {
		set_H_Left();
     c24:	62 df       	rcall	.-316    	; 0xaea <set_H_Left>
     c26:	cc 27       	eor	r28, r28
		Xdistance = -Xdistance;
     c28:	dd 27       	eor	r29, r29
     c2a:	cc 19       	sub	r28, r12
     c2c:	dd 09       	sbc	r29, r13
     c2e:	11 23       	and	r17, r17
	}
	
	if(Ydistance >= 0) set_V_Up();
     c30:	14 f0       	brlt	.+4      	; 0xc36 <MoveXY_absolute+0x5a>
     c32:	47 df       	rcall	.-370    	; 0xac2 <set_V_Up>
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <MoveXY_absolute+0x64>
	else {
		set_V_Down();
     c36:	49 df       	rcall	.-366    	; 0xaca <set_V_Down>
     c38:	00 27       	eor	r16, r16
		Ydistance = -Ydistance;
     c3a:	11 27       	eor	r17, r17
     c3c:	0e 19       	sub	r16, r14
     c3e:	1f 09       	sbc	r17, r15
     c40:	1d bc       	out	0x2d, r1	; 45
	}
	
	TCNT1 = 0;
     c42:	1c bc       	out	0x2c, r1	; 44
	if(Xdistance){
     c44:	20 97       	sbiw	r28, 0x00	; 0
     c46:	29 f0       	breq	.+10     	; 0xc52 <MoveXY_absolute+0x76>
		H_MoveStart();
     c48:	62 df       	rcall	.-316    	; 0xb0e <H_MoveStart>
     c4a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <h_stopFlag+0x1>
		h_stopFlag = 0;
     c4e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <h_stopFlag>
	}
	if(Ydistance){
     c52:	01 15       	cp	r16, r1
     c54:	11 05       	cpc	r17, r1
     c56:	29 f0       	breq	.+10     	; 0xc62 <MoveXY_absolute+0x86>
		V_MoveStart();
     c58:	4c df       	rcall	.-360    	; 0xaf2 <V_MoveStart>
     c5a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <v_stopFlag+0x1>
		v_stopFlag = 0;
     c5e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <v_stopFlag>
     c62:	ce 01       	movw	r24, r28
	}
	h_ms = Xdistance*10;
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	cc 0f       	add	r28, r28
     c6a:	dd 1f       	adc	r29, r29
     c6c:	cc 0f       	add	r28, r28
     c6e:	dd 1f       	adc	r29, r29
     c70:	cc 0f       	add	r28, r28
     c72:	dd 1f       	adc	r29, r29
     c74:	c8 0f       	add	r28, r24
     c76:	d9 1f       	adc	r29, r25
     c78:	d0 93 3f 04 	sts	0x043F, r29	; 0x80043f <h_ms+0x1>
     c7c:	c0 93 3e 04 	sts	0x043E, r28	; 0x80043e <h_ms>
     c80:	29 e1       	ldi	r18, 0x19	; 25
	v_ms = Ydistance*25;
     c82:	20 9f       	mul	r18, r16
     c84:	c0 01       	movw	r24, r0
     c86:	21 9f       	mul	r18, r17
     c88:	90 0d       	add	r25, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <__data_end+0x1>
     c90:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <__data_end>
     c94:	df 91       	pop	r29
	
}
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	08 95       	ret

00000ca6 <pauseUntilStop>:
     ca6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <h_stopFlag>

void pauseUntilStop(void) {
	while(h_stopFlag == 0 || v_stopFlag == 0) {};
     caa:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <h_stopFlag+0x1>
     cae:	89 2b       	or	r24, r25
     cb0:	d1 f3       	breq	.-12     	; 0xca6 <pauseUntilStop>
     cb2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <v_stopFlag>
     cb6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <v_stopFlag+0x1>
     cba:	89 2b       	or	r24, r25
     cbc:	a1 f3       	breq	.-24     	; 0xca6 <pauseUntilStop>
     cbe:	08 95       	ret

00000cc0 <InitializeTimer0>:
#include <avr/io.h>
#include "TC_config.h"

void InitializeTimer0(void) {//??? PWM: PTB4
	//PORT config : out
	DDRB |= (1 << PORTB4);
     cc0:	87 b3       	in	r24, 0x17	; 23
     cc2:	80 61       	ori	r24, 0x10	; 16
     cc4:	87 bb       	out	0x17, r24	; 23
	
	//1. CTC mode
	TCCR0 |= (1 << WGM01);//CTC mode
     cc6:	83 b7       	in	r24, 0x33	; 51
     cc8:	88 60       	ori	r24, 0x08	; 8
     cca:	83 bf       	out	0x33, r24	; 51
	
	//2. clear mode(temporary)
	TCCR0 &= ~(1 << COM00);
     ccc:	83 b7       	in	r24, 0x33	; 51
     cce:	8f 7e       	andi	r24, 0xEF	; 239
     cd0:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);
     cd2:	83 b7       	in	r24, 0x33	; 51
     cd4:	80 62       	ori	r24, 0x20	; 32
     cd6:	83 bf       	out	0x33, r24	; 51
	
	//3. Prescaler : 32 -> 16MHz/32 = 500KHz
	TCCR0 |= (1 << CS00);
     cd8:	83 b7       	in	r24, 0x33	; 51
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);
     cde:	83 b7       	in	r24, 0x33	; 51
     ce0:	82 60       	ori	r24, 0x02	; 2
     ce2:	83 bf       	out	0x33, r24	; 51
	
	//4. 500kHz/ ((124+1)*2) = 2000Hz
	OCR0 = 124;
     ce4:	8c e7       	ldi	r24, 0x7C	; 124
     ce6:	81 bf       	out	0x31, r24	; 49
     ce8:	08 95       	ret

00000cea <InitializeTimer2>:


void InitializeTimer2(void) {//??? PWM: PTB7
	
	//PORT config : out
	DDRB |= (1 << PORTB7);
     cea:	87 b3       	in	r24, 0x17	; 23
     cec:	80 68       	ori	r24, 0x80	; 128
     cee:	87 bb       	out	0x17, r24	; 23
	
	//1. CTC mode
	TCCR2 |= (1 << WGM21);
     cf0:	85 b5       	in	r24, 0x25	; 37
     cf2:	88 60       	ori	r24, 0x08	; 8
     cf4:	85 bd       	out	0x25, r24	; 37
	
	//2. clear mode(temporary)
	TCCR2 &= ~(1 << COM20);
     cf6:	85 b5       	in	r24, 0x25	; 37
     cf8:	8f 7e       	andi	r24, 0xEF	; 239
     cfa:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << COM21);
     cfc:	85 b5       	in	r24, 0x25	; 37
     cfe:	80 62       	ori	r24, 0x20	; 32
     d00:	85 bd       	out	0x25, r24	; 37
	
	//3. Prescaler : 64 -> 16MHz/64 = 250KHz
	TCCR2 |= (1 << CS20);
     d02:	85 b5       	in	r24, 0x25	; 37
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << CS21);
     d08:	85 b5       	in	r24, 0x25	; 37
     d0a:	82 60       	ori	r24, 0x02	; 2
     d0c:	85 bd       	out	0x25, r24	; 37
	
	//4. 250kHz/ ((124+1)*2) = 1000Hz
	OCR2 = 124;
     d0e:	8c e7       	ldi	r24, 0x7C	; 124
     d10:	83 bd       	out	0x23, r24	; 35
     d12:	08 95       	ret

00000d14 <InitializeTimer1>:
	//1. 고속 PWM 모드 ([WGMn3, WGMn2, WGMn1, WGMn0] = [1,1,1,0])
	/*						TOP		update		TOVn Flag set
	 * 12: CTC mode			ICRn	immediate	MAX(0xFFFF)
	 * 14: fast PWM mode	ICRn	BOTTOM		TOP
	 */
	TCCR1A |= (1 << WGM11);
     d14:	8f b5       	in	r24, 0x2f	; 47
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) 
     d1a:	8e b5       	in	r24, 0x2e	; 46
     d1c:	88 61       	ori	r24, 0x18	; 24
     d1e:	8e bd       	out	0x2e, r24	; 46
	TCCR3A &= ~(1 << COM3C0);
	TCCR3A &= ~(1 << COM3C1);
	*/
	
	//3. Prescaler : 1 -> 16MHz/1 = 16MHz
	TCCR1B |= (1 << CS10);		
     d20:	8e b5       	in	r24, 0x2e	; 46
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 16000-1;				// 4. 16MHz/16000 = 1KHz 
     d26:	8f e7       	ldi	r24, 0x7F	; 127
     d28:	9e e3       	ldi	r25, 0x3E	; 62
     d2a:	97 bd       	out	0x27, r25	; 39
     d2c:	86 bd       	out	0x26, r24	; 38
	
	//overflow interrupt enable
	TIMSK |= (1<<TOIE1);
     d2e:	87 b7       	in	r24, 0x37	; 55
     d30:	84 60       	ori	r24, 0x04	; 4
     d32:	87 bf       	out	0x37, r24	; 55
     d34:	08 95       	ret

00000d36 <InitializeTimer3>:
}


void InitializeTimer3(void)
{
	DDRE |= (1 << PORTE3) | (1 << PORTE4) | (1 << PORTE5);
     d36:	82 b1       	in	r24, 0x02	; 2
     d38:	88 63       	ori	r24, 0x38	; 56
     d3a:	82 b9       	out	0x02, r24	; 2
	
	//1. 고속 PWM 모드 ([WGMn3, WGMn2, WGMn1, WGMn0] = [1,1,1,0])
	TCCR3A |= (1 << WGM31);
     d3c:	eb e8       	ldi	r30, 0x8B	; 139
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) 
     d46:	aa e8       	ldi	r26, 0x8A	; 138
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	8c 91       	ld	r24, X
     d4c:	88 61       	ori	r24, 0x18	; 24
     d4e:	8c 93       	st	X, r24
	        | (1 << WGM33);
			
	
	//2. ([COMnA1, COMnA0] = [1, 0])
	//비교 일치가 발생하기 전에 HIGH 비교 일치가 발생하면 LOW
	TCCR3A &= ~(1 << COM3A0);
     d50:	80 81       	ld	r24, Z
     d52:	8f 7b       	andi	r24, 0xBF	; 191
     d54:	80 83       	st	Z, r24
	TCCR3A |= (1 << COM3A1);
     d56:	80 81       	ld	r24, Z
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	80 83       	st	Z, r24
	
	TCCR3A &= ~(1 << COM3B0);
     d5c:	80 81       	ld	r24, Z
     d5e:	8f 7e       	andi	r24, 0xEF	; 239
     d60:	80 83       	st	Z, r24
	TCCR3A |= (1 << COM3B1);
     d62:	80 81       	ld	r24, Z
     d64:	80 62       	ori	r24, 0x20	; 32
     d66:	80 83       	st	Z, r24
	
	TCCR3A &= ~(1 << COM3C0);
     d68:	80 81       	ld	r24, Z
     d6a:	8b 7f       	andi	r24, 0xFB	; 251
     d6c:	80 83       	st	Z, r24
	TCCR3A |= (1 << COM3C1);
     d6e:	80 81       	ld	r24, Z
     d70:	88 60       	ori	r24, 0x08	; 8
     d72:	80 83       	st	Z, r24
	
	//3. Prescaler : 8 -> 16MHz/8 = 2MHz
	TCCR3B |= (1 << CS31);	
     d74:	8c 91       	ld	r24, X
     d76:	82 60       	ori	r24, 0x02	; 2
     d78:	8c 93       	st	X, r24
	
	OCR3A = 40000;
     d7a:	80 e4       	ldi	r24, 0x40	; 64
     d7c:	9c e9       	ldi	r25, 0x9C	; 156
     d7e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d82:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 40000;
     d86:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d8a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR3C = 40000;
     d8e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     d92:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	ICR3 = 40000-1;				// 4. 2MHz/40000 = 50Hz
     d96:	8f e3       	ldi	r24, 0x3F	; 63
     d98:	9c e9       	ldi	r25, 0x9C	; 156
     d9a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d9e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     da2:	08 95       	ret

00000da4 <__vector_1>:
//--------------------------------------------------------------------




ISR(INT0_vect) {//emergency switch
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	0b b6       	in	r0, 0x3b	; 59
     db0:	0f 92       	push	r0
     db2:	2f 93       	push	r18
     db4:	3f 93       	push	r19
     db6:	4f 93       	push	r20
     db8:	5f 93       	push	r21
     dba:	6f 93       	push	r22
     dbc:	7f 93       	push	r23
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	af 93       	push	r26
     dc4:	bf 93       	push	r27
     dc6:	ef 93       	push	r30
     dc8:	ff 93       	push	r31
	freePoseArm();
     dca:	2c de       	rcall	.-936    	; 0xa24 <freePoseArm>
	printf("\r\n\r\n!!!!INT0 set!!!!!\r\n\r\n");
     dcc:	89 ec       	ldi	r24, 0xC9	; 201
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	46 d1       	rcall	.+652    	; 0x105e <puts>
	
	//set_V_Disable();//PORTC0 low : disable vertical motor
	//set_H_Disable();//PORTC4 low : disable horizontal motor
}
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	0f 90       	pop	r0
     dec:	0b be       	out	0x3b, r0	; 59
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_14>:

ISR(TIMER1_OVF_vect) {
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	0b b6       	in	r0, 0x3b	; 59
     e04:	0f 92       	push	r0
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
	if(h_ms != -1) h_ms--;
     e1e:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <h_ms>
     e22:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <h_ms+0x1>
     e26:	8f 3f       	cpi	r24, 0xFF	; 255
     e28:	2f ef       	ldi	r18, 0xFF	; 255
     e2a:	92 07       	cpc	r25, r18
     e2c:	29 f0       	breq	.+10     	; 0xe38 <__vector_14+0x40>
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <h_ms+0x1>
     e34:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <h_ms>
	if(v_ms != -1) v_ms--;
     e38:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <__data_end>
     e3c:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <__data_end+0x1>
     e40:	8f 3f       	cpi	r24, 0xFF	; 255
     e42:	2f ef       	ldi	r18, 0xFF	; 255
     e44:	92 07       	cpc	r25, r18
     e46:	29 f0       	breq	.+10     	; 0xe52 <__vector_14+0x5a>
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <__data_end+0x1>
     e4e:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <__data_end>
	
	if(h_ms == 0) {
     e52:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <h_ms>
     e56:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <h_ms+0x1>
     e5a:	89 2b       	or	r24, r25
     e5c:	39 f4       	brne	.+14     	; 0xe6c <__vector_14+0x74>
		H_MoveStop();
     e5e:	5e de       	rcall	.-836    	; 0xb1c <H_MoveStop>
		h_stopFlag = 1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <h_stopFlag+0x1>
     e68:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <h_stopFlag>
	}
	if(v_ms == 0) {
     e6c:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <__data_end>
     e70:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <__data_end+0x1>
     e74:	89 2b       	or	r24, r25
		V_MoveStop();
     e76:	39 f4       	brne	.+14     	; 0xe86 <__vector_14+0x8e>
     e78:	43 de       	rcall	.-890    	; 0xb00 <V_MoveStop>
		v_stopFlag = 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <v_stopFlag+0x1>
     e82:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <v_stopFlag>
	}
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0b be       	out	0x3b, r0	; 59
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <main>:


int main(void)
{
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	64 97       	sbiw	r28, 0x14	; 20
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1 << PORTB2) | (1 << PORTB3);//vertical, PORTB2 : EN, PORTB3 : CW;
     ec0:	87 b3       	in	r24, 0x17	; 23
     ec2:	8c 60       	ori	r24, 0x0C	; 12
     ec4:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PORTB5) | (1 << PORTB6);//horizontal, PORTB5 : EN, PORTB6 : CW;
     ec6:	87 b3       	in	r24, 0x17	; 23
     ec8:	80 66       	ori	r24, 0x60	; 96
     eca:	87 bb       	out	0x17, r24	; 23

	PORTB &= ~(1 << PORTB2);//PORTC0 low : enable vertical motor
     ecc:	88 b3       	in	r24, 0x18	; 24
     ece:	8b 7f       	andi	r24, 0xFB	; 251
     ed0:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1 << PORTB5);//PORTC4 low : enable horizontal motor
     ed2:	88 b3       	in	r24, 0x18	; 24
     ed4:	8f 7d       	andi	r24, 0xDF	; 223
     ed6:	88 bb       	out	0x18, r24	; 24

	//T/C enable
	InitializeTimer0();//vertical step motor PWM channel
     ed8:	f3 de       	rcall	.-538    	; 0xcc0 <InitializeTimer0>
	InitializeTimer2();//horizontal step motor PWM channel
     eda:	07 df       	rcall	.-498    	; 0xcea <InitializeTimer2>
	InitializeTimer3();//robot arm servo motor PWM channel
     edc:	2c df       	rcall	.-424    	; 0xd36 <InitializeTimer3>
     ede:	1a df       	rcall	.-460    	; 0xd14 <InitializeTimer1>
	
	InitializeTimer1();//user timer
     ee0:	87 b7       	in	r24, 0x37	; 55
     ee2:	84 60       	ori	r24, 0x04	; 4
	TIMSK |= (1<<TOIE1); //T/C1 overflow interrupt enable
     ee4:	87 bf       	out	0x37, r24	; 55
     ee6:	81 b3       	in	r24, 0x11	; 17
     ee8:	8e 7f       	andi	r24, 0xFE	; 254
	
	//emergency button interrupt enable
	DDRD &= ~(1<<PORTD0);
     eea:	81 bb       	out	0x11, r24	; 17
     eec:	82 b3       	in	r24, 0x12	; 18
     eee:	81 60       	ori	r24, 0x01	; 1
	PORTD |= (1<<PORTD0);
     ef0:	82 bb       	out	0x12, r24	; 18
     ef2:	89 b7       	in	r24, 0x39	; 57
     ef4:	81 60       	ori	r24, 0x01	; 1
	EIMSK |= (1<<INT0);
     ef6:	89 bf       	out	0x39, r24	; 57
     ef8:	ea e6       	ldi	r30, 0x6A	; 106
     efa:	f0 e0       	ldi	r31, 0x00	; 0
	EICRA |= (1<<ISC01);
     efc:	80 81       	ld	r24, Z
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	80 83       	st	Z, r24
     f02:	78 94       	sei
	
	sei();
     f04:	5b d0       	rcall	.+182    	; 0xfbc <UART1_init>
	
	UART1_init();
     f06:	e4 e4       	ldi	r30, 0x44	; 68
     f08:	f4 e0       	ldi	r31, 0x04	; 4
	stdout = &OUTPUT;
     f0a:	86 e7       	ldi	r24, 0x76	; 118
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	93 83       	std	Z+3, r25	; 0x03
     f10:	82 83       	std	Z+2, r24	; 0x02
     f12:	88 e6       	ldi	r24, 0x68	; 104
	stdin = &INPUT;
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	80 83       	st	Z, r24
     f1a:	73 dd       	rcall	.-1306   	; 0xa02 <basePoseArm>
	
	
	basePoseArm();
     f1c:	2f ef       	ldi	r18, 0xFF	; 255
     f1e:	83 e2       	ldi	r24, 0x23	; 35
     f20:	94 ef       	ldi	r25, 0xF4	; 244
     f22:	21 50       	subi	r18, 0x01	; 1
     f24:	80 40       	sbci	r24, 0x00	; 0
     f26:	90 40       	sbci	r25, 0x00	; 0
     f28:	e1 f7       	brne	.-8      	; 0xf22 <main+0x76>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <main+0x80>
     f2c:	00 00       	nop
     f2e:	80 e3       	ldi	r24, 0x30	; 48
     f30:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(5000);
	
	int wronginput;
	char uartBuffer[20] = "0";
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	fe 01       	movw	r30, r28
     f38:	33 96       	adiw	r30, 0x03	; 3
     f3a:	82 e1       	ldi	r24, 0x12	; 18
     f3c:	df 01       	movw	r26, r30
     f3e:	1d 92       	st	X+, r1
     f40:	8a 95       	dec	r24
     f42:	e9 f7       	brne	.-6      	; 0xf3e <main+0x92>
     f44:	82 ee       	ldi	r24, 0xE2	; 226

	while(1) {
		do {
			wronginput = 0;
			
			printf("Testmode(1), automode(2), manualmode(3), setHereAs[0,0](4)?");
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	9f 93       	push	r25
     f4a:	8f 93       	push	r24
     f4c:	70 d0       	rcall	.+224    	; 0x102e <printf>
     f4e:	8e 01       	movw	r16, r28
     f50:	0f 5f       	subi	r16, 0xFF	; 255
			scanf("%s", uartBuffer);
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	1f 93       	push	r17
     f56:	0f 93       	push	r16
     f58:	83 ec       	ldi	r24, 0xC3	; 195
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	9f 93       	push	r25
     f5e:	8f 93       	push	r24
     f60:	ae d0       	rcall	.+348    	; 0x10be <scanf>
     f62:	66 ec       	ldi	r22, 0xC6	; 198
			
			if(strcasecmp(uartBuffer, "1")==0) 
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	c8 01       	movw	r24, r16
     f68:	4f d0       	rcall	.+158    	; 0x1008 <strcasecmp>
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	89 2b       	or	r24, r25
     f78:	11 f4       	brne	.+4      	; 0xf7e <main+0xd2>
				testmode();
     f7a:	ad d8       	rcall	.-3750   	; 0xd6 <testmode>
     f7c:	e3 cf       	rjmp	.-58     	; 0xf44 <main+0x98>
			else if (strcasecmp(uartBuffer, "2")==0) 
     f7e:	68 ec       	ldi	r22, 0xC8	; 200
     f80:	71 e0       	ldi	r23, 0x01	; 1
     f82:	ce 01       	movw	r24, r28
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	40 d0       	rcall	.+128    	; 0x1008 <strcasecmp>
     f88:	89 2b       	or	r24, r25
				automode();
     f8a:	11 f4       	brne	.+4      	; 0xf90 <main+0xe4>
     f8c:	d2 da       	rcall	.-2652   	; 0x532 <automode>
     f8e:	da cf       	rjmp	.-76     	; 0xf44 <main+0x98>
			else if (strcasecmp(uartBuffer, "3")==0)
     f90:	6a ec       	ldi	r22, 0xCA	; 202
     f92:	71 e0       	ldi	r23, 0x01	; 1
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	37 d0       	rcall	.+110    	; 0x1008 <strcasecmp>
     f9a:	89 2b       	or	r24, r25
				manualmode();
     f9c:	11 f4       	brne	.+4      	; 0xfa2 <main+0xf6>
     f9e:	38 da       	rcall	.-2960   	; 0x410 <manualmode>
			else if (strcasecmp(uartBuffer, "4")==0)
     fa0:	d1 cf       	rjmp	.-94     	; 0xf44 <main+0x98>
     fa2:	6e e1       	ldi	r22, 0x1E	; 30
     fa4:	74 e0       	ldi	r23, 0x04	; 4
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	2e d0       	rcall	.+92     	; 0x1008 <strcasecmp>
     fac:	89 2b       	or	r24, r25
     fae:	11 f4       	brne	.+4      	; 0xfb4 <main+0x108>
				setHereas00();
     fb0:	b7 da       	rcall	.-2706   	; 0x520 <setHereas00>
     fb2:	c8 cf       	rjmp	.-112    	; 0xf44 <main+0x98>
     fb4:	80 e2       	ldi	r24, 0x20	; 32
			else{
				printf("input '1', '2', '3' or '4'\r\n");
     fb6:	94 e0       	ldi	r25, 0x04	; 4
     fb8:	52 d0       	rcall	.+164    	; 0x105e <puts>
     fba:	c4 cf       	rjmp	.-120    	; 0xf44 <main+0x98>

00000fbc <UART1_init>:
﻿#include <avr/io.h>
#include "UART1.h"

void UART1_init(void)
{
	UBRR1H = 0x00;			// 9600 보율로 설정
     fbc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;
     fc0:	8f ec       	ldi	r24, 0xCF	; 207
     fc2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= _BV(U2X1);			// 2배속 모드
     fc6:	eb e9       	ldi	r30, 0x9B	; 155
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	82 60       	ori	r24, 0x02	; 2
     fce:	80 83       	st	Z, r24
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR1C |= 0x06;
     fd0:	ed e9       	ldi	r30, 0x9D	; 157
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	86 60       	ori	r24, 0x06	; 6
     fd8:	80 83       	st	Z, r24
	
	UCSR1B |= _BV(RXEN1);		// 송수신 가능
     fda:	ea e9       	ldi	r30, 0x9A	; 154
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	80 61       	ori	r24, 0x10	; 16
     fe2:	80 83       	st	Z, r24
	UCSR1B |= _BV(TXEN1);
     fe4:	80 81       	ld	r24, Z
     fe6:	88 60       	ori	r24, 0x08	; 8
     fe8:	80 83       	st	Z, r24
     fea:	08 95       	ret

00000fec <UART1_transmit>:
}

void UART1_transmit(char data)
{
	while( !(UCSR1A & (1 << UDRE1)) );	// 송신 가능 대기
     fec:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     ff0:	95 ff       	sbrs	r25, 5
     ff2:	fc cf       	rjmp	.-8      	; 0xfec <UART1_transmit>
	UDR1 = data;				// 데이터 전송
     ff4:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     ff8:	08 95       	ret

00000ffa <UART1_receive>:
}

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );	// 데이터 수신 대기
     ffa:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     ffe:	88 23       	and	r24, r24
    1000:	e4 f7       	brge	.-8      	; 0xffa <UART1_receive>
	return UDR1;
    1002:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
    1006:	08 95       	ret

00001008 <strcasecmp>:
    1008:	fb 01       	movw	r30, r22
    100a:	dc 01       	movw	r26, r24
    100c:	8d 91       	ld	r24, X+
    100e:	81 34       	cpi	r24, 0x41	; 65
    1010:	1c f0       	brlt	.+6      	; 0x1018 <strcasecmp+0x10>
    1012:	8b 35       	cpi	r24, 0x5B	; 91
    1014:	0c f4       	brge	.+2      	; 0x1018 <strcasecmp+0x10>
    1016:	80 5e       	subi	r24, 0xE0	; 224
    1018:	61 91       	ld	r22, Z+
    101a:	61 34       	cpi	r22, 0x41	; 65
    101c:	1c f0       	brlt	.+6      	; 0x1024 <strcasecmp+0x1c>
    101e:	6b 35       	cpi	r22, 0x5B	; 91
    1020:	0c f4       	brge	.+2      	; 0x1024 <strcasecmp+0x1c>
    1022:	60 5e       	subi	r22, 0xE0	; 224
    1024:	86 1b       	sub	r24, r22
    1026:	61 11       	cpse	r22, r1
    1028:	89 f3       	breq	.-30     	; 0x100c <strcasecmp+0x4>
    102a:	99 0b       	sbc	r25, r25
    102c:	08 95       	ret

0000102e <printf>:
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	ae 01       	movw	r20, r28
    1038:	4b 5f       	subi	r20, 0xFB	; 251
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	fa 01       	movw	r30, r20
    103e:	61 91       	ld	r22, Z+
    1040:	71 91       	ld	r23, Z+
    1042:	af 01       	movw	r20, r30
    1044:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <__iob+0x2>
    1048:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <__iob+0x3>
    104c:	4b d0       	rcall	.+150    	; 0x10e4 <vfprintf>
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <putchar>:
    1054:	60 91 46 04 	lds	r22, 0x0446	; 0x800446 <__iob+0x2>
    1058:	70 91 47 04 	lds	r23, 0x0447	; 0x800447 <__iob+0x3>
    105c:	70 c5       	rjmp	.+2784   	; 0x1b3e <fputc>

0000105e <puts>:
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <__iob+0x2>
    106a:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <__iob+0x3>
    106e:	23 81       	ldd	r18, Z+3	; 0x03
    1070:	21 ff       	sbrs	r18, 1
    1072:	1b c0       	rjmp	.+54     	; 0x10aa <puts+0x4c>
    1074:	8c 01       	movw	r16, r24
    1076:	d0 e0       	ldi	r29, 0x00	; 0
    1078:	c0 e0       	ldi	r28, 0x00	; 0
    107a:	f8 01       	movw	r30, r16
    107c:	81 91       	ld	r24, Z+
    107e:	8f 01       	movw	r16, r30
    1080:	60 91 46 04 	lds	r22, 0x0446	; 0x800446 <__iob+0x2>
    1084:	70 91 47 04 	lds	r23, 0x0447	; 0x800447 <__iob+0x3>
    1088:	db 01       	movw	r26, r22
    108a:	18 96       	adiw	r26, 0x08	; 8
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	19 97       	sbiw	r26, 0x09	; 9
    1092:	88 23       	and	r24, r24
    1094:	31 f0       	breq	.+12     	; 0x10a2 <puts+0x44>
    1096:	09 95       	icall
    1098:	89 2b       	or	r24, r25
    109a:	79 f3       	breq	.-34     	; 0x107a <puts+0x1c>
    109c:	df ef       	ldi	r29, 0xFF	; 255
    109e:	cf ef       	ldi	r28, 0xFF	; 255
    10a0:	ec cf       	rjmp	.-40     	; 0x107a <puts+0x1c>
    10a2:	8a e0       	ldi	r24, 0x0A	; 10
    10a4:	09 95       	icall
    10a6:	89 2b       	or	r24, r25
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <puts+0x52>
    10aa:	8f ef       	ldi	r24, 0xFF	; 255
    10ac:	9f ef       	ldi	r25, 0xFF	; 255
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <puts+0x56>
    10b0:	8d 2f       	mov	r24, r29
    10b2:	9c 2f       	mov	r25, r28
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	08 95       	ret

000010be <scanf>:
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	ae 01       	movw	r20, r28
    10c8:	4b 5f       	subi	r20, 0xFB	; 251
    10ca:	5f 4f       	sbci	r21, 0xFF	; 255
    10cc:	fa 01       	movw	r30, r20
    10ce:	61 91       	ld	r22, Z+
    10d0:	71 91       	ld	r23, Z+
    10d2:	af 01       	movw	r20, r30
    10d4:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <__iob>
    10d8:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <__iob+0x1>
    10dc:	b2 d3       	rcall	.+1892   	; 0x1842 <vfscanf>
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <vfprintf>:
    10e4:	2f 92       	push	r2
    10e6:	3f 92       	push	r3
    10e8:	4f 92       	push	r4
    10ea:	5f 92       	push	r5
    10ec:	6f 92       	push	r6
    10ee:	7f 92       	push	r7
    10f0:	8f 92       	push	r8
    10f2:	9f 92       	push	r9
    10f4:	af 92       	push	r10
    10f6:	bf 92       	push	r11
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	2b 97       	sbiw	r28, 0x0b	; 11
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	6c 01       	movw	r12, r24
    111a:	7b 01       	movw	r14, r22
    111c:	8a 01       	movw	r16, r20
    111e:	fc 01       	movw	r30, r24
    1120:	17 82       	std	Z+7, r1	; 0x07
    1122:	16 82       	std	Z+6, r1	; 0x06
    1124:	83 81       	ldd	r24, Z+3	; 0x03
    1126:	81 ff       	sbrs	r24, 1
    1128:	bf c1       	rjmp	.+894    	; 0x14a8 <__stack+0x3a9>
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	3c 01       	movw	r6, r24
    1130:	f6 01       	movw	r30, r12
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	f7 01       	movw	r30, r14
    1136:	93 fd       	sbrc	r25, 3
    1138:	85 91       	lpm	r24, Z+
    113a:	93 ff       	sbrs	r25, 3
    113c:	81 91       	ld	r24, Z+
    113e:	7f 01       	movw	r14, r30
    1140:	88 23       	and	r24, r24
    1142:	09 f4       	brne	.+2      	; 0x1146 <__stack+0x47>
    1144:	ad c1       	rjmp	.+858    	; 0x14a0 <__stack+0x3a1>
    1146:	85 32       	cpi	r24, 0x25	; 37
    1148:	39 f4       	brne	.+14     	; 0x1158 <__stack+0x59>
    114a:	93 fd       	sbrc	r25, 3
    114c:	85 91       	lpm	r24, Z+
    114e:	93 ff       	sbrs	r25, 3
    1150:	81 91       	ld	r24, Z+
    1152:	7f 01       	movw	r14, r30
    1154:	85 32       	cpi	r24, 0x25	; 37
    1156:	21 f4       	brne	.+8      	; 0x1160 <__stack+0x61>
    1158:	b6 01       	movw	r22, r12
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	f0 d4       	rcall	.+2528   	; 0x1b3e <fputc>
    115e:	e8 cf       	rjmp	.-48     	; 0x1130 <__stack+0x31>
    1160:	91 2c       	mov	r9, r1
    1162:	21 2c       	mov	r2, r1
    1164:	31 2c       	mov	r3, r1
    1166:	ff e1       	ldi	r31, 0x1F	; 31
    1168:	f3 15       	cp	r31, r3
    116a:	d8 f0       	brcs	.+54     	; 0x11a2 <__stack+0xa3>
    116c:	8b 32       	cpi	r24, 0x2B	; 43
    116e:	79 f0       	breq	.+30     	; 0x118e <__stack+0x8f>
    1170:	38 f4       	brcc	.+14     	; 0x1180 <__stack+0x81>
    1172:	80 32       	cpi	r24, 0x20	; 32
    1174:	79 f0       	breq	.+30     	; 0x1194 <__stack+0x95>
    1176:	83 32       	cpi	r24, 0x23	; 35
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <__stack+0xa3>
    117a:	23 2d       	mov	r18, r3
    117c:	20 61       	ori	r18, 0x10	; 16
    117e:	1d c0       	rjmp	.+58     	; 0x11ba <__stack+0xbb>
    1180:	8d 32       	cpi	r24, 0x2D	; 45
    1182:	61 f0       	breq	.+24     	; 0x119c <__stack+0x9d>
    1184:	80 33       	cpi	r24, 0x30	; 48
    1186:	69 f4       	brne	.+26     	; 0x11a2 <__stack+0xa3>
    1188:	23 2d       	mov	r18, r3
    118a:	21 60       	ori	r18, 0x01	; 1
    118c:	16 c0       	rjmp	.+44     	; 0x11ba <__stack+0xbb>
    118e:	83 2d       	mov	r24, r3
    1190:	82 60       	ori	r24, 0x02	; 2
    1192:	38 2e       	mov	r3, r24
    1194:	e3 2d       	mov	r30, r3
    1196:	e4 60       	ori	r30, 0x04	; 4
    1198:	3e 2e       	mov	r3, r30
    119a:	2a c0       	rjmp	.+84     	; 0x11f0 <__stack+0xf1>
    119c:	f3 2d       	mov	r31, r3
    119e:	f8 60       	ori	r31, 0x08	; 8
    11a0:	1d c0       	rjmp	.+58     	; 0x11dc <__stack+0xdd>
    11a2:	37 fc       	sbrc	r3, 7
    11a4:	2d c0       	rjmp	.+90     	; 0x1200 <__stack+0x101>
    11a6:	20 ed       	ldi	r18, 0xD0	; 208
    11a8:	28 0f       	add	r18, r24
    11aa:	2a 30       	cpi	r18, 0x0A	; 10
    11ac:	40 f0       	brcs	.+16     	; 0x11be <__stack+0xbf>
    11ae:	8e 32       	cpi	r24, 0x2E	; 46
    11b0:	b9 f4       	brne	.+46     	; 0x11e0 <__stack+0xe1>
    11b2:	36 fc       	sbrc	r3, 6
    11b4:	75 c1       	rjmp	.+746    	; 0x14a0 <__stack+0x3a1>
    11b6:	23 2d       	mov	r18, r3
    11b8:	20 64       	ori	r18, 0x40	; 64
    11ba:	32 2e       	mov	r3, r18
    11bc:	19 c0       	rjmp	.+50     	; 0x11f0 <__stack+0xf1>
    11be:	36 fe       	sbrs	r3, 6
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <__stack+0xcf>
    11c2:	8a e0       	ldi	r24, 0x0A	; 10
    11c4:	98 9e       	mul	r9, r24
    11c6:	20 0d       	add	r18, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	92 2e       	mov	r9, r18
    11cc:	11 c0       	rjmp	.+34     	; 0x11f0 <__stack+0xf1>
    11ce:	ea e0       	ldi	r30, 0x0A	; 10
    11d0:	2e 9e       	mul	r2, r30
    11d2:	20 0d       	add	r18, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	22 2e       	mov	r2, r18
    11d8:	f3 2d       	mov	r31, r3
    11da:	f0 62       	ori	r31, 0x20	; 32
    11dc:	3f 2e       	mov	r3, r31
    11de:	08 c0       	rjmp	.+16     	; 0x11f0 <__stack+0xf1>
    11e0:	8c 36       	cpi	r24, 0x6C	; 108
    11e2:	21 f4       	brne	.+8      	; 0x11ec <__stack+0xed>
    11e4:	83 2d       	mov	r24, r3
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	38 2e       	mov	r3, r24
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <__stack+0xf1>
    11ec:	88 36       	cpi	r24, 0x68	; 104
    11ee:	41 f4       	brne	.+16     	; 0x1200 <__stack+0x101>
    11f0:	f7 01       	movw	r30, r14
    11f2:	93 fd       	sbrc	r25, 3
    11f4:	85 91       	lpm	r24, Z+
    11f6:	93 ff       	sbrs	r25, 3
    11f8:	81 91       	ld	r24, Z+
    11fa:	7f 01       	movw	r14, r30
    11fc:	81 11       	cpse	r24, r1
    11fe:	b3 cf       	rjmp	.-154    	; 0x1166 <__stack+0x67>
    1200:	98 2f       	mov	r25, r24
    1202:	9f 7d       	andi	r25, 0xDF	; 223
    1204:	95 54       	subi	r25, 0x45	; 69
    1206:	93 30       	cpi	r25, 0x03	; 3
    1208:	28 f4       	brcc	.+10     	; 0x1214 <__stack+0x115>
    120a:	0c 5f       	subi	r16, 0xFC	; 252
    120c:	1f 4f       	sbci	r17, 0xFF	; 255
    120e:	9f e3       	ldi	r25, 0x3F	; 63
    1210:	99 83       	std	Y+1, r25	; 0x01
    1212:	0d c0       	rjmp	.+26     	; 0x122e <__stack+0x12f>
    1214:	83 36       	cpi	r24, 0x63	; 99
    1216:	31 f0       	breq	.+12     	; 0x1224 <__stack+0x125>
    1218:	83 37       	cpi	r24, 0x73	; 115
    121a:	71 f0       	breq	.+28     	; 0x1238 <__stack+0x139>
    121c:	83 35       	cpi	r24, 0x53	; 83
    121e:	09 f0       	breq	.+2      	; 0x1222 <__stack+0x123>
    1220:	55 c0       	rjmp	.+170    	; 0x12cc <__stack+0x1cd>
    1222:	20 c0       	rjmp	.+64     	; 0x1264 <__stack+0x165>
    1224:	f8 01       	movw	r30, r16
    1226:	80 81       	ld	r24, Z
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	0e 5f       	subi	r16, 0xFE	; 254
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	88 24       	eor	r8, r8
    1230:	83 94       	inc	r8
    1232:	91 2c       	mov	r9, r1
    1234:	53 01       	movw	r10, r6
    1236:	12 c0       	rjmp	.+36     	; 0x125c <__stack+0x15d>
    1238:	28 01       	movw	r4, r16
    123a:	f2 e0       	ldi	r31, 0x02	; 2
    123c:	4f 0e       	add	r4, r31
    123e:	51 1c       	adc	r5, r1
    1240:	f8 01       	movw	r30, r16
    1242:	a0 80       	ld	r10, Z
    1244:	b1 80       	ldd	r11, Z+1	; 0x01
    1246:	36 fe       	sbrs	r3, 6
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <__stack+0x151>
    124a:	69 2d       	mov	r22, r9
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <__stack+0x155>
    1250:	6f ef       	ldi	r22, 0xFF	; 255
    1252:	7f ef       	ldi	r23, 0xFF	; 255
    1254:	c5 01       	movw	r24, r10
    1256:	2a d4       	rcall	.+2132   	; 0x1aac <strnlen>
    1258:	4c 01       	movw	r8, r24
    125a:	82 01       	movw	r16, r4
    125c:	f3 2d       	mov	r31, r3
    125e:	ff 77       	andi	r31, 0x7F	; 127
    1260:	3f 2e       	mov	r3, r31
    1262:	15 c0       	rjmp	.+42     	; 0x128e <__stack+0x18f>
    1264:	28 01       	movw	r4, r16
    1266:	22 e0       	ldi	r18, 0x02	; 2
    1268:	42 0e       	add	r4, r18
    126a:	51 1c       	adc	r5, r1
    126c:	f8 01       	movw	r30, r16
    126e:	a0 80       	ld	r10, Z
    1270:	b1 80       	ldd	r11, Z+1	; 0x01
    1272:	36 fe       	sbrs	r3, 6
    1274:	03 c0       	rjmp	.+6      	; 0x127c <__stack+0x17d>
    1276:	69 2d       	mov	r22, r9
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <__stack+0x181>
    127c:	6f ef       	ldi	r22, 0xFF	; 255
    127e:	7f ef       	ldi	r23, 0xFF	; 255
    1280:	c5 01       	movw	r24, r10
    1282:	09 d4       	rcall	.+2066   	; 0x1a96 <strnlen_P>
    1284:	4c 01       	movw	r8, r24
    1286:	f3 2d       	mov	r31, r3
    1288:	f0 68       	ori	r31, 0x80	; 128
    128a:	3f 2e       	mov	r3, r31
    128c:	82 01       	movw	r16, r4
    128e:	33 fc       	sbrc	r3, 3
    1290:	19 c0       	rjmp	.+50     	; 0x12c4 <__stack+0x1c5>
    1292:	82 2d       	mov	r24, r2
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	88 16       	cp	r8, r24
    1298:	99 06       	cpc	r9, r25
    129a:	a0 f4       	brcc	.+40     	; 0x12c4 <__stack+0x1c5>
    129c:	b6 01       	movw	r22, r12
    129e:	80 e2       	ldi	r24, 0x20	; 32
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	4d d4       	rcall	.+2202   	; 0x1b3e <fputc>
    12a4:	2a 94       	dec	r2
    12a6:	f5 cf       	rjmp	.-22     	; 0x1292 <__stack+0x193>
    12a8:	f5 01       	movw	r30, r10
    12aa:	37 fc       	sbrc	r3, 7
    12ac:	85 91       	lpm	r24, Z+
    12ae:	37 fe       	sbrs	r3, 7
    12b0:	81 91       	ld	r24, Z+
    12b2:	5f 01       	movw	r10, r30
    12b4:	b6 01       	movw	r22, r12
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	42 d4       	rcall	.+2180   	; 0x1b3e <fputc>
    12ba:	21 10       	cpse	r2, r1
    12bc:	2a 94       	dec	r2
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	82 1a       	sub	r8, r18
    12c2:	91 08       	sbc	r9, r1
    12c4:	81 14       	cp	r8, r1
    12c6:	91 04       	cpc	r9, r1
    12c8:	79 f7       	brne	.-34     	; 0x12a8 <__stack+0x1a9>
    12ca:	e1 c0       	rjmp	.+450    	; 0x148e <__stack+0x38f>
    12cc:	84 36       	cpi	r24, 0x64	; 100
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <__stack+0x1d5>
    12d0:	89 36       	cpi	r24, 0x69	; 105
    12d2:	39 f5       	brne	.+78     	; 0x1322 <__stack+0x223>
    12d4:	f8 01       	movw	r30, r16
    12d6:	37 fe       	sbrs	r3, 7
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <__stack+0x1e9>
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	0c 5f       	subi	r16, 0xFC	; 252
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <__stack+0x1f9>
    12e8:	60 81       	ld	r22, Z
    12ea:	71 81       	ldd	r23, Z+1	; 0x01
    12ec:	07 2e       	mov	r0, r23
    12ee:	00 0c       	add	r0, r0
    12f0:	88 0b       	sbc	r24, r24
    12f2:	99 0b       	sbc	r25, r25
    12f4:	0e 5f       	subi	r16, 0xFE	; 254
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	f3 2d       	mov	r31, r3
    12fa:	ff 76       	andi	r31, 0x6F	; 111
    12fc:	3f 2e       	mov	r3, r31
    12fe:	97 ff       	sbrs	r25, 7
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <__stack+0x215>
    1302:	90 95       	com	r25
    1304:	80 95       	com	r24
    1306:	70 95       	com	r23
    1308:	61 95       	neg	r22
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	f0 68       	ori	r31, 0x80	; 128
    1312:	3f 2e       	mov	r3, r31
    1314:	2a e0       	ldi	r18, 0x0A	; 10
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	a3 01       	movw	r20, r6
    131a:	66 d4       	rcall	.+2252   	; 0x1be8 <__ultoa_invert>
    131c:	88 2e       	mov	r8, r24
    131e:	86 18       	sub	r8, r6
    1320:	44 c0       	rjmp	.+136    	; 0x13aa <__stack+0x2ab>
    1322:	85 37       	cpi	r24, 0x75	; 117
    1324:	31 f4       	brne	.+12     	; 0x1332 <__stack+0x233>
    1326:	23 2d       	mov	r18, r3
    1328:	2f 7e       	andi	r18, 0xEF	; 239
    132a:	b2 2e       	mov	r11, r18
    132c:	2a e0       	ldi	r18, 0x0A	; 10
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	25 c0       	rjmp	.+74     	; 0x137c <__stack+0x27d>
    1332:	93 2d       	mov	r25, r3
    1334:	99 7f       	andi	r25, 0xF9	; 249
    1336:	b9 2e       	mov	r11, r25
    1338:	8f 36       	cpi	r24, 0x6F	; 111
    133a:	c1 f0       	breq	.+48     	; 0x136c <__stack+0x26d>
    133c:	18 f4       	brcc	.+6      	; 0x1344 <__stack+0x245>
    133e:	88 35       	cpi	r24, 0x58	; 88
    1340:	79 f0       	breq	.+30     	; 0x1360 <__stack+0x261>
    1342:	ae c0       	rjmp	.+348    	; 0x14a0 <__stack+0x3a1>
    1344:	80 37       	cpi	r24, 0x70	; 112
    1346:	19 f0       	breq	.+6      	; 0x134e <__stack+0x24f>
    1348:	88 37       	cpi	r24, 0x78	; 120
    134a:	21 f0       	breq	.+8      	; 0x1354 <__stack+0x255>
    134c:	a9 c0       	rjmp	.+338    	; 0x14a0 <__stack+0x3a1>
    134e:	e9 2f       	mov	r30, r25
    1350:	e0 61       	ori	r30, 0x10	; 16
    1352:	be 2e       	mov	r11, r30
    1354:	b4 fe       	sbrs	r11, 4
    1356:	0d c0       	rjmp	.+26     	; 0x1372 <__stack+0x273>
    1358:	fb 2d       	mov	r31, r11
    135a:	f4 60       	ori	r31, 0x04	; 4
    135c:	bf 2e       	mov	r11, r31
    135e:	09 c0       	rjmp	.+18     	; 0x1372 <__stack+0x273>
    1360:	34 fe       	sbrs	r3, 4
    1362:	0a c0       	rjmp	.+20     	; 0x1378 <__stack+0x279>
    1364:	29 2f       	mov	r18, r25
    1366:	26 60       	ori	r18, 0x06	; 6
    1368:	b2 2e       	mov	r11, r18
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <__stack+0x279>
    136c:	28 e0       	ldi	r18, 0x08	; 8
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	05 c0       	rjmp	.+10     	; 0x137c <__stack+0x27d>
    1372:	20 e1       	ldi	r18, 0x10	; 16
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <__stack+0x27d>
    1378:	20 e1       	ldi	r18, 0x10	; 16
    137a:	32 e0       	ldi	r19, 0x02	; 2
    137c:	f8 01       	movw	r30, r16
    137e:	b7 fe       	sbrs	r11, 7
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <__stack+0x291>
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	0c 5f       	subi	r16, 0xFC	; 252
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	06 c0       	rjmp	.+12     	; 0x139c <__stack+0x29d>
    1390:	60 81       	ld	r22, Z
    1392:	71 81       	ldd	r23, Z+1	; 0x01
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 5f       	subi	r16, 0xFE	; 254
    139a:	1f 4f       	sbci	r17, 0xFF	; 255
    139c:	a3 01       	movw	r20, r6
    139e:	24 d4       	rcall	.+2120   	; 0x1be8 <__ultoa_invert>
    13a0:	88 2e       	mov	r8, r24
    13a2:	86 18       	sub	r8, r6
    13a4:	fb 2d       	mov	r31, r11
    13a6:	ff 77       	andi	r31, 0x7F	; 127
    13a8:	3f 2e       	mov	r3, r31
    13aa:	36 fe       	sbrs	r3, 6
    13ac:	0d c0       	rjmp	.+26     	; 0x13c8 <__stack+0x2c9>
    13ae:	23 2d       	mov	r18, r3
    13b0:	2e 7f       	andi	r18, 0xFE	; 254
    13b2:	a2 2e       	mov	r10, r18
    13b4:	89 14       	cp	r8, r9
    13b6:	58 f4       	brcc	.+22     	; 0x13ce <__stack+0x2cf>
    13b8:	34 fe       	sbrs	r3, 4
    13ba:	0b c0       	rjmp	.+22     	; 0x13d2 <__stack+0x2d3>
    13bc:	32 fc       	sbrc	r3, 2
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <__stack+0x2d3>
    13c0:	83 2d       	mov	r24, r3
    13c2:	8e 7e       	andi	r24, 0xEE	; 238
    13c4:	a8 2e       	mov	r10, r24
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <__stack+0x2d3>
    13c8:	b8 2c       	mov	r11, r8
    13ca:	a3 2c       	mov	r10, r3
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <__stack+0x2d5>
    13ce:	b8 2c       	mov	r11, r8
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <__stack+0x2d5>
    13d2:	b9 2c       	mov	r11, r9
    13d4:	a4 fe       	sbrs	r10, 4
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <__stack+0x2f7>
    13d8:	fe 01       	movw	r30, r28
    13da:	e8 0d       	add	r30, r8
    13dc:	f1 1d       	adc	r31, r1
    13de:	80 81       	ld	r24, Z
    13e0:	80 33       	cpi	r24, 0x30	; 48
    13e2:	21 f4       	brne	.+8      	; 0x13ec <__stack+0x2ed>
    13e4:	9a 2d       	mov	r25, r10
    13e6:	99 7e       	andi	r25, 0xE9	; 233
    13e8:	a9 2e       	mov	r10, r25
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <__stack+0x2ff>
    13ec:	a2 fe       	sbrs	r10, 2
    13ee:	06 c0       	rjmp	.+12     	; 0x13fc <__stack+0x2fd>
    13f0:	b3 94       	inc	r11
    13f2:	b3 94       	inc	r11
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <__stack+0x2ff>
    13f6:	8a 2d       	mov	r24, r10
    13f8:	86 78       	andi	r24, 0x86	; 134
    13fa:	09 f0       	breq	.+2      	; 0x13fe <__stack+0x2ff>
    13fc:	b3 94       	inc	r11
    13fe:	a3 fc       	sbrc	r10, 3
    1400:	10 c0       	rjmp	.+32     	; 0x1422 <__stack+0x323>
    1402:	a0 fe       	sbrs	r10, 0
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <__stack+0x313>
    1406:	b2 14       	cp	r11, r2
    1408:	80 f4       	brcc	.+32     	; 0x142a <__stack+0x32b>
    140a:	28 0c       	add	r2, r8
    140c:	92 2c       	mov	r9, r2
    140e:	9b 18       	sub	r9, r11
    1410:	0d c0       	rjmp	.+26     	; 0x142c <__stack+0x32d>
    1412:	b2 14       	cp	r11, r2
    1414:	58 f4       	brcc	.+22     	; 0x142c <__stack+0x32d>
    1416:	b6 01       	movw	r22, r12
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	90 d3       	rcall	.+1824   	; 0x1b3e <fputc>
    141e:	b3 94       	inc	r11
    1420:	f8 cf       	rjmp	.-16     	; 0x1412 <__stack+0x313>
    1422:	b2 14       	cp	r11, r2
    1424:	18 f4       	brcc	.+6      	; 0x142c <__stack+0x32d>
    1426:	2b 18       	sub	r2, r11
    1428:	02 c0       	rjmp	.+4      	; 0x142e <__stack+0x32f>
    142a:	98 2c       	mov	r9, r8
    142c:	21 2c       	mov	r2, r1
    142e:	a4 fe       	sbrs	r10, 4
    1430:	0f c0       	rjmp	.+30     	; 0x1450 <__stack+0x351>
    1432:	b6 01       	movw	r22, r12
    1434:	80 e3       	ldi	r24, 0x30	; 48
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	82 d3       	rcall	.+1796   	; 0x1b3e <fputc>
    143a:	a2 fe       	sbrs	r10, 2
    143c:	16 c0       	rjmp	.+44     	; 0x146a <__stack+0x36b>
    143e:	a1 fc       	sbrc	r10, 1
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <__stack+0x349>
    1442:	88 e7       	ldi	r24, 0x78	; 120
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <__stack+0x34d>
    1448:	88 e5       	ldi	r24, 0x58	; 88
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	b6 01       	movw	r22, r12
    144e:	0c c0       	rjmp	.+24     	; 0x1468 <__stack+0x369>
    1450:	8a 2d       	mov	r24, r10
    1452:	86 78       	andi	r24, 0x86	; 134
    1454:	51 f0       	breq	.+20     	; 0x146a <__stack+0x36b>
    1456:	a1 fe       	sbrs	r10, 1
    1458:	02 c0       	rjmp	.+4      	; 0x145e <__stack+0x35f>
    145a:	8b e2       	ldi	r24, 0x2B	; 43
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <__stack+0x361>
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	a7 fc       	sbrc	r10, 7
    1462:	8d e2       	ldi	r24, 0x2D	; 45
    1464:	b6 01       	movw	r22, r12
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	6a d3       	rcall	.+1748   	; 0x1b3e <fputc>
    146a:	89 14       	cp	r8, r9
    146c:	30 f4       	brcc	.+12     	; 0x147a <__stack+0x37b>
    146e:	b6 01       	movw	r22, r12
    1470:	80 e3       	ldi	r24, 0x30	; 48
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	64 d3       	rcall	.+1736   	; 0x1b3e <fputc>
    1476:	9a 94       	dec	r9
    1478:	f8 cf       	rjmp	.-16     	; 0x146a <__stack+0x36b>
    147a:	8a 94       	dec	r8
    147c:	f3 01       	movw	r30, r6
    147e:	e8 0d       	add	r30, r8
    1480:	f1 1d       	adc	r31, r1
    1482:	80 81       	ld	r24, Z
    1484:	b6 01       	movw	r22, r12
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	5a d3       	rcall	.+1716   	; 0x1b3e <fputc>
    148a:	81 10       	cpse	r8, r1
    148c:	f6 cf       	rjmp	.-20     	; 0x147a <__stack+0x37b>
    148e:	22 20       	and	r2, r2
    1490:	09 f4       	brne	.+2      	; 0x1494 <__stack+0x395>
    1492:	4e ce       	rjmp	.-868    	; 0x1130 <__stack+0x31>
    1494:	b6 01       	movw	r22, r12
    1496:	80 e2       	ldi	r24, 0x20	; 32
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	51 d3       	rcall	.+1698   	; 0x1b3e <fputc>
    149c:	2a 94       	dec	r2
    149e:	f7 cf       	rjmp	.-18     	; 0x148e <__stack+0x38f>
    14a0:	f6 01       	movw	r30, r12
    14a2:	86 81       	ldd	r24, Z+6	; 0x06
    14a4:	97 81       	ldd	r25, Z+7	; 0x07
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <__stack+0x3ad>
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	2b 96       	adiw	r28, 0x0b	; 11
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	bf 90       	pop	r11
    14ca:	af 90       	pop	r10
    14cc:	9f 90       	pop	r9
    14ce:	8f 90       	pop	r8
    14d0:	7f 90       	pop	r7
    14d2:	6f 90       	pop	r6
    14d4:	5f 90       	pop	r5
    14d6:	4f 90       	pop	r4
    14d8:	3f 90       	pop	r3
    14da:	2f 90       	pop	r2
    14dc:	08 95       	ret

000014de <putval>:
    14de:	20 fd       	sbrc	r18, 0
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <putval+0x16>
    14e2:	fc 01       	movw	r30, r24
    14e4:	23 fd       	sbrc	r18, 3
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <putval+0x14>
    14e8:	22 ff       	sbrs	r18, 2
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <putval+0x12>
    14ec:	73 83       	std	Z+3, r23	; 0x03
    14ee:	62 83       	std	Z+2, r22	; 0x02
    14f0:	51 83       	std	Z+1, r21	; 0x01
    14f2:	40 83       	st	Z, r20
    14f4:	08 95       	ret

000014f6 <mulacc>:
    14f6:	44 fd       	sbrc	r20, 4
    14f8:	17 c0       	rjmp	.+46     	; 0x1528 <mulacc+0x32>
    14fa:	46 fd       	sbrc	r20, 6
    14fc:	17 c0       	rjmp	.+46     	; 0x152c <mulacc+0x36>
    14fe:	ab 01       	movw	r20, r22
    1500:	bc 01       	movw	r22, r24
    1502:	da 01       	movw	r26, r20
    1504:	fb 01       	movw	r30, r22
    1506:	aa 0f       	add	r26, r26
    1508:	bb 1f       	adc	r27, r27
    150a:	ee 1f       	adc	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	10 94       	com	r1
    1510:	d1 f7       	brne	.-12     	; 0x1506 <mulacc+0x10>
    1512:	4a 0f       	add	r20, r26
    1514:	5b 1f       	adc	r21, r27
    1516:	6e 1f       	adc	r22, r30
    1518:	7f 1f       	adc	r23, r31
    151a:	cb 01       	movw	r24, r22
    151c:	ba 01       	movw	r22, r20
    151e:	66 0f       	add	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	09 c0       	rjmp	.+18     	; 0x153a <mulacc+0x44>
    1528:	33 e0       	ldi	r19, 0x03	; 3
    152a:	01 c0       	rjmp	.+2      	; 0x152e <mulacc+0x38>
    152c:	34 e0       	ldi	r19, 0x04	; 4
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	31 50       	subi	r19, 0x01	; 1
    1538:	d1 f7       	brne	.-12     	; 0x152e <mulacc+0x38>
    153a:	62 0f       	add	r22, r18
    153c:	71 1d       	adc	r23, r1
    153e:	81 1d       	adc	r24, r1
    1540:	91 1d       	adc	r25, r1
    1542:	08 95       	ret

00001544 <skip_spaces>:
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	8c 01       	movw	r16, r24
    154e:	c8 01       	movw	r24, r16
    1550:	b8 d2       	rcall	.+1392   	; 0x1ac2 <fgetc>
    1552:	ec 01       	movw	r28, r24
    1554:	97 fd       	sbrc	r25, 7
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <skip_spaces+0x20>
    1558:	8b d2       	rcall	.+1302   	; 0x1a70 <isspace>
    155a:	89 2b       	or	r24, r25
    155c:	c1 f7       	brne	.-16     	; 0x154e <skip_spaces+0xa>
    155e:	b8 01       	movw	r22, r16
    1560:	ce 01       	movw	r24, r28
    1562:	29 d3       	rcall	.+1618   	; 0x1bb6 <ungetc>
    1564:	ce 01       	movw	r24, r28
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	08 95       	ret

00001570 <conv_int>:
    1570:	8f 92       	push	r8
    1572:	9f 92       	push	r9
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	8c 01       	movw	r16, r24
    1586:	d6 2f       	mov	r29, r22
    1588:	7a 01       	movw	r14, r20
    158a:	b2 2e       	mov	r11, r18
    158c:	9a d2       	rcall	.+1332   	; 0x1ac2 <fgetc>
    158e:	9c 01       	movw	r18, r24
    1590:	33 27       	eor	r19, r19
    1592:	2b 32       	cpi	r18, 0x2B	; 43
    1594:	31 05       	cpc	r19, r1
    1596:	31 f0       	breq	.+12     	; 0x15a4 <conv_int+0x34>
    1598:	2d 32       	cpi	r18, 0x2D	; 45
    159a:	31 05       	cpc	r19, r1
    159c:	59 f4       	brne	.+22     	; 0x15b4 <conv_int+0x44>
    159e:	8b 2d       	mov	r24, r11
    15a0:	80 68       	ori	r24, 0x80	; 128
    15a2:	b8 2e       	mov	r11, r24
    15a4:	d1 50       	subi	r29, 0x01	; 1
    15a6:	11 f4       	brne	.+4      	; 0x15ac <conv_int+0x3c>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	61 c0       	rjmp	.+194    	; 0x166e <conv_int+0xfe>
    15ac:	c8 01       	movw	r24, r16
    15ae:	89 d2       	rcall	.+1298   	; 0x1ac2 <fgetc>
    15b0:	97 fd       	sbrc	r25, 7
    15b2:	fa cf       	rjmp	.-12     	; 0x15a8 <conv_int+0x38>
    15b4:	cb 2d       	mov	r28, r11
    15b6:	cd 7f       	andi	r28, 0xFD	; 253
    15b8:	2b 2d       	mov	r18, r11
    15ba:	20 73       	andi	r18, 0x30	; 48
    15bc:	f9 f4       	brne	.+62     	; 0x15fc <conv_int+0x8c>
    15be:	80 33       	cpi	r24, 0x30	; 48
    15c0:	e9 f4       	brne	.+58     	; 0x15fc <conv_int+0x8c>
    15c2:	aa 24       	eor	r10, r10
    15c4:	aa 94       	dec	r10
    15c6:	ad 0e       	add	r10, r29
    15c8:	09 f4       	brne	.+2      	; 0x15cc <conv_int+0x5c>
    15ca:	3e c0       	rjmp	.+124    	; 0x1648 <conv_int+0xd8>
    15cc:	c8 01       	movw	r24, r16
    15ce:	79 d2       	rcall	.+1266   	; 0x1ac2 <fgetc>
    15d0:	97 fd       	sbrc	r25, 7
    15d2:	3a c0       	rjmp	.+116    	; 0x1648 <conv_int+0xd8>
    15d4:	9c 01       	movw	r18, r24
    15d6:	2f 7d       	andi	r18, 0xDF	; 223
    15d8:	33 27       	eor	r19, r19
    15da:	28 35       	cpi	r18, 0x58	; 88
    15dc:	31 05       	cpc	r19, r1
    15de:	41 f4       	brne	.+16     	; 0x15f0 <conv_int+0x80>
    15e0:	c2 64       	ori	r28, 0x42	; 66
    15e2:	d2 50       	subi	r29, 0x02	; 2
    15e4:	89 f1       	breq	.+98     	; 0x1648 <conv_int+0xd8>
    15e6:	c8 01       	movw	r24, r16
    15e8:	6c d2       	rcall	.+1240   	; 0x1ac2 <fgetc>
    15ea:	97 ff       	sbrs	r25, 7
    15ec:	07 c0       	rjmp	.+14     	; 0x15fc <conv_int+0x8c>
    15ee:	2c c0       	rjmp	.+88     	; 0x1648 <conv_int+0xd8>
    15f0:	b6 fe       	sbrs	r11, 6
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <conv_int+0x88>
    15f4:	c2 60       	ori	r28, 0x02	; 2
    15f6:	01 c0       	rjmp	.+2      	; 0x15fa <conv_int+0x8a>
    15f8:	c2 61       	ori	r28, 0x12	; 18
    15fa:	da 2d       	mov	r29, r10
    15fc:	81 2c       	mov	r8, r1
    15fe:	91 2c       	mov	r9, r1
    1600:	54 01       	movw	r10, r8
    1602:	20 ed       	ldi	r18, 0xD0	; 208
    1604:	28 0f       	add	r18, r24
    1606:	28 30       	cpi	r18, 0x08	; 8
    1608:	78 f0       	brcs	.+30     	; 0x1628 <conv_int+0xb8>
    160a:	c4 ff       	sbrs	r28, 4
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <conv_int+0xa4>
    160e:	b8 01       	movw	r22, r16
    1610:	d2 d2       	rcall	.+1444   	; 0x1bb6 <ungetc>
    1612:	17 c0       	rjmp	.+46     	; 0x1642 <conv_int+0xd2>
    1614:	2a 30       	cpi	r18, 0x0A	; 10
    1616:	40 f0       	brcs	.+16     	; 0x1628 <conv_int+0xb8>
    1618:	c6 ff       	sbrs	r28, 6
    161a:	f9 cf       	rjmp	.-14     	; 0x160e <conv_int+0x9e>
    161c:	2f 7d       	andi	r18, 0xDF	; 223
    161e:	3f ee       	ldi	r19, 0xEF	; 239
    1620:	32 0f       	add	r19, r18
    1622:	36 30       	cpi	r19, 0x06	; 6
    1624:	a0 f7       	brcc	.-24     	; 0x160e <conv_int+0x9e>
    1626:	27 50       	subi	r18, 0x07	; 7
    1628:	4c 2f       	mov	r20, r28
    162a:	c5 01       	movw	r24, r10
    162c:	b4 01       	movw	r22, r8
    162e:	63 df       	rcall	.-314    	; 0x14f6 <mulacc>
    1630:	4b 01       	movw	r8, r22
    1632:	5c 01       	movw	r10, r24
    1634:	c2 60       	ori	r28, 0x02	; 2
    1636:	d1 50       	subi	r29, 0x01	; 1
    1638:	51 f0       	breq	.+20     	; 0x164e <conv_int+0xde>
    163a:	c8 01       	movw	r24, r16
    163c:	42 d2       	rcall	.+1156   	; 0x1ac2 <fgetc>
    163e:	97 ff       	sbrs	r25, 7
    1640:	e0 cf       	rjmp	.-64     	; 0x1602 <conv_int+0x92>
    1642:	c1 fd       	sbrc	r28, 1
    1644:	04 c0       	rjmp	.+8      	; 0x164e <conv_int+0xde>
    1646:	b0 cf       	rjmp	.-160    	; 0x15a8 <conv_int+0x38>
    1648:	81 2c       	mov	r8, r1
    164a:	91 2c       	mov	r9, r1
    164c:	54 01       	movw	r10, r8
    164e:	c7 ff       	sbrs	r28, 7
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <conv_int+0xf2>
    1652:	b0 94       	com	r11
    1654:	a0 94       	com	r10
    1656:	90 94       	com	r9
    1658:	80 94       	com	r8
    165a:	81 1c       	adc	r8, r1
    165c:	91 1c       	adc	r9, r1
    165e:	a1 1c       	adc	r10, r1
    1660:	b1 1c       	adc	r11, r1
    1662:	2c 2f       	mov	r18, r28
    1664:	b5 01       	movw	r22, r10
    1666:	a4 01       	movw	r20, r8
    1668:	c7 01       	movw	r24, r14
    166a:	39 df       	rcall	.-398    	; 0x14de <putval>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	bf 90       	pop	r11
    167c:	af 90       	pop	r10
    167e:	9f 90       	pop	r9
    1680:	8f 90       	pop	r8
    1682:	08 95       	ret

00001684 <conv_brk>:
    1684:	5f 92       	push	r5
    1686:	6f 92       	push	r6
    1688:	7f 92       	push	r7
    168a:	8f 92       	push	r8
    168c:	9f 92       	push	r9
    168e:	af 92       	push	r10
    1690:	bf 92       	push	r11
    1692:	cf 92       	push	r12
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	a0 97       	sbiw	r28, 0x20	; 32
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	5c 01       	movw	r10, r24
    16b4:	96 2e       	mov	r9, r22
    16b6:	7a 01       	movw	r14, r20
    16b8:	f9 01       	movw	r30, r18
    16ba:	8e 01       	movw	r16, r28
    16bc:	0f 5f       	subi	r16, 0xFF	; 255
    16be:	1f 4f       	sbci	r17, 0xFF	; 255
    16c0:	68 01       	movw	r12, r16
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	d8 01       	movw	r26, r16
    16c6:	1d 92       	st	X+, r1
    16c8:	8a 95       	dec	r24
    16ca:	e9 f7       	brne	.-6      	; 0x16c6 <conv_brk+0x42>
    16cc:	d5 01       	movw	r26, r10
    16ce:	13 96       	adiw	r26, 0x03	; 3
    16d0:	8c 90       	ld	r8, X
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	61 2c       	mov	r6, r1
    16d8:	71 2c       	mov	r7, r1
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	83 fc       	sbrc	r8, 3
    16e2:	25 91       	lpm	r18, Z+
    16e4:	83 fe       	sbrs	r8, 3
    16e6:	21 91       	ld	r18, Z+
    16e8:	8f 01       	movw	r16, r30
    16ea:	52 2e       	mov	r5, r18
    16ec:	21 11       	cpse	r18, r1
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <conv_brk+0x72>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	90 c0       	rjmp	.+288    	; 0x1816 <conv_brk+0x192>
    16f6:	2e 35       	cpi	r18, 0x5E	; 94
    16f8:	11 f4       	brne	.+4      	; 0x16fe <conv_brk+0x7a>
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	51 f1       	breq	.+84     	; 0x1752 <conv_brk+0xce>
    16fe:	43 2f       	mov	r20, r19
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	48 17       	cp	r20, r24
    1704:	59 07       	cpc	r21, r25
    1706:	3c f4       	brge	.+14     	; 0x1716 <conv_brk+0x92>
    1708:	2d 35       	cpi	r18, 0x5D	; 93
    170a:	59 f1       	breq	.+86     	; 0x1762 <conv_brk+0xde>
    170c:	2d 32       	cpi	r18, 0x2D	; 45
    170e:	19 f4       	brne	.+6      	; 0x1716 <conv_brk+0x92>
    1710:	77 20       	and	r7, r7
    1712:	09 f1       	breq	.+66     	; 0x1756 <conv_brk+0xd2>
    1714:	03 c0       	rjmp	.+6      	; 0x171c <conv_brk+0x98>
    1716:	77 20       	and	r7, r7
    1718:	09 f4       	brne	.+2      	; 0x171c <conv_brk+0x98>
    171a:	68 c0       	rjmp	.+208    	; 0x17ec <conv_brk+0x168>
    171c:	45 2d       	mov	r20, r5
    171e:	46 95       	lsr	r20
    1720:	46 95       	lsr	r20
    1722:	46 95       	lsr	r20
    1724:	d6 01       	movw	r26, r12
    1726:	a4 0f       	add	r26, r20
    1728:	b1 1d       	adc	r27, r1
    172a:	45 2d       	mov	r20, r5
    172c:	47 70       	andi	r20, 0x07	; 7
    172e:	8b 01       	movw	r16, r22
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <conv_brk+0xb2>
    1732:	00 0f       	add	r16, r16
    1734:	11 1f       	adc	r17, r17
    1736:	4a 95       	dec	r20
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <conv_brk+0xae>
    173a:	a8 01       	movw	r20, r16
    173c:	5c 91       	ld	r21, X
    173e:	45 2b       	or	r20, r21
    1740:	4c 93       	st	X, r20
    1742:	65 14       	cp	r6, r5
    1744:	59 f0       	breq	.+22     	; 0x175c <conv_brk+0xd8>
    1746:	56 14       	cp	r5, r6
    1748:	10 f4       	brcc	.+4      	; 0x174e <conv_brk+0xca>
    174a:	53 94       	inc	r5
    174c:	e7 cf       	rjmp	.-50     	; 0x171c <conv_brk+0x98>
    174e:	5a 94       	dec	r5
    1750:	e5 cf       	rjmp	.-54     	; 0x171c <conv_brk+0x98>
    1752:	31 e0       	ldi	r19, 0x01	; 1
    1754:	04 c0       	rjmp	.+8      	; 0x175e <conv_brk+0xda>
    1756:	77 24       	eor	r7, r7
    1758:	73 94       	inc	r7
    175a:	01 c0       	rjmp	.+2      	; 0x175e <conv_brk+0xda>
    175c:	71 2c       	mov	r7, r1
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	bf cf       	rjmp	.-130    	; 0x16e0 <conv_brk+0x5c>
    1762:	77 20       	and	r7, r7
    1764:	19 f0       	breq	.+6      	; 0x176c <conv_brk+0xe8>
    1766:	8e 81       	ldd	r24, Y+6	; 0x06
    1768:	80 62       	ori	r24, 0x20	; 32
    176a:	8e 83       	std	Y+6, r24	; 0x06
    176c:	31 11       	cpse	r19, r1
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <conv_brk+0xf2>
    1770:	88 24       	eor	r8, r8
    1772:	83 94       	inc	r8
    1774:	17 c0       	rjmp	.+46     	; 0x17a4 <conv_brk+0x120>
    1776:	f6 01       	movw	r30, r12
    1778:	9e 01       	movw	r18, r28
    177a:	2f 5d       	subi	r18, 0xDF	; 223
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	80 95       	com	r24
    1782:	81 93       	st	Z+, r24
    1784:	2e 17       	cp	r18, r30
    1786:	3f 07       	cpc	r19, r31
    1788:	d1 f7       	brne	.-12     	; 0x177e <conv_brk+0xfa>
    178a:	f2 cf       	rjmp	.-28     	; 0x1770 <conv_brk+0xec>
    178c:	e1 14       	cp	r14, r1
    178e:	f1 04       	cpc	r15, r1
    1790:	29 f0       	breq	.+10     	; 0x179c <conv_brk+0x118>
    1792:	d7 01       	movw	r26, r14
    1794:	8c 93       	st	X, r24
    1796:	f7 01       	movw	r30, r14
    1798:	31 96       	adiw	r30, 0x01	; 1
    179a:	7f 01       	movw	r14, r30
    179c:	9a 94       	dec	r9
    179e:	81 2c       	mov	r8, r1
    17a0:	99 20       	and	r9, r9
    17a2:	e9 f0       	breq	.+58     	; 0x17de <conv_brk+0x15a>
    17a4:	c5 01       	movw	r24, r10
    17a6:	8d d1       	rcall	.+794    	; 0x1ac2 <fgetc>
    17a8:	97 fd       	sbrc	r25, 7
    17aa:	17 c0       	rjmp	.+46     	; 0x17da <conv_brk+0x156>
    17ac:	fc 01       	movw	r30, r24
    17ae:	ff 27       	eor	r31, r31
    17b0:	23 e0       	ldi	r18, 0x03	; 3
    17b2:	f5 95       	asr	r31
    17b4:	e7 95       	ror	r30
    17b6:	2a 95       	dec	r18
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <conv_brk+0x12e>
    17ba:	ec 0d       	add	r30, r12
    17bc:	fd 1d       	adc	r31, r13
    17be:	20 81       	ld	r18, Z
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	ac 01       	movw	r20, r24
    17c4:	47 70       	andi	r20, 0x07	; 7
    17c6:	55 27       	eor	r21, r21
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <conv_brk+0x14a>
    17ca:	35 95       	asr	r19
    17cc:	27 95       	ror	r18
    17ce:	4a 95       	dec	r20
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <conv_brk+0x146>
    17d2:	20 fd       	sbrc	r18, 0
    17d4:	db cf       	rjmp	.-74     	; 0x178c <conv_brk+0x108>
    17d6:	b5 01       	movw	r22, r10
    17d8:	ee d1       	rcall	.+988    	; 0x1bb6 <ungetc>
    17da:	81 10       	cpse	r8, r1
    17dc:	89 cf       	rjmp	.-238    	; 0x16f0 <conv_brk+0x6c>
    17de:	e1 14       	cp	r14, r1
    17e0:	f1 04       	cpc	r15, r1
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <conv_brk+0x164>
    17e4:	d7 01       	movw	r26, r14
    17e6:	1c 92       	st	X, r1
    17e8:	c8 01       	movw	r24, r16
    17ea:	15 c0       	rjmp	.+42     	; 0x1816 <conv_brk+0x192>
    17ec:	42 2f       	mov	r20, r18
    17ee:	46 95       	lsr	r20
    17f0:	46 95       	lsr	r20
    17f2:	46 95       	lsr	r20
    17f4:	d6 01       	movw	r26, r12
    17f6:	a4 0f       	add	r26, r20
    17f8:	b1 1d       	adc	r27, r1
    17fa:	42 2f       	mov	r20, r18
    17fc:	47 70       	andi	r20, 0x07	; 7
    17fe:	8b 01       	movw	r16, r22
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <conv_brk+0x182>
    1802:	00 0f       	add	r16, r16
    1804:	11 1f       	adc	r17, r17
    1806:	4a 95       	dec	r20
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <conv_brk+0x17e>
    180a:	a8 01       	movw	r20, r16
    180c:	5c 91       	ld	r21, X
    180e:	45 2b       	or	r20, r21
    1810:	4c 93       	st	X, r20
    1812:	62 2e       	mov	r6, r18
    1814:	a4 cf       	rjmp	.-184    	; 0x175e <conv_brk+0xda>
    1816:	a0 96       	adiw	r28, 0x20	; 32
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	8f 90       	pop	r8
    183a:	7f 90       	pop	r7
    183c:	6f 90       	pop	r6
    183e:	5f 90       	pop	r5
    1840:	08 95       	ret

00001842 <vfscanf>:
    1842:	5f 92       	push	r5
    1844:	6f 92       	push	r6
    1846:	7f 92       	push	r7
    1848:	8f 92       	push	r8
    184a:	9f 92       	push	r9
    184c:	af 92       	push	r10
    184e:	bf 92       	push	r11
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	6c 01       	movw	r12, r24
    1862:	eb 01       	movw	r28, r22
    1864:	5a 01       	movw	r10, r20
    1866:	fc 01       	movw	r30, r24
    1868:	17 82       	std	Z+7, r1	; 0x07
    186a:	16 82       	std	Z+6, r1	; 0x06
    186c:	51 2c       	mov	r5, r1
    186e:	f6 01       	movw	r30, r12
    1870:	e3 80       	ldd	r14, Z+3	; 0x03
    1872:	fe 01       	movw	r30, r28
    1874:	e3 fc       	sbrc	r14, 3
    1876:	85 91       	lpm	r24, Z+
    1878:	e3 fe       	sbrs	r14, 3
    187a:	81 91       	ld	r24, Z+
    187c:	18 2f       	mov	r17, r24
    187e:	ef 01       	movw	r28, r30
    1880:	88 23       	and	r24, r24
    1882:	09 f4       	brne	.+2      	; 0x1886 <vfscanf+0x44>
    1884:	e0 c0       	rjmp	.+448    	; 0x1a46 <vfscanf+0x204>
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	f3 d0       	rcall	.+486    	; 0x1a70 <isspace>
    188a:	89 2b       	or	r24, r25
    188c:	19 f0       	breq	.+6      	; 0x1894 <vfscanf+0x52>
    188e:	c6 01       	movw	r24, r12
    1890:	59 de       	rcall	.-846    	; 0x1544 <skip_spaces>
    1892:	ed cf       	rjmp	.-38     	; 0x186e <vfscanf+0x2c>
    1894:	15 32       	cpi	r17, 0x25	; 37
    1896:	41 f4       	brne	.+16     	; 0x18a8 <vfscanf+0x66>
    1898:	fe 01       	movw	r30, r28
    189a:	e3 fc       	sbrc	r14, 3
    189c:	15 91       	lpm	r17, Z+
    189e:	e3 fe       	sbrs	r14, 3
    18a0:	11 91       	ld	r17, Z+
    18a2:	ef 01       	movw	r28, r30
    18a4:	15 32       	cpi	r17, 0x25	; 37
    18a6:	71 f4       	brne	.+28     	; 0x18c4 <vfscanf+0x82>
    18a8:	c6 01       	movw	r24, r12
    18aa:	0b d1       	rcall	.+534    	; 0x1ac2 <fgetc>
    18ac:	97 fd       	sbrc	r25, 7
    18ae:	c9 c0       	rjmp	.+402    	; 0x1a42 <vfscanf+0x200>
    18b0:	41 2f       	mov	r20, r17
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	9c 01       	movw	r18, r24
    18b6:	33 27       	eor	r19, r19
    18b8:	24 17       	cp	r18, r20
    18ba:	35 07       	cpc	r19, r21
    18bc:	c1 f2       	breq	.-80     	; 0x186e <vfscanf+0x2c>
    18be:	b6 01       	movw	r22, r12
    18c0:	7a d1       	rcall	.+756    	; 0x1bb6 <ungetc>
    18c2:	c1 c0       	rjmp	.+386    	; 0x1a46 <vfscanf+0x204>
    18c4:	1a 32       	cpi	r17, 0x2A	; 42
    18c6:	39 f4       	brne	.+14     	; 0x18d6 <vfscanf+0x94>
    18c8:	e3 fc       	sbrc	r14, 3
    18ca:	15 91       	lpm	r17, Z+
    18cc:	e3 fe       	sbrs	r14, 3
    18ce:	11 91       	ld	r17, Z+
    18d0:	ef 01       	movw	r28, r30
    18d2:	01 e0       	ldi	r16, 0x01	; 1
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <vfscanf+0x96>
    18d6:	00 e0       	ldi	r16, 0x00	; 0
    18d8:	f1 2c       	mov	r15, r1
    18da:	20 ed       	ldi	r18, 0xD0	; 208
    18dc:	21 0f       	add	r18, r17
    18de:	2a 30       	cpi	r18, 0x0A	; 10
    18e0:	78 f4       	brcc	.+30     	; 0x1900 <vfscanf+0xbe>
    18e2:	02 60       	ori	r16, 0x02	; 2
    18e4:	6f 2d       	mov	r22, r15
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	40 e2       	ldi	r20, 0x20	; 32
    18ee:	03 de       	rcall	.-1018   	; 0x14f6 <mulacc>
    18f0:	f6 2e       	mov	r15, r22
    18f2:	fe 01       	movw	r30, r28
    18f4:	e3 fc       	sbrc	r14, 3
    18f6:	15 91       	lpm	r17, Z+
    18f8:	e3 fe       	sbrs	r14, 3
    18fa:	11 91       	ld	r17, Z+
    18fc:	ef 01       	movw	r28, r30
    18fe:	ed cf       	rjmp	.-38     	; 0x18da <vfscanf+0x98>
    1900:	01 ff       	sbrs	r16, 1
    1902:	03 c0       	rjmp	.+6      	; 0x190a <vfscanf+0xc8>
    1904:	f1 10       	cpse	r15, r1
    1906:	03 c0       	rjmp	.+6      	; 0x190e <vfscanf+0xcc>
    1908:	9e c0       	rjmp	.+316    	; 0x1a46 <vfscanf+0x204>
    190a:	ff 24       	eor	r15, r15
    190c:	fa 94       	dec	r15
    190e:	18 36       	cpi	r17, 0x68	; 104
    1910:	19 f0       	breq	.+6      	; 0x1918 <vfscanf+0xd6>
    1912:	1c 36       	cpi	r17, 0x6C	; 108
    1914:	51 f0       	breq	.+20     	; 0x192a <vfscanf+0xe8>
    1916:	10 c0       	rjmp	.+32     	; 0x1938 <vfscanf+0xf6>
    1918:	fe 01       	movw	r30, r28
    191a:	e3 fc       	sbrc	r14, 3
    191c:	15 91       	lpm	r17, Z+
    191e:	e3 fe       	sbrs	r14, 3
    1920:	11 91       	ld	r17, Z+
    1922:	ef 01       	movw	r28, r30
    1924:	18 36       	cpi	r17, 0x68	; 104
    1926:	41 f4       	brne	.+16     	; 0x1938 <vfscanf+0xf6>
    1928:	08 60       	ori	r16, 0x08	; 8
    192a:	04 60       	ori	r16, 0x04	; 4
    192c:	fe 01       	movw	r30, r28
    192e:	e3 fc       	sbrc	r14, 3
    1930:	15 91       	lpm	r17, Z+
    1932:	e3 fe       	sbrs	r14, 3
    1934:	11 91       	ld	r17, Z+
    1936:	ef 01       	movw	r28, r30
    1938:	11 23       	and	r17, r17
    193a:	09 f4       	brne	.+2      	; 0x193e <vfscanf+0xfc>
    193c:	84 c0       	rjmp	.+264    	; 0x1a46 <vfscanf+0x204>
    193e:	61 2f       	mov	r22, r17
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	8c e8       	ldi	r24, 0x8C	; 140
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c d0       	rcall	.+312    	; 0x1a80 <strchr_P>
    1948:	89 2b       	or	r24, r25
    194a:	09 f4       	brne	.+2      	; 0x194e <vfscanf+0x10c>
    194c:	7c c0       	rjmp	.+248    	; 0x1a46 <vfscanf+0x204>
    194e:	00 fd       	sbrc	r16, 0
    1950:	07 c0       	rjmp	.+14     	; 0x1960 <vfscanf+0x11e>
    1952:	f5 01       	movw	r30, r10
    1954:	80 80       	ld	r8, Z
    1956:	91 80       	ldd	r9, Z+1	; 0x01
    1958:	c5 01       	movw	r24, r10
    195a:	02 96       	adiw	r24, 0x02	; 2
    195c:	5c 01       	movw	r10, r24
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <vfscanf+0x122>
    1960:	81 2c       	mov	r8, r1
    1962:	91 2c       	mov	r9, r1
    1964:	1e 36       	cpi	r17, 0x6E	; 110
    1966:	49 f4       	brne	.+18     	; 0x197a <vfscanf+0x138>
    1968:	f6 01       	movw	r30, r12
    196a:	46 81       	ldd	r20, Z+6	; 0x06
    196c:	57 81       	ldd	r21, Z+7	; 0x07
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	20 2f       	mov	r18, r16
    1974:	c4 01       	movw	r24, r8
    1976:	b3 dd       	rcall	.-1178   	; 0x14de <putval>
    1978:	7a cf       	rjmp	.-268    	; 0x186e <vfscanf+0x2c>
    197a:	13 36       	cpi	r17, 0x63	; 99
    197c:	a1 f4       	brne	.+40     	; 0x19a6 <vfscanf+0x164>
    197e:	01 fd       	sbrc	r16, 1
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <vfscanf+0x144>
    1982:	ff 24       	eor	r15, r15
    1984:	f3 94       	inc	r15
    1986:	c6 01       	movw	r24, r12
    1988:	9c d0       	rcall	.+312    	; 0x1ac2 <fgetc>
    198a:	97 fd       	sbrc	r25, 7
    198c:	5a c0       	rjmp	.+180    	; 0x1a42 <vfscanf+0x200>
    198e:	81 14       	cp	r8, r1
    1990:	91 04       	cpc	r9, r1
    1992:	29 f0       	breq	.+10     	; 0x199e <vfscanf+0x15c>
    1994:	f4 01       	movw	r30, r8
    1996:	80 83       	st	Z, r24
    1998:	c4 01       	movw	r24, r8
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	4c 01       	movw	r8, r24
    199e:	fa 94       	dec	r15
    19a0:	f1 10       	cpse	r15, r1
    19a2:	f1 cf       	rjmp	.-30     	; 0x1986 <vfscanf+0x144>
    19a4:	4a c0       	rjmp	.+148    	; 0x1a3a <vfscanf+0x1f8>
    19a6:	1b 35       	cpi	r17, 0x5B	; 91
    19a8:	51 f4       	brne	.+20     	; 0x19be <vfscanf+0x17c>
    19aa:	9e 01       	movw	r18, r28
    19ac:	a4 01       	movw	r20, r8
    19ae:	6f 2d       	mov	r22, r15
    19b0:	c6 01       	movw	r24, r12
    19b2:	68 de       	rcall	.-816    	; 0x1684 <conv_brk>
    19b4:	ec 01       	movw	r28, r24
    19b6:	89 2b       	or	r24, r25
    19b8:	09 f0       	breq	.+2      	; 0x19bc <vfscanf+0x17a>
    19ba:	3f c0       	rjmp	.+126    	; 0x1a3a <vfscanf+0x1f8>
    19bc:	39 c0       	rjmp	.+114    	; 0x1a30 <vfscanf+0x1ee>
    19be:	c6 01       	movw	r24, r12
    19c0:	c1 dd       	rcall	.-1150   	; 0x1544 <skip_spaces>
    19c2:	97 fd       	sbrc	r25, 7
    19c4:	3e c0       	rjmp	.+124    	; 0x1a42 <vfscanf+0x200>
    19c6:	1f 36       	cpi	r17, 0x6F	; 111
    19c8:	49 f1       	breq	.+82     	; 0x1a1c <vfscanf+0x1da>
    19ca:	28 f4       	brcc	.+10     	; 0x19d6 <vfscanf+0x194>
    19cc:	14 36       	cpi	r17, 0x64	; 100
    19ce:	21 f1       	breq	.+72     	; 0x1a18 <vfscanf+0x1d6>
    19d0:	19 36       	cpi	r17, 0x69	; 105
    19d2:	39 f1       	breq	.+78     	; 0x1a22 <vfscanf+0x1e0>
    19d4:	25 c0       	rjmp	.+74     	; 0x1a20 <vfscanf+0x1de>
    19d6:	13 37       	cpi	r17, 0x73	; 115
    19d8:	71 f0       	breq	.+28     	; 0x19f6 <vfscanf+0x1b4>
    19da:	15 37       	cpi	r17, 0x75	; 117
    19dc:	e9 f0       	breq	.+58     	; 0x1a18 <vfscanf+0x1d6>
    19de:	20 c0       	rjmp	.+64     	; 0x1a20 <vfscanf+0x1de>
    19e0:	81 14       	cp	r8, r1
    19e2:	91 04       	cpc	r9, r1
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <vfscanf+0x1ae>
    19e6:	f4 01       	movw	r30, r8
    19e8:	60 82       	st	Z, r6
    19ea:	c4 01       	movw	r24, r8
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	4c 01       	movw	r8, r24
    19f0:	fa 94       	dec	r15
    19f2:	ff 20       	and	r15, r15
    19f4:	59 f0       	breq	.+22     	; 0x1a0c <vfscanf+0x1ca>
    19f6:	c6 01       	movw	r24, r12
    19f8:	64 d0       	rcall	.+200    	; 0x1ac2 <fgetc>
    19fa:	3c 01       	movw	r6, r24
    19fc:	97 fd       	sbrc	r25, 7
    19fe:	06 c0       	rjmp	.+12     	; 0x1a0c <vfscanf+0x1ca>
    1a00:	37 d0       	rcall	.+110    	; 0x1a70 <isspace>
    1a02:	89 2b       	or	r24, r25
    1a04:	69 f3       	breq	.-38     	; 0x19e0 <vfscanf+0x19e>
    1a06:	b6 01       	movw	r22, r12
    1a08:	c3 01       	movw	r24, r6
    1a0a:	d5 d0       	rcall	.+426    	; 0x1bb6 <ungetc>
    1a0c:	81 14       	cp	r8, r1
    1a0e:	91 04       	cpc	r9, r1
    1a10:	a1 f0       	breq	.+40     	; 0x1a3a <vfscanf+0x1f8>
    1a12:	f4 01       	movw	r30, r8
    1a14:	10 82       	st	Z, r1
    1a16:	11 c0       	rjmp	.+34     	; 0x1a3a <vfscanf+0x1f8>
    1a18:	00 62       	ori	r16, 0x20	; 32
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <vfscanf+0x1e0>
    1a1c:	00 61       	ori	r16, 0x10	; 16
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <vfscanf+0x1e0>
    1a20:	00 64       	ori	r16, 0x40	; 64
    1a22:	20 2f       	mov	r18, r16
    1a24:	a4 01       	movw	r20, r8
    1a26:	6f 2d       	mov	r22, r15
    1a28:	c6 01       	movw	r24, r12
    1a2a:	a2 dd       	rcall	.-1212   	; 0x1570 <conv_int>
    1a2c:	81 11       	cpse	r24, r1
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <vfscanf+0x1f8>
    1a30:	f6 01       	movw	r30, r12
    1a32:	83 81       	ldd	r24, Z+3	; 0x03
    1a34:	80 73       	andi	r24, 0x30	; 48
    1a36:	29 f4       	brne	.+10     	; 0x1a42 <vfscanf+0x200>
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <vfscanf+0x204>
    1a3a:	00 fd       	sbrc	r16, 0
    1a3c:	18 cf       	rjmp	.-464    	; 0x186e <vfscanf+0x2c>
    1a3e:	53 94       	inc	r5
    1a40:	16 cf       	rjmp	.-468    	; 0x186e <vfscanf+0x2c>
    1a42:	55 20       	and	r5, r5
    1a44:	19 f0       	breq	.+6      	; 0x1a4c <vfscanf+0x20a>
    1a46:	85 2d       	mov	r24, r5
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <vfscanf+0x20e>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	9f ef       	ldi	r25, 0xFF	; 255
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	ff 90       	pop	r15
    1a5a:	ef 90       	pop	r14
    1a5c:	df 90       	pop	r13
    1a5e:	cf 90       	pop	r12
    1a60:	bf 90       	pop	r11
    1a62:	af 90       	pop	r10
    1a64:	9f 90       	pop	r9
    1a66:	8f 90       	pop	r8
    1a68:	7f 90       	pop	r7
    1a6a:	6f 90       	pop	r6
    1a6c:	5f 90       	pop	r5
    1a6e:	08 95       	ret

00001a70 <isspace>:
    1a70:	91 11       	cpse	r25, r1
    1a72:	18 c1       	rjmp	.+560    	; 0x1ca4 <__ctype_isfalse>
    1a74:	80 32       	cpi	r24, 0x20	; 32
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <isspace+0xe>
    1a78:	89 50       	subi	r24, 0x09	; 9
    1a7a:	85 50       	subi	r24, 0x05	; 5
    1a7c:	d0 f7       	brcc	.-12     	; 0x1a72 <isspace+0x2>
    1a7e:	08 95       	ret

00001a80 <strchr_P>:
    1a80:	fc 01       	movw	r30, r24
    1a82:	05 90       	lpm	r0, Z+
    1a84:	06 16       	cp	r0, r22
    1a86:	21 f0       	breq	.+8      	; 0x1a90 <strchr_P+0x10>
    1a88:	00 20       	and	r0, r0
    1a8a:	d9 f7       	brne	.-10     	; 0x1a82 <strchr_P+0x2>
    1a8c:	c0 01       	movw	r24, r0
    1a8e:	08 95       	ret
    1a90:	31 97       	sbiw	r30, 0x01	; 1
    1a92:	cf 01       	movw	r24, r30
    1a94:	08 95       	ret

00001a96 <strnlen_P>:
    1a96:	fc 01       	movw	r30, r24
    1a98:	05 90       	lpm	r0, Z+
    1a9a:	61 50       	subi	r22, 0x01	; 1
    1a9c:	70 40       	sbci	r23, 0x00	; 0
    1a9e:	01 10       	cpse	r0, r1
    1aa0:	d8 f7       	brcc	.-10     	; 0x1a98 <strnlen_P+0x2>
    1aa2:	80 95       	com	r24
    1aa4:	90 95       	com	r25
    1aa6:	8e 0f       	add	r24, r30
    1aa8:	9f 1f       	adc	r25, r31
    1aaa:	08 95       	ret

00001aac <strnlen>:
    1aac:	fc 01       	movw	r30, r24
    1aae:	61 50       	subi	r22, 0x01	; 1
    1ab0:	70 40       	sbci	r23, 0x00	; 0
    1ab2:	01 90       	ld	r0, Z+
    1ab4:	01 10       	cpse	r0, r1
    1ab6:	d8 f7       	brcc	.-10     	; 0x1aae <strnlen+0x2>
    1ab8:	80 95       	com	r24
    1aba:	90 95       	com	r25
    1abc:	8e 0f       	add	r24, r30
    1abe:	9f 1f       	adc	r25, r31
    1ac0:	08 95       	ret

00001ac2 <fgetc>:
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	ec 01       	movw	r28, r24
    1ac8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aca:	20 ff       	sbrs	r18, 0
    1acc:	33 c0       	rjmp	.+102    	; 0x1b34 <fgetc+0x72>
    1ace:	26 ff       	sbrs	r18, 6
    1ad0:	0a c0       	rjmp	.+20     	; 0x1ae6 <fgetc+0x24>
    1ad2:	2f 7b       	andi	r18, 0xBF	; 191
    1ad4:	2b 83       	std	Y+3, r18	; 0x03
    1ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	9f 83       	std	Y+7, r25	; 0x07
    1ade:	8e 83       	std	Y+6, r24	; 0x06
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	29 c0       	rjmp	.+82     	; 0x1b38 <fgetc+0x76>
    1ae6:	22 ff       	sbrs	r18, 2
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <fgetc+0x46>
    1aea:	e8 81       	ld	r30, Y
    1aec:	f9 81       	ldd	r31, Y+1	; 0x01
    1aee:	80 81       	ld	r24, Z
    1af0:	08 2e       	mov	r0, r24
    1af2:	00 0c       	add	r0, r0
    1af4:	99 0b       	sbc	r25, r25
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	19 f4       	brne	.+6      	; 0x1b00 <fgetc+0x3e>
    1afa:	20 62       	ori	r18, 0x20	; 32
    1afc:	2b 83       	std	Y+3, r18	; 0x03
    1afe:	1a c0       	rjmp	.+52     	; 0x1b34 <fgetc+0x72>
    1b00:	31 96       	adiw	r30, 0x01	; 1
    1b02:	f9 83       	std	Y+1, r31	; 0x01
    1b04:	e8 83       	st	Y, r30
    1b06:	0e c0       	rjmp	.+28     	; 0x1b24 <fgetc+0x62>
    1b08:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b0a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b0c:	09 95       	icall
    1b0e:	97 ff       	sbrs	r25, 7
    1b10:	09 c0       	rjmp	.+18     	; 0x1b24 <fgetc+0x62>
    1b12:	2b 81       	ldd	r18, Y+3	; 0x03
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <fgetc+0x5a>
    1b18:	80 e2       	ldi	r24, 0x20	; 32
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <fgetc+0x5c>
    1b1c:	80 e1       	ldi	r24, 0x10	; 16
    1b1e:	82 2b       	or	r24, r18
    1b20:	8b 83       	std	Y+3, r24	; 0x03
    1b22:	08 c0       	rjmp	.+16     	; 0x1b34 <fgetc+0x72>
    1b24:	2e 81       	ldd	r18, Y+6	; 0x06
    1b26:	3f 81       	ldd	r19, Y+7	; 0x07
    1b28:	2f 5f       	subi	r18, 0xFF	; 255
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	3f 83       	std	Y+7, r19	; 0x07
    1b2e:	2e 83       	std	Y+6, r18	; 0x06
    1b30:	99 27       	eor	r25, r25
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <fgetc+0x76>
    1b34:	8f ef       	ldi	r24, 0xFF	; 255
    1b36:	9f ef       	ldi	r25, 0xFF	; 255
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

00001b3e <fputc>:
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	fb 01       	movw	r30, r22
    1b48:	23 81       	ldd	r18, Z+3	; 0x03
    1b4a:	21 fd       	sbrc	r18, 1
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <fputc+0x16>
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	9f ef       	ldi	r25, 0xFF	; 255
    1b52:	2c c0       	rjmp	.+88     	; 0x1bac <fputc+0x6e>
    1b54:	22 ff       	sbrs	r18, 2
    1b56:	16 c0       	rjmp	.+44     	; 0x1b84 <fputc+0x46>
    1b58:	46 81       	ldd	r20, Z+6	; 0x06
    1b5a:	57 81       	ldd	r21, Z+7	; 0x07
    1b5c:	24 81       	ldd	r18, Z+4	; 0x04
    1b5e:	35 81       	ldd	r19, Z+5	; 0x05
    1b60:	42 17       	cp	r20, r18
    1b62:	53 07       	cpc	r21, r19
    1b64:	44 f4       	brge	.+16     	; 0x1b76 <fputc+0x38>
    1b66:	a0 81       	ld	r26, Z
    1b68:	b1 81       	ldd	r27, Z+1	; 0x01
    1b6a:	9d 01       	movw	r18, r26
    1b6c:	2f 5f       	subi	r18, 0xFF	; 255
    1b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b70:	31 83       	std	Z+1, r19	; 0x01
    1b72:	20 83       	st	Z, r18
    1b74:	8c 93       	st	X, r24
    1b76:	26 81       	ldd	r18, Z+6	; 0x06
    1b78:	37 81       	ldd	r19, Z+7	; 0x07
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	37 83       	std	Z+7, r19	; 0x07
    1b80:	26 83       	std	Z+6, r18	; 0x06
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <fputc+0x6e>
    1b84:	8b 01       	movw	r16, r22
    1b86:	ec 01       	movw	r28, r24
    1b88:	fb 01       	movw	r30, r22
    1b8a:	00 84       	ldd	r0, Z+8	; 0x08
    1b8c:	f1 85       	ldd	r31, Z+9	; 0x09
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	09 95       	icall
    1b92:	89 2b       	or	r24, r25
    1b94:	e1 f6       	brne	.-72     	; 0x1b4e <fputc+0x10>
    1b96:	d8 01       	movw	r26, r16
    1b98:	16 96       	adiw	r26, 0x06	; 6
    1b9a:	8d 91       	ld	r24, X+
    1b9c:	9c 91       	ld	r25, X
    1b9e:	17 97       	sbiw	r26, 0x07	; 7
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	17 96       	adiw	r26, 0x07	; 7
    1ba4:	9c 93       	st	X, r25
    1ba6:	8e 93       	st	-X, r24
    1ba8:	16 97       	sbiw	r26, 0x06	; 6
    1baa:	ce 01       	movw	r24, r28
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	08 95       	ret

00001bb6 <ungetc>:
    1bb6:	fb 01       	movw	r30, r22
    1bb8:	23 81       	ldd	r18, Z+3	; 0x03
    1bba:	20 ff       	sbrs	r18, 0
    1bbc:	12 c0       	rjmp	.+36     	; 0x1be2 <ungetc+0x2c>
    1bbe:	26 fd       	sbrc	r18, 6
    1bc0:	10 c0       	rjmp	.+32     	; 0x1be2 <ungetc+0x2c>
    1bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	93 07       	cpc	r25, r19
    1bc8:	61 f0       	breq	.+24     	; 0x1be2 <ungetc+0x2c>
    1bca:	82 83       	std	Z+2, r24	; 0x02
    1bcc:	2f 7d       	andi	r18, 0xDF	; 223
    1bce:	20 64       	ori	r18, 0x40	; 64
    1bd0:	23 83       	std	Z+3, r18	; 0x03
    1bd2:	26 81       	ldd	r18, Z+6	; 0x06
    1bd4:	37 81       	ldd	r19, Z+7	; 0x07
    1bd6:	21 50       	subi	r18, 0x01	; 1
    1bd8:	31 09       	sbc	r19, r1
    1bda:	37 83       	std	Z+7, r19	; 0x07
    1bdc:	26 83       	std	Z+6, r18	; 0x06
    1bde:	99 27       	eor	r25, r25
    1be0:	08 95       	ret
    1be2:	8f ef       	ldi	r24, 0xFF	; 255
    1be4:	9f ef       	ldi	r25, 0xFF	; 255
    1be6:	08 95       	ret

00001be8 <__ultoa_invert>:
    1be8:	fa 01       	movw	r30, r20
    1bea:	aa 27       	eor	r26, r26
    1bec:	28 30       	cpi	r18, 0x08	; 8
    1bee:	51 f1       	breq	.+84     	; 0x1c44 <__ultoa_invert+0x5c>
    1bf0:	20 31       	cpi	r18, 0x10	; 16
    1bf2:	81 f1       	breq	.+96     	; 0x1c54 <__ultoa_invert+0x6c>
    1bf4:	e8 94       	clt
    1bf6:	6f 93       	push	r22
    1bf8:	6e 7f       	andi	r22, 0xFE	; 254
    1bfa:	6e 5f       	subi	r22, 0xFE	; 254
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1c00:	9f 4f       	sbci	r25, 0xFF	; 255
    1c02:	af 4f       	sbci	r26, 0xFF	; 255
    1c04:	b1 e0       	ldi	r27, 0x01	; 1
    1c06:	3e d0       	rcall	.+124    	; 0x1c84 <__ultoa_invert+0x9c>
    1c08:	b4 e0       	ldi	r27, 0x04	; 4
    1c0a:	3c d0       	rcall	.+120    	; 0x1c84 <__ultoa_invert+0x9c>
    1c0c:	67 0f       	add	r22, r23
    1c0e:	78 1f       	adc	r23, r24
    1c10:	89 1f       	adc	r24, r25
    1c12:	9a 1f       	adc	r25, r26
    1c14:	a1 1d       	adc	r26, r1
    1c16:	68 0f       	add	r22, r24
    1c18:	79 1f       	adc	r23, r25
    1c1a:	8a 1f       	adc	r24, r26
    1c1c:	91 1d       	adc	r25, r1
    1c1e:	a1 1d       	adc	r26, r1
    1c20:	6a 0f       	add	r22, r26
    1c22:	71 1d       	adc	r23, r1
    1c24:	81 1d       	adc	r24, r1
    1c26:	91 1d       	adc	r25, r1
    1c28:	a1 1d       	adc	r26, r1
    1c2a:	20 d0       	rcall	.+64     	; 0x1c6c <__ultoa_invert+0x84>
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <__ultoa_invert+0x48>
    1c2e:	68 94       	set
    1c30:	3f 91       	pop	r19
    1c32:	2a e0       	ldi	r18, 0x0A	; 10
    1c34:	26 9f       	mul	r18, r22
    1c36:	11 24       	eor	r1, r1
    1c38:	30 19       	sub	r19, r0
    1c3a:	30 5d       	subi	r19, 0xD0	; 208
    1c3c:	31 93       	st	Z+, r19
    1c3e:	de f6       	brtc	.-74     	; 0x1bf6 <__ultoa_invert+0xe>
    1c40:	cf 01       	movw	r24, r30
    1c42:	08 95       	ret
    1c44:	46 2f       	mov	r20, r22
    1c46:	47 70       	andi	r20, 0x07	; 7
    1c48:	40 5d       	subi	r20, 0xD0	; 208
    1c4a:	41 93       	st	Z+, r20
    1c4c:	b3 e0       	ldi	r27, 0x03	; 3
    1c4e:	0f d0       	rcall	.+30     	; 0x1c6e <__ultoa_invert+0x86>
    1c50:	c9 f7       	brne	.-14     	; 0x1c44 <__ultoa_invert+0x5c>
    1c52:	f6 cf       	rjmp	.-20     	; 0x1c40 <__ultoa_invert+0x58>
    1c54:	46 2f       	mov	r20, r22
    1c56:	4f 70       	andi	r20, 0x0F	; 15
    1c58:	40 5d       	subi	r20, 0xD0	; 208
    1c5a:	4a 33       	cpi	r20, 0x3A	; 58
    1c5c:	18 f0       	brcs	.+6      	; 0x1c64 <__ultoa_invert+0x7c>
    1c5e:	49 5d       	subi	r20, 0xD9	; 217
    1c60:	31 fd       	sbrc	r19, 1
    1c62:	40 52       	subi	r20, 0x20	; 32
    1c64:	41 93       	st	Z+, r20
    1c66:	02 d0       	rcall	.+4      	; 0x1c6c <__ultoa_invert+0x84>
    1c68:	a9 f7       	brne	.-22     	; 0x1c54 <__ultoa_invert+0x6c>
    1c6a:	ea cf       	rjmp	.-44     	; 0x1c40 <__ultoa_invert+0x58>
    1c6c:	b4 e0       	ldi	r27, 0x04	; 4
    1c6e:	a6 95       	lsr	r26
    1c70:	97 95       	ror	r25
    1c72:	87 95       	ror	r24
    1c74:	77 95       	ror	r23
    1c76:	67 95       	ror	r22
    1c78:	ba 95       	dec	r27
    1c7a:	c9 f7       	brne	.-14     	; 0x1c6e <__ultoa_invert+0x86>
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	61 05       	cpc	r22, r1
    1c80:	71 05       	cpc	r23, r1
    1c82:	08 95       	ret
    1c84:	9b 01       	movw	r18, r22
    1c86:	ac 01       	movw	r20, r24
    1c88:	0a 2e       	mov	r0, r26
    1c8a:	06 94       	lsr	r0
    1c8c:	57 95       	ror	r21
    1c8e:	47 95       	ror	r20
    1c90:	37 95       	ror	r19
    1c92:	27 95       	ror	r18
    1c94:	ba 95       	dec	r27
    1c96:	c9 f7       	brne	.-14     	; 0x1c8a <__ultoa_invert+0xa2>
    1c98:	62 0f       	add	r22, r18
    1c9a:	73 1f       	adc	r23, r19
    1c9c:	84 1f       	adc	r24, r20
    1c9e:	95 1f       	adc	r25, r21
    1ca0:	a0 1d       	adc	r26, r0
    1ca2:	08 95       	ret

00001ca4 <__ctype_isfalse>:
    1ca4:	99 27       	eor	r25, r25
    1ca6:	88 27       	eor	r24, r24

00001ca8 <__ctype_istrue>:
    1ca8:	08 95       	ret

00001caa <_exit>:
    1caa:	f8 94       	cli

00001cac <__stop_program>:
    1cac:	ff cf       	rjmp	.-2      	; 0x1cac <__stop_program>
