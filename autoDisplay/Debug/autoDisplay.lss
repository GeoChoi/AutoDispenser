
autoDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000030e  00800100  00001c80  00001d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080040e  0080040e  00002022  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002080  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e9f  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b93  00000000  00000000  000040e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001099  00000000  00000000  00004c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000059c  00000000  00000000  00005d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bd  00000000  00000000  000062b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015d7  00000000  00000000  00006a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	c6 c6       	rjmp	.+3468   	; 0xd92 <__vector_1>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
      36:	00 00       	nop
      38:	d9 c6       	rjmp	.+3506   	; 0xdec <__vector_14>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	63 64       	ori	r22, 0x43	; 67
      8e:	69 6e       	ori	r22, 0xE9	; 233
      90:	6f 70       	andi	r22, 0x0F	; 15
      92:	73 75       	andi	r23, 0x53	; 83
      94:	78 58       	subi	r23, 0x88	; 136
      96:	5b 00       	.word	0x005b	; ????

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e0 e8       	ldi	r30, 0x80	; 128
      ac:	fc e1       	ldi	r31, 0x1C	; 28
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	ae 30       	cpi	r26, 0x0E	; 14
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	24 e0       	ldi	r18, 0x04	; 4
      c0:	ae e0       	ldi	r26, 0x0E	; 14
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ac 32       	cpi	r26, 0x2C	; 44
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	e8 d6       	rcall	.+3536   	; 0xea0 <main>
      d0:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <_exit>

000000d4 <__bad_interrupt>:
      d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <InitializeTimer0>:
	verticalMove();
	Mydelay_ms(mm*25);
	verticalStop();
	_delay_ms(200);
	curY -= mm;
}
      d6:	87 b3       	in	r24, 0x17	; 23
      d8:	80 61       	ori	r24, 0x10	; 16
      da:	87 bb       	out	0x17, r24	; 23
      dc:	83 b7       	in	r24, 0x33	; 51
      de:	88 60       	ori	r24, 0x08	; 8
      e0:	83 bf       	out	0x33, r24	; 51
      e2:	83 b7       	in	r24, 0x33	; 51
      e4:	8f 7e       	andi	r24, 0xEF	; 239
      e6:	83 bf       	out	0x33, r24	; 51
      e8:	83 b7       	in	r24, 0x33	; 51
      ea:	80 62       	ori	r24, 0x20	; 32
      ec:	83 bf       	out	0x33, r24	; 51
      ee:	83 b7       	in	r24, 0x33	; 51
      f0:	81 60       	ori	r24, 0x01	; 1
      f2:	83 bf       	out	0x33, r24	; 51
      f4:	83 b7       	in	r24, 0x33	; 51
      f6:	82 60       	ori	r24, 0x02	; 2
      f8:	83 bf       	out	0x33, r24	; 51
      fa:	8c e7       	ldi	r24, 0x7C	; 124
      fc:	81 bf       	out	0x31, r24	; 49
      fe:	08 95       	ret

00000100 <InitializeTimer2>:
     100:	87 b3       	in	r24, 0x17	; 23
     102:	80 68       	ori	r24, 0x80	; 128
     104:	87 bb       	out	0x17, r24	; 23
     106:	85 b5       	in	r24, 0x25	; 37
     108:	88 60       	ori	r24, 0x08	; 8
     10a:	85 bd       	out	0x25, r24	; 37
     10c:	85 b5       	in	r24, 0x25	; 37
     10e:	8f 7e       	andi	r24, 0xEF	; 239
     110:	85 bd       	out	0x25, r24	; 37
     112:	85 b5       	in	r24, 0x25	; 37
     114:	80 62       	ori	r24, 0x20	; 32
     116:	85 bd       	out	0x25, r24	; 37
     118:	85 b5       	in	r24, 0x25	; 37
     11a:	81 60       	ori	r24, 0x01	; 1
     11c:	85 bd       	out	0x25, r24	; 37
     11e:	85 b5       	in	r24, 0x25	; 37
     120:	82 60       	ori	r24, 0x02	; 2
     122:	85 bd       	out	0x25, r24	; 37
     124:	8c e7       	ldi	r24, 0x7C	; 124
     126:	83 bd       	out	0x23, r24	; 35
     128:	08 95       	ret

0000012a <InitializeTimer1>:
     12a:	8f b5       	in	r24, 0x2f	; 47
     12c:	82 60       	ori	r24, 0x02	; 2
     12e:	8f bd       	out	0x2f, r24	; 47
     130:	8e b5       	in	r24, 0x2e	; 46
     132:	88 61       	ori	r24, 0x18	; 24
     134:	8e bd       	out	0x2e, r24	; 46
     136:	8e b5       	in	r24, 0x2e	; 46
     138:	81 60       	ori	r24, 0x01	; 1
     13a:	8e bd       	out	0x2e, r24	; 46
     13c:	8f e7       	ldi	r24, 0x7F	; 127
     13e:	9e e3       	ldi	r25, 0x3E	; 62
     140:	97 bd       	out	0x27, r25	; 39
     142:	86 bd       	out	0x26, r24	; 38
     144:	87 b7       	in	r24, 0x37	; 55
     146:	84 60       	ori	r24, 0x04	; 4
     148:	87 bf       	out	0x37, r24	; 55
     14a:	08 95       	ret

0000014c <InitializeTimer3>:
     14c:	82 b1       	in	r24, 0x02	; 2
     14e:	88 63       	ori	r24, 0x38	; 56
     150:	82 b9       	out	0x02, r24	; 2
     152:	eb e8       	ldi	r30, 0x8B	; 139
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	82 60       	ori	r24, 0x02	; 2
     15a:	80 83       	st	Z, r24
     15c:	aa e8       	ldi	r26, 0x8A	; 138
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	88 61       	ori	r24, 0x18	; 24
     164:	8c 93       	st	X, r24
     166:	80 81       	ld	r24, Z
     168:	8f 7b       	andi	r24, 0xBF	; 191
     16a:	80 83       	st	Z, r24
     16c:	80 81       	ld	r24, Z
     16e:	80 68       	ori	r24, 0x80	; 128
     170:	80 83       	st	Z, r24
     172:	80 81       	ld	r24, Z
     174:	8f 7e       	andi	r24, 0xEF	; 239
     176:	80 83       	st	Z, r24
     178:	80 81       	ld	r24, Z
     17a:	80 62       	ori	r24, 0x20	; 32
     17c:	80 83       	st	Z, r24
     17e:	80 81       	ld	r24, Z
     180:	8b 7f       	andi	r24, 0xFB	; 251
     182:	80 83       	st	Z, r24
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
     18a:	8c 91       	ld	r24, X
     18c:	82 60       	ori	r24, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	80 e4       	ldi	r24, 0x40	; 64
     192:	9c e9       	ldi	r25, 0x9C	; 156
     194:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     198:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     19c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     1a0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     1a4:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     1a8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     1ac:	8f e3       	ldi	r24, 0x3F	; 63
     1ae:	9c e9       	ldi	r25, 0x9C	; 156
     1b0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     1b8:	08 95       	ret

000001ba <MoveArm>:
     1ba:	00 97       	sbiw	r24, 0x00	; 0
     1bc:	41 f0       	breq	.+16     	; 0x1ce <MoveArm+0x14>
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     1ca:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     1ce:	61 15       	cp	r22, r1
     1d0:	71 05       	cpc	r23, r1
     1d2:	41 f0       	breq	.+16     	; 0x1e4 <MoveArm+0x2a>
     1d4:	66 0f       	add	r22, r22
     1d6:	77 1f       	adc	r23, r23
     1d8:	66 0f       	add	r22, r22
     1da:	77 1f       	adc	r23, r23
     1dc:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     1e0:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     1e4:	41 15       	cp	r20, r1
     1e6:	51 05       	cpc	r21, r1
     1e8:	41 f0       	breq	.+16     	; 0x1fa <MoveArm+0x40>
     1ea:	44 0f       	add	r20, r20
     1ec:	55 1f       	adc	r21, r21
     1ee:	44 0f       	add	r20, r20
     1f0:	55 1f       	adc	r21, r21
     1f2:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     1f6:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     1fa:	08 95       	ret

000001fc <basePoseArm>:
     1fc:	80 e8       	ldi	r24, 0x80	; 128
     1fe:	9c e0       	ldi	r25, 0x0C	; 12
     200:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     204:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     208:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     20c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     210:	80 e1       	ldi	r24, 0x10	; 16
     212:	9e e0       	ldi	r25, 0x0E	; 14
     214:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     218:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     21c:	08 95       	ret

0000021e <freePoseArm>:
     21e:	80 e4       	ldi	r24, 0x40	; 64
     220:	9f e1       	ldi	r25, 0x1F	; 31
     222:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     226:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     22a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     22e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     232:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     236:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     23a:	08 95       	ret

0000023c <closeHand_thin>:
     23c:	80 e8       	ldi	r24, 0x80	; 128
     23e:	9c e0       	ldi	r25, 0x0C	; 12
     240:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     244:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     248:	08 95       	ret

0000024a <catchHand_thin>:
     24a:	88 ef       	ldi	r24, 0xF8	; 248
     24c:	9c e0       	ldi	r25, 0x0C	; 12
     24e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     252:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     256:	08 95       	ret

00000258 <holdHand_thin>:
     258:	88 e4       	ldi	r24, 0x48	; 72
     25a:	9d e0       	ldi	r25, 0x0D	; 13
     25c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     260:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     264:	08 95       	ret

00000266 <openHand>:
     266:	80 ea       	ldi	r24, 0xA0	; 160
     268:	9f e0       	ldi	r25, 0x0F	; 15
     26a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     26e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     272:	08 95       	ret

00000274 <wideOpenHand>:
     274:	80 ec       	ldi	r24, 0xC0	; 192
     276:	92 e1       	ldi	r25, 0x12	; 18
     278:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     27c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     280:	08 95       	ret

00000282 <CWturnWrist>:
     282:	80 eb       	ldi	r24, 0xB0	; 176
     284:	94 e0       	ldi	r25, 0x04	; 4
     286:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     28a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     28e:	08 95       	ret

00000290 <normalWrist>:
     290:	80 eb       	ldi	r24, 0xB0	; 176
     292:	94 e0       	ldi	r25, 0x04	; 4
     294:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     298:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     29c:	08 95       	ret

0000029e <innerTurnElbow>:
     29e:	88 ed       	ldi	r24, 0xD8	; 216
     2a0:	94 e0       	ldi	r25, 0x04	; 4
     2a2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     2a6:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     2aa:	08 95       	ret

000002ac <normalTurnElbow>:
     2ac:	80 e1       	ldi	r24, 0x10	; 16
     2ae:	9e e0       	ldi	r25, 0x0E	; 14
     2b0:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     2b4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     2b8:	08 95       	ret

000002ba <verticalMove>:
     2ba:	83 b7       	in	r24, 0x33	; 51
     2bc:	80 61       	ori	r24, 0x10	; 16
     2be:	83 bf       	out	0x33, r24	; 51
     2c0:	83 b7       	in	r24, 0x33	; 51
     2c2:	8f 7d       	andi	r24, 0xDF	; 223
     2c4:	83 bf       	out	0x33, r24	; 51
     2c6:	08 95       	ret

000002c8 <verticalStop>:
     2c8:	83 b7       	in	r24, 0x33	; 51
     2ca:	8f 7e       	andi	r24, 0xEF	; 239
     2cc:	83 bf       	out	0x33, r24	; 51
     2ce:	83 b7       	in	r24, 0x33	; 51
     2d0:	80 62       	ori	r24, 0x20	; 32
     2d2:	83 bf       	out	0x33, r24	; 51
     2d4:	08 95       	ret

000002d6 <horizontalMove>:
     2d6:	85 b5       	in	r24, 0x25	; 37
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	85 bd       	out	0x25, r24	; 37
     2dc:	85 b5       	in	r24, 0x25	; 37
     2de:	8f 7d       	andi	r24, 0xDF	; 223
     2e0:	85 bd       	out	0x25, r24	; 37
     2e2:	08 95       	ret

000002e4 <horizontalStop>:
     2e4:	85 b5       	in	r24, 0x25	; 37
     2e6:	8f 7e       	andi	r24, 0xEF	; 239
     2e8:	85 bd       	out	0x25, r24	; 37
     2ea:	85 b5       	in	r24, 0x25	; 37
     2ec:	80 62       	ori	r24, 0x20	; 32
     2ee:	85 bd       	out	0x25, r24	; 37
     2f0:	08 95       	ret

000002f2 <MoveXY_relative>:

void MoveXY_relative(int x_mm, int y_mm) {
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ec 01       	movw	r28, r24
     2fc:	8b 01       	movw	r16, r22
	curX += x_mm;
     2fe:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <curX>
     302:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <curX+0x1>
     306:	8c 0f       	add	r24, r28
     308:	9d 1f       	adc	r25, r29
     30a:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <curX+0x1>
     30e:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <curX>
	curY += y_mm;
     312:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <curY>
     316:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <curY+0x1>
     31a:	86 0f       	add	r24, r22
     31c:	97 1f       	adc	r25, r23
     31e:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <curY+0x1>
     322:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <curY>
	
	if(x_mm >= 0) PORTC &= ~(1<<PORTC5);
     326:	dd 23       	and	r29, r29
     328:	24 f0       	brlt	.+8      	; 0x332 <MoveXY_relative+0x40>
     32a:	85 b3       	in	r24, 0x15	; 21
     32c:	8f 7d       	andi	r24, 0xDF	; 223
     32e:	85 bb       	out	0x15, r24	; 21
     330:	06 c0       	rjmp	.+12     	; 0x33e <MoveXY_relative+0x4c>
	else {
		PORTC |= (1<<PORTC5);
     332:	85 b3       	in	r24, 0x15	; 21
     334:	80 62       	ori	r24, 0x20	; 32
     336:	85 bb       	out	0x15, r24	; 21
		x_mm = -x_mm;
     338:	d1 95       	neg	r29
     33a:	c1 95       	neg	r28
     33c:	d1 09       	sbc	r29, r1
	}
	
	if(y_mm >= 0) PORTC &= ~(1<<PORTC1);
     33e:	11 23       	and	r17, r17
     340:	24 f0       	brlt	.+8      	; 0x34a <MoveXY_relative+0x58>
     342:	85 b3       	in	r24, 0x15	; 21
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	85 bb       	out	0x15, r24	; 21
     348:	06 c0       	rjmp	.+12     	; 0x356 <MoveXY_relative+0x64>
	else {
		PORTC |= (1<<PORTC1);
     34a:	85 b3       	in	r24, 0x15	; 21
     34c:	82 60       	ori	r24, 0x02	; 2
     34e:	85 bb       	out	0x15, r24	; 21
		y_mm = -y_mm;
     350:	11 95       	neg	r17
     352:	01 95       	neg	r16
     354:	11 09       	sbc	r17, r1
	}
	
	//여기서부터 요이~땅
	TCNT1 = 0;
     356:	1d bc       	out	0x2d, r1	; 45
     358:	1c bc       	out	0x2c, r1	; 44
	if(x_mm) {
     35a:	20 97       	sbiw	r28, 0x00	; 0
     35c:	29 f0       	breq	.+10     	; 0x368 <MoveXY_relative+0x76>
		horizontalMove();
     35e:	bb df       	rcall	.-138    	; 0x2d6 <horizontalMove>
		h_stopFlag = 0;
     360:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <h_stopFlag+0x1>
     364:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <h_stopFlag>
	}
	if(y_mm) {
     368:	01 15       	cp	r16, r1
     36a:	11 05       	cpc	r17, r1
		verticalMove();
     36c:	29 f0       	breq	.+10     	; 0x378 <MoveXY_relative+0x86>
     36e:	a5 df       	rcall	.-182    	; 0x2ba <verticalMove>
		v_stopFlag = 0;
     370:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <v_stopFlag+0x1>
     374:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <v_stopFlag>
	}
	h_ms = x_mm*10;
     378:	ce 01       	movw	r24, r28
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	cc 0f       	add	r28, r28
     380:	dd 1f       	adc	r29, r29
     382:	cc 0f       	add	r28, r28
     384:	dd 1f       	adc	r29, r29
     386:	cc 0f       	add	r28, r28
     388:	dd 1f       	adc	r29, r29
     38a:	c8 0f       	add	r28, r24
     38c:	d9 1f       	adc	r29, r25
     38e:	d0 93 13 04 	sts	0x0413, r29	; 0x800413 <h_ms+0x1>
     392:	c0 93 12 04 	sts	0x0412, r28	; 0x800412 <h_ms>
	v_ms = y_mm*25;
     396:	29 e1       	ldi	r18, 0x19	; 25
     398:	20 9f       	mul	r18, r16
     39a:	c0 01       	movw	r24, r0
     39c:	21 9f       	mul	r18, r17
     39e:	90 0d       	add	r25, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <v_ms+0x1>
     3a6:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <v_ms>
	
	
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <MoveXY_absolute>:

void MoveXY_absolute(unsigned int dstX, unsigned int dstY) {
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
	int Xdistance = dstX-curX;
     3bc:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <curX>
     3c0:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <curX+0x1>
     3c4:	ac 01       	movw	r20, r24
     3c6:	42 1b       	sub	r20, r18
     3c8:	53 0b       	sbc	r21, r19
     3ca:	ea 01       	movw	r28, r20
	int Ydistance = dstY-curY;
     3cc:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <curY>
     3d0:	30 91 15 04 	lds	r19, 0x0415	; 0x800415 <curY+0x1>
     3d4:	fb 01       	movw	r30, r22
     3d6:	e2 1b       	sub	r30, r18
     3d8:	f3 0b       	sbc	r31, r19
     3da:	9f 01       	movw	r18, r30
     3dc:	8f 01       	movw	r16, r30
	
	curX = dstX;
     3de:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <curX+0x1>
     3e2:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <curX>
	curY = dstY;
     3e6:	70 93 15 04 	sts	0x0415, r23	; 0x800415 <curY+0x1>
     3ea:	60 93 14 04 	sts	0x0414, r22	; 0x800414 <curY>
	
	if(Xdistance >= 0) PORTC &= ~(1<<PORTC5);
     3ee:	dd 23       	and	r29, r29
     3f0:	24 f0       	brlt	.+8      	; 0x3fa <MoveXY_absolute+0x46>
     3f2:	85 b3       	in	r24, 0x15	; 21
     3f4:	8f 7d       	andi	r24, 0xDF	; 223
     3f6:	85 bb       	out	0x15, r24	; 21
     3f8:	07 c0       	rjmp	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	else {
		PORTC |= (1<<PORTC5);
     3fa:	85 b3       	in	r24, 0x15	; 21
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	85 bb       	out	0x15, r24	; 21
		Xdistance = -Xdistance;
     400:	cc 27       	eor	r28, r28
     402:	dd 27       	eor	r29, r29
     404:	c4 1b       	sub	r28, r20
     406:	d5 0b       	sbc	r29, r21
	}
	
	if(Ydistance >= 0) PORTC &= ~(1<<PORTC1);
     408:	11 23       	and	r17, r17
     40a:	24 f0       	brlt	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     40c:	85 b3       	in	r24, 0x15	; 21
     40e:	8d 7f       	andi	r24, 0xFD	; 253
     410:	85 bb       	out	0x15, r24	; 21
     412:	07 c0       	rjmp	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	else {
		PORTC |= (1<<PORTC1);
     414:	85 b3       	in	r24, 0x15	; 21
     416:	82 60       	ori	r24, 0x02	; 2
     418:	85 bb       	out	0x15, r24	; 21
		Ydistance = -Ydistance;
     41a:	00 27       	eor	r16, r16
     41c:	11 27       	eor	r17, r17
     41e:	02 1b       	sub	r16, r18
     420:	13 0b       	sbc	r17, r19
	}
	
	//여기서부터 요이~땅
	TCNT1 = 0;
     422:	1d bc       	out	0x2d, r1	; 45
     424:	1c bc       	out	0x2c, r1	; 44
	if(Xdistance){
     426:	20 97       	sbiw	r28, 0x00	; 0
     428:	29 f0       	breq	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		horizontalMove();
     42a:	55 df       	rcall	.-342    	; 0x2d6 <horizontalMove>
		h_stopFlag = 0;
     42c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <h_stopFlag+0x1>
     430:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <h_stopFlag>
	}
	if(Ydistance){
     434:	01 15       	cp	r16, r1
     436:	11 05       	cpc	r17, r1
		verticalMove();
     438:	29 f0       	breq	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     43a:	3f df       	rcall	.-386    	; 0x2ba <verticalMove>
		v_stopFlag = 0;
     43c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <v_stopFlag+0x1>
     440:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <v_stopFlag>
	}
	h_ms = Xdistance*10;
     444:	ce 01       	movw	r24, r28
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	cc 0f       	add	r28, r28
     44c:	dd 1f       	adc	r29, r29
     44e:	cc 0f       	add	r28, r28
     450:	dd 1f       	adc	r29, r29
     452:	cc 0f       	add	r28, r28
     454:	dd 1f       	adc	r29, r29
     456:	c8 0f       	add	r28, r24
     458:	d9 1f       	adc	r29, r25
     45a:	d0 93 13 04 	sts	0x0413, r29	; 0x800413 <h_ms+0x1>
     45e:	c0 93 12 04 	sts	0x0412, r28	; 0x800412 <h_ms>
	v_ms = Ydistance*25;
     462:	29 e1       	ldi	r18, 0x19	; 25
     464:	20 9f       	mul	r18, r16
     466:	c0 01       	movw	r24, r0
     468:	21 9f       	mul	r18, r17
     46a:	90 0d       	add	r25, r0
     46c:	11 24       	eor	r1, r1
     46e:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <v_ms+0x1>
     472:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <v_ms>
	
}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <pauseUntilStop>:

void pauseUntilStop(void) {
	while(h_stopFlag == 0 || v_stopFlag == 0) {};
     480:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <h_stopFlag>
     484:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <h_stopFlag+0x1>
     488:	89 2b       	or	r24, r25
     48a:	d1 f3       	breq	.-12     	; 0x480 <pauseUntilStop>
     48c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <v_stopFlag>
     490:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <v_stopFlag+0x1>
     494:	89 2b       	or	r24, r25
     496:	a1 f3       	breq	.-24     	; 0x480 <pauseUntilStop>
}
     498:	08 95       	ret

0000049a <testmode>:
	{ 40, 105, 175, 240, 305, 365, 440, 510, 510,},
	{ 40, 105, 175, 240, 305, 365, 440, 510, 510,},
};
int YlocArr[4] = {50, 280, 510, 710};

void testmode() {
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
	int quit = 0;
     4a6:	c0 e0       	ldi	r28, 0x00	; 0
     4a8:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1) {
		do {
			do {
				wronginput = 0;
     4aa:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <__data_end+0x1>
     4ae:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <__data_end>
				
				printf("Select mode : step_rel(1), step_abs(2), servo_con(3), quit(q)?");
     4b2:	84 e8       	ldi	r24, 0x84	; 132
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	9f 93       	push	r25
     4b8:	8f 93       	push	r24
     4ba:	a2 d5       	rcall	.+2884   	; 0x1000 <printf>
				scanf("%s", uartBuffer);
     4bc:	80 e5       	ldi	r24, 0x50	; 80
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	83 ec       	ldi	r24, 0xC3	; 195
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	9f 93       	push	r25
     4ca:	8f 93       	push	r24
     4cc:	e1 d5       	rcall	.+3010   	; 0x1090 <scanf>
				
				if(strcasecmp(uartBuffer, "1")==0) 
     4ce:	66 ec       	ldi	r22, 0xC6	; 198
     4d0:	71 e0       	ldi	r23, 0x01	; 1
     4d2:	80 e5       	ldi	r24, 0x50	; 80
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	81 d5       	rcall	.+2818   	; 0xfda <strcasecmp>
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	89 2b       	or	r24, r25
     4e6:	39 f4       	brne	.+14     	; 0x4f6 <testmode+0x5c>
					MoveMode_TM = 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <MoveMode_TM+0x1>
     4f0:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <MoveMode_TM>
     4f4:	2f c0       	rjmp	.+94     	; 0x554 <testmode+0xba>
				else if (strcasecmp(uartBuffer, "2")==0) 
     4f6:	68 ec       	ldi	r22, 0xC8	; 200
     4f8:	71 e0       	ldi	r23, 0x01	; 1
     4fa:	80 e5       	ldi	r24, 0x50	; 80
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	6d d5       	rcall	.+2778   	; 0xfda <strcasecmp>
     500:	89 2b       	or	r24, r25
     502:	39 f4       	brne	.+14     	; 0x512 <testmode+0x78>
					MoveMode_TM = 2;
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <MoveMode_TM+0x1>
     50c:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <MoveMode_TM>
     510:	21 c0       	rjmp	.+66     	; 0x554 <testmode+0xba>
				else if (strcasecmp(uartBuffer, "3")==0) 
     512:	6a ec       	ldi	r22, 0xCA	; 202
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	80 e5       	ldi	r24, 0x50	; 80
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	5f d5       	rcall	.+2750   	; 0xfda <strcasecmp>
     51c:	89 2b       	or	r24, r25
     51e:	39 f4       	brne	.+14     	; 0x52e <testmode+0x94>
					MoveMode_TM = 3;
     520:	83 e0       	ldi	r24, 0x03	; 3
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <MoveMode_TM+0x1>
     528:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <MoveMode_TM>
				else if (strcasecmp(uartBuffer, "q")==0) 
     52c:	13 c0       	rjmp	.+38     	; 0x554 <testmode+0xba>
     52e:	6c ec       	ldi	r22, 0xCC	; 204
     530:	71 e0       	ldi	r23, 0x01	; 1
     532:	80 e5       	ldi	r24, 0x50	; 80
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	51 d5       	rcall	.+2722   	; 0xfda <strcasecmp>
     538:	89 2b       	or	r24, r25
					quit = 1;
				else{
					printf("input '1', '2', '3' or 'q'\r\n");
     53a:	51 f0       	breq	.+20     	; 0x550 <testmode+0xb6>
     53c:	8e ec       	ldi	r24, 0xCE	; 206
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	77 d5       	rcall	.+2798   	; 0x1030 <puts>
					wronginput = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <__data_end+0x1>
     54a:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <__data_end>
     54e:	02 c0       	rjmp	.+4      	; 0x554 <testmode+0xba>
				else if (strcasecmp(uartBuffer, "2")==0) 
					MoveMode_TM = 2;
				else if (strcasecmp(uartBuffer, "3")==0) 
					MoveMode_TM = 3;
				else if (strcasecmp(uartBuffer, "q")==0) 
					quit = 1;
     550:	c1 e0       	ldi	r28, 0x01	; 1
     552:	d0 e0       	ldi	r29, 0x00	; 0
				else{
					printf("input '1', '2', '3' or 'q'\r\n");
					wronginput = 1;
				}
			} while(wronginput);
     554:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <__data_end>
     558:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <__data_end+0x1>
     55c:	89 2b       	or	r24, r25
     55e:	09 f0       	breq	.+2      	; 0x562 <testmode+0xc8>
     560:	a4 cf       	rjmp	.-184    	; 0x4aa <testmode+0x10>
			
			if(quit) break;
     562:	20 97       	sbiw	r28, 0x00	; 0
     564:	09 f0       	breq	.+2      	; 0x568 <testmode+0xce>
     566:	c7 c0       	rjmp	.+398    	; 0x6f6 <testmode+0x25c>
			
			if(MoveMode_TM==1||MoveMode_TM==2) {
     568:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <MoveMode_TM>
     56c:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <MoveMode_TM+0x1>
     570:	9c 01       	movw	r18, r24
     572:	21 50       	subi	r18, 0x01	; 1
     574:	31 09       	sbc	r19, r1
     576:	22 30       	cpi	r18, 0x02	; 2
     578:	31 05       	cpc	r19, r1
     57a:	08 f0       	brcs	.+2      	; 0x57e <testmode+0xe4>
				printf("X coordinate : ");
     57c:	4c c0       	rjmp	.+152    	; 0x616 <testmode+0x17c>
     57e:	8a ee       	ldi	r24, 0xEA	; 234
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	3c d5       	rcall	.+2680   	; 0x1000 <printf>
				scanf("%u", &coordinate_X);
     588:	8c e1       	ldi	r24, 0x1C	; 28
     58a:	94 e0       	ldi	r25, 0x04	; 4
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	0f 2e       	mov	r0, r31
     592:	f1 ef       	ldi	r31, 0xF1	; 241
     594:	ef 2e       	mov	r14, r31
     596:	f2 e0       	ldi	r31, 0x02	; 2
     598:	ff 2e       	mov	r15, r31
     59a:	f0 2d       	mov	r31, r0
     59c:	ff 92       	push	r15
     59e:	ef 92       	push	r14
     5a0:	77 d5       	rcall	.+2798   	; 0x1090 <scanf>
				printf("your input : %5d\r\n\r\n", coordinate_X);
     5a2:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <coordinate_X+0x1>
     5a6:	8f 93       	push	r24
     5a8:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <coordinate_X>
     5ac:	8f 93       	push	r24
     5ae:	0a ef       	ldi	r16, 0xFA	; 250
     5b0:	11 e0       	ldi	r17, 0x01	; 1
     5b2:	1f 93       	push	r17
     5b4:	0f 93       	push	r16
				
				printf("Y coordinate : ");
     5b6:	24 d5       	rcall	.+2632   	; 0x1000 <printf>
     5b8:	8f e0       	ldi	r24, 0x0F	; 15
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
				scanf("%u", &coordinate_Y);
     5c0:	1f d5       	rcall	.+2622   	; 0x1000 <printf>
     5c2:	80 e2       	ldi	r24, 0x20	; 32
     5c4:	94 e0       	ldi	r25, 0x04	; 4
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	ff 92       	push	r15
     5cc:	ef 92       	push	r14
				printf("your input : %5d\r\n\r\n", coordinate_Y);
     5ce:	60 d5       	rcall	.+2752   	; 0x1090 <scanf>
     5d0:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <coordinate_Y+0x1>
     5d4:	8f 93       	push	r24
     5d6:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <coordinate_Y>
     5da:	8f 93       	push	r24
     5dc:	1f 93       	push	r17
     5de:	0f 93       	push	r16
     5e0:	0f d5       	rcall	.+2590   	; 0x1000 <printf>
				
				printf("[x,y] = [%5d, %5d]\r\n",coordinate_X, coordinate_Y);
     5e2:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <coordinate_Y+0x1>
     5e6:	8f 93       	push	r24
     5e8:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <coordinate_Y>
     5ec:	8f 93       	push	r24
     5ee:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <coordinate_X+0x1>
     5f2:	8f 93       	push	r24
     5f4:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <coordinate_X>
     5f8:	8f 93       	push	r24
     5fa:	8f e1       	ldi	r24, 0x1F	; 31
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	fe d4       	rcall	.+2556   	; 0x1000 <printf>
     604:	8d b7       	in	r24, 0x3d	; 61
     606:	9e b7       	in	r25, 0x3e	; 62
     608:	4a 96       	adiw	r24, 0x1a	; 26
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	9e bf       	out	0x3e, r25	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	8d bf       	out	0x3d, r24	; 61
			}
			else if(MoveMode_TM==3) {
     614:	30 c0       	rjmp	.+96     	; 0x676 <testmode+0x1dc>
				printf("hand  : ");
     616:	03 97       	sbiw	r24, 0x03	; 3
     618:	71 f5       	brne	.+92     	; 0x676 <testmode+0x1dc>
     61a:	84 e3       	ldi	r24, 0x34	; 52
     61c:	92 e0       	ldi	r25, 0x02	; 2
     61e:	9f 93       	push	r25
				scanf("%u", &hand);
     620:	8f 93       	push	r24
     622:	ee d4       	rcall	.+2524   	; 0x1000 <printf>
     624:	82 e2       	ldi	r24, 0x22	; 34
     626:	94 e0       	ldi	r25, 0x04	; 4
     628:	9f 93       	push	r25
     62a:	8f 93       	push	r24
     62c:	01 ef       	ldi	r16, 0xF1	; 241
     62e:	12 e0       	ldi	r17, 0x02	; 2
     630:	1f 93       	push	r17
				printf("wrist : ");
     632:	0f 93       	push	r16
     634:	2d d5       	rcall	.+2650   	; 0x1090 <scanf>
     636:	8d e3       	ldi	r24, 0x3D	; 61
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	9f 93       	push	r25
				scanf("%u", &wrist);
     63c:	8f 93       	push	r24
     63e:	e0 d4       	rcall	.+2496   	; 0x1000 <printf>
     640:	8e e1       	ldi	r24, 0x1E	; 30
     642:	94 e0       	ldi	r25, 0x04	; 4
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	1f 93       	push	r17
				printf("elbow : ");
     64a:	0f 93       	push	r16
     64c:	21 d5       	rcall	.+2626   	; 0x1090 <scanf>
     64e:	86 e4       	ldi	r24, 0x46	; 70
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
				scanf("%u", &elbow);
     656:	d4 d4       	rcall	.+2472   	; 0x1000 <printf>
     658:	84 e2       	ldi	r24, 0x24	; 36
     65a:	94 e0       	ldi	r25, 0x04	; 4
     65c:	9f 93       	push	r25
     65e:	8f 93       	push	r24
     660:	1f 93       	push	r17
     662:	0f 93       	push	r16
     664:	15 d5       	rcall	.+2602   	; 0x1090 <scanf>
     666:	8d b7       	in	r24, 0x3d	; 61
     668:	9e b7       	in	r25, 0x3e	; 62
     66a:	42 96       	adiw	r24, 0x12	; 18
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	9e bf       	out	0x3e, r25	; 62
			}
			
			do {
				wronginput = 0;
     672:	0f be       	out	0x3f, r0	; 63
     674:	8d bf       	out	0x3d, r24	; 61
     676:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <__data_end+0x1>
				
				printf("Do you want to proceed?[y/n]");
     67a:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <__data_end>
     67e:	8f e4       	ldi	r24, 0x4F	; 79
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	9f 93       	push	r25
				scanf("%s", uartBuffer);
     684:	8f 93       	push	r24
     686:	bc d4       	rcall	.+2424   	; 0x1000 <printf>
     688:	80 e5       	ldi	r24, 0x50	; 80
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	83 ec       	ldi	r24, 0xC3	; 195
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	9f 93       	push	r25
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
     696:	8f 93       	push	r24
     698:	fb d4       	rcall	.+2550   	; 0x1090 <scanf>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	80 e5       	ldi	r24, 0x50	; 80
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9b d4       	rcall	.+2358   	; 0xfda <strcasecmp>
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	89 2b       	or	r24, r25
     6b2:	81 f0       	breq	.+32     	; 0x6d4 <testmode+0x23a>
     6b4:	6e e6       	ldi	r22, 0x6E	; 110
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	80 e5       	ldi	r24, 0x50	; 80
     6ba:	91 e0       	ldi	r25, 0x01	; 1
					printf("input 'y' or 'n' only\r\n");
     6bc:	8e d4       	rcall	.+2332   	; 0xfda <strcasecmp>
     6be:	89 2b       	or	r24, r25
     6c0:	49 f0       	breq	.+18     	; 0x6d4 <testmode+0x23a>
     6c2:	80 e7       	ldi	r24, 0x70	; 112
					wronginput = 1;
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	b4 d4       	rcall	.+2408   	; 0x1030 <puts>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <__data_end+0x1>
				}
			} while(wronginput);
     6d0:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <__data_end>
     6d4:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <__data_end>
     6d8:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <__data_end+0x1>
			
			printf("\r\n");
     6dc:	89 2b       	or	r24, r25
     6de:	59 f6       	brne	.-106    	; 0x676 <testmode+0x1dc>
     6e0:	8c e0       	ldi	r24, 0x0C	; 12
     6e2:	94 e0       	ldi	r25, 0x04	; 4
		} while(strcasecmp(uartBuffer, "y"));
     6e4:	a5 d4       	rcall	.+2378   	; 0x1030 <puts>
     6e6:	6c e6       	ldi	r22, 0x6C	; 108
     6e8:	72 e0       	ldi	r23, 0x02	; 2
     6ea:	80 e5       	ldi	r24, 0x50	; 80
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	75 d4       	rcall	.+2282   	; 0xfda <strcasecmp>
     6f0:	89 2b       	or	r24, r25
		
		if(quit) break;
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <testmode+0x25c>
     6f4:	da ce       	rjmp	.-588    	; 0x4aa <testmode+0x10>
     6f6:	20 97       	sbiw	r28, 0x00	; 0
		else if(MoveMode_TM == 1) {
     6f8:	09 f0       	breq	.+2      	; 0x6fc <testmode+0x262>
     6fa:	71 c0       	rjmp	.+226    	; 0x7de <testmode+0x344>
     6fc:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <MoveMode_TM>
     700:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <MoveMode_TM+0x1>
			MoveXY_relative(coordinate_X, coordinate_Y);
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	91 05       	cpc	r25, r1
     708:	59 f5       	brne	.+86     	; 0x760 <testmode+0x2c6>
     70a:	60 91 20 04 	lds	r22, 0x0420	; 0x800420 <coordinate_Y>
     70e:	70 91 21 04 	lds	r23, 0x0421	; 0x800421 <coordinate_Y+0x1>
     712:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <coordinate_X>
     716:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <coordinate_X+0x1>
			pauseUntilStop();
     71a:	eb dd       	rcall	.-1066   	; 0x2f2 <MoveXY_relative>
			printf("current Position : [%4d, %4d]\r\n\r\n", curX, curY);
     71c:	b1 de       	rcall	.-670    	; 0x480 <pauseUntilStop>
     71e:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <curY+0x1>
     722:	8f 93       	push	r24
     724:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <curY>
     728:	8f 93       	push	r24
     72a:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <curX+0x1>
     72e:	8f 93       	push	r24
     730:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <curX>
     734:	8f 93       	push	r24
     736:	87 e8       	ldi	r24, 0x87	; 135
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73c:	8f 93       	push	r24
     73e:	60 d4       	rcall	.+2240   	; 0x1000 <printf>
     740:	9f ef       	ldi	r25, 0xFF	; 255
     742:	23 ed       	ldi	r18, 0xD3	; 211
     744:	80 e3       	ldi	r24, 0x30	; 48
     746:	91 50       	subi	r25, 0x01	; 1
     748:	20 40       	sbci	r18, 0x00	; 0
     74a:	80 40       	sbci	r24, 0x00	; 0
     74c:	e1 f7       	brne	.-8      	; 0x746 <testmode+0x2ac>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <testmode+0x2b6>
     750:	00 00       	nop
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
			_delay_ms(1000);
		}
		else if(MoveMode_TM == 2) {
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	a5 ce       	rjmp	.-694    	; 0x4aa <testmode+0x10>
			MoveXY_absolute(coordinate_X, coordinate_Y);
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	91 05       	cpc	r25, r1
     764:	59 f5       	brne	.+86     	; 0x7bc <testmode+0x322>
     766:	60 91 20 04 	lds	r22, 0x0420	; 0x800420 <coordinate_Y>
     76a:	70 91 21 04 	lds	r23, 0x0421	; 0x800421 <coordinate_Y+0x1>
     76e:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <coordinate_X>
     772:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <coordinate_X+0x1>
			pauseUntilStop();
     776:	1e de       	rcall	.-964    	; 0x3b4 <MoveXY_absolute>
			printf("current Position : [%4d, %4d]\r\n\r\n", curX, curY);
     778:	83 de       	rcall	.-762    	; 0x480 <pauseUntilStop>
     77a:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <curY+0x1>
     77e:	8f 93       	push	r24
     780:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <curY>
     784:	8f 93       	push	r24
     786:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <curX+0x1>
     78a:	8f 93       	push	r24
     78c:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <curX>
     790:	8f 93       	push	r24
     792:	87 e8       	ldi	r24, 0x87	; 135
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	32 d4       	rcall	.+2148   	; 0x1000 <printf>
     79c:	9f ef       	ldi	r25, 0xFF	; 255
     79e:	23 ed       	ldi	r18, 0xD3	; 211
     7a0:	80 e3       	ldi	r24, 0x30	; 48
     7a2:	91 50       	subi	r25, 0x01	; 1
     7a4:	20 40       	sbci	r18, 0x00	; 0
     7a6:	80 40       	sbci	r24, 0x00	; 0
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <testmode+0x308>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <testmode+0x312>
     7ac:	00 00       	nop
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
			_delay_ms(1000);
		}
		else if(MoveMode_TM == 3){
     7ba:	77 ce       	rjmp	.-786    	; 0x4aa <testmode+0x10>
     7bc:	03 97       	sbiw	r24, 0x03	; 3
     7be:	09 f0       	breq	.+2      	; 0x7c2 <testmode+0x328>
			MoveArm(hand,wrist,elbow);
     7c0:	74 ce       	rjmp	.-792    	; 0x4aa <testmode+0x10>
     7c2:	40 91 24 04 	lds	r20, 0x0424	; 0x800424 <elbow>
     7c6:	50 91 25 04 	lds	r21, 0x0425	; 0x800425 <elbow+0x1>
     7ca:	60 91 1e 04 	lds	r22, 0x041E	; 0x80041e <wrist>
     7ce:	70 91 1f 04 	lds	r23, 0x041F	; 0x80041f <wrist+0x1>
     7d2:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <hand>
     7d6:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <hand+0x1>
     7da:	ef dc       	rcall	.-1570   	; 0x1ba <MoveArm>
     7dc:	66 ce       	rjmp	.-820    	; 0x4aa <testmode+0x10>
		}
		
	}
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	08 95       	ret

000007ec <automode>:

void automode(void) {
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <automode+0xa>
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <automode+0xc>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
	int quit = 0;
	
	while(1) {
		do{
			quit = 0;
			printf("n");
     7fc:	8e e6       	ldi	r24, 0x6E	; 110
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	12 d4       	rcall	.+2084   	; 0x1026 <putchar>
			printf("\r\n");
     802:	8c e0       	ldi	r24, 0x0C	; 12
     804:	94 e0       	ldi	r25, 0x04	; 4
     806:	14 d4       	rcall	.+2088   	; 0x1030 <puts>
			printf("(forUser)@@quit for row == 4@@\r\n");
     808:	89 ea       	ldi	r24, 0xA9	; 169
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	11 d4       	rcall	.+2082   	; 0x1030 <puts>
			printf("(forUser)waiting for [row,column] : ");
     80e:	89 ec       	ldi	r24, 0xC9	; 201
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	9f 93       	push	r25
     814:	8f 93       	push	r24
     816:	f4 d3       	rcall	.+2024   	; 0x1000 <printf>
			scanf("%u,%u", &row, &column);
     818:	ce 01       	movw	r24, r28
     81a:	03 96       	adiw	r24, 0x03	; 3
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	02 97       	sbiw	r24, 0x02	; 2
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	8e ee       	ldi	r24, 0xEE	; 238
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	30 d4       	rcall	.+2144   	; 0x1090 <scanf>
			
			while(row>=5||column>=9) {
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
				printf("r");
     83a:	24 c0       	rjmp	.+72     	; 0x884 <automode+0x98>
     83c:	82 e7       	ldi	r24, 0x72	; 114
     83e:	90 e0       	ldi	r25, 0x00	; 0
				printf("\r\n");
     840:	f2 d3       	rcall	.+2020   	; 0x1026 <putchar>
     842:	8c e0       	ldi	r24, 0x0C	; 12
     844:	94 e0       	ldi	r25, 0x04	; 4
				printf("(forUser)worng input");
     846:	f4 d3       	rcall	.+2024   	; 0x1030 <puts>
     848:	84 ef       	ldi	r24, 0xF4	; 244
     84a:	92 e0       	ldi	r25, 0x02	; 2
     84c:	9f 93       	push	r25
     84e:	8f 93       	push	r24
				printf("(forUser)@@quit for row == 4@@\r\n");
     850:	d7 d3       	rcall	.+1966   	; 0x1000 <printf>
     852:	89 ea       	ldi	r24, 0xA9	; 169
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	ec d3       	rcall	.+2008   	; 0x1030 <puts>
				printf("(forUser)waiting for [row,column] : ");
     858:	89 ec       	ldi	r24, 0xC9	; 201
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	9f 93       	push	r25
     85e:	8f 93       	push	r24
     860:	cf d3       	rcall	.+1950   	; 0x1000 <printf>
     862:	ce 01       	movw	r24, r28
				scanf("%u,%u", &row, &column);
     864:	03 96       	adiw	r24, 0x03	; 3
     866:	9f 93       	push	r25
     868:	8f 93       	push	r24
     86a:	02 97       	sbiw	r24, 0x02	; 2
     86c:	9f 93       	push	r25
     86e:	8f 93       	push	r24
     870:	8e ee       	ldi	r24, 0xEE	; 238
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	0b d4       	rcall	.+2070   	; 0x1090 <scanf>
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
     884:	89 81       	ldd	r24, Y+1	; 0x01
			printf("\r\n");
			printf("(forUser)@@quit for row == 4@@\r\n");
			printf("(forUser)waiting for [row,column] : ");
			scanf("%u,%u", &row, &column);
			
			while(row>=5||column>=9) {
     886:	9a 81       	ldd	r25, Y+2	; 0x02
     888:	05 97       	sbiw	r24, 0x05	; 5
     88a:	c0 f6       	brcc	.-80     	; 0x83c <automode+0x50>
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	9c 81       	ldd	r25, Y+4	; 0x04
     890:	09 97       	sbiw	r24, 0x09	; 9
     892:	a0 f6       	brcc	.-88     	; 0x83c <automode+0x50>
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <__data_end+0x1>
				printf("(forUser)waiting for [row,column] : ");
				scanf("%u,%u", &row, &column);
			}
			
			do {
				wronginput = 0;
     89c:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <__data_end>
				if(row==4) {
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	9a 81       	ldd	r25, Y+2	; 0x02
     8a4:	84 30       	cpi	r24, 0x04	; 4
     8a6:	91 05       	cpc	r25, r1
     8a8:	51 f4       	brne	.+20     	; 0x8be <automode+0xd2>
					printf("(forUser)quit - ");
     8aa:	89 e0       	ldi	r24, 0x09	; 9
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	a6 d3       	rcall	.+1868   	; 0x1000 <printf>
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	01 e0       	ldi	r16, 0x01	; 1
					quit = 1;
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <automode+0xf4>
				} else {
					printf("(forUser)[%u,%u] - ",row, column);
     8be:	2c 81       	ldd	r18, Y+4	; 0x04
     8c0:	2f 93       	push	r18
     8c2:	2b 81       	ldd	r18, Y+3	; 0x03
     8c4:	2f 93       	push	r18
     8c6:	9f 93       	push	r25
     8c8:	8f 93       	push	r24
     8ca:	8a e1       	ldi	r24, 0x1A	; 26
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	96 d3       	rcall	.+1836   	; 0x1000 <printf>
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
				}
				
				printf("Do you want to proceed?[y/n] : ");
     8e0:	8e e2       	ldi	r24, 0x2E	; 46
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	8b d3       	rcall	.+1814   	; 0x1000 <printf>
				scanf("%s", uartBuffer);
     8ea:	80 e5       	ldi	r24, 0x50	; 80
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	9f 93       	push	r25
     8f0:	8f 93       	push	r24
     8f2:	83 ec       	ldi	r24, 0xC3	; 195
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	ca d3       	rcall	.+1940   	; 0x1090 <scanf>
     8fc:	6c e6       	ldi	r22, 0x6C	; 108
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
     8fe:	72 e0       	ldi	r23, 0x02	; 2
     900:	80 e5       	ldi	r24, 0x50	; 80
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	6a d3       	rcall	.+1748   	; 0xfda <strcasecmp>
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	89 2b       	or	r24, r25
     914:	81 f0       	breq	.+32     	; 0x936 <automode+0x14a>
     916:	6e e6       	ldi	r22, 0x6E	; 110
     918:	72 e0       	ldi	r23, 0x02	; 2
     91a:	80 e5       	ldi	r24, 0x50	; 80
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	5d d3       	rcall	.+1722   	; 0xfda <strcasecmp>
     920:	89 2b       	or	r24, r25
     922:	49 f0       	breq	.+18     	; 0x936 <automode+0x14a>
     924:	80 e7       	ldi	r24, 0x70	; 112
					printf("input 'y' or 'n' only\r\n");
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	83 d3       	rcall	.+1798   	; 0x1030 <puts>
     92a:	81 e0       	ldi	r24, 0x01	; 1
					wronginput = 1;
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <__data_end+0x1>
     932:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <__data_end>
				}
			} while(wronginput);
     936:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <__data_end>
     93a:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <__data_end+0x1>
     93e:	89 2b       	or	r24, r25
     940:	09 f0       	breq	.+2      	; 0x944 <automode+0x158>
			printf("\r\n");
     942:	aa cf       	rjmp	.-172    	; 0x898 <automode+0xac>
     944:	8c e0       	ldi	r24, 0x0C	; 12
     946:	94 e0       	ldi	r25, 0x04	; 4
     948:	73 d3       	rcall	.+1766   	; 0x1030 <puts>
		} while(strcasecmp(uartBuffer, "y"));
     94a:	6c e6       	ldi	r22, 0x6C	; 108
     94c:	72 e0       	ldi	r23, 0x02	; 2
     94e:	80 e5       	ldi	r24, 0x50	; 80
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	43 d3       	rcall	.+1670   	; 0xfda <strcasecmp>
     954:	89 2b       	or	r24, r25
     956:	09 f0       	breq	.+2      	; 0x95a <automode+0x16e>
     958:	51 cf       	rjmp	.-350    	; 0x7fc <automode+0x10>
		if(quit == 1) break;
     95a:	01 30       	cpi	r16, 0x01	; 1
     95c:	11 05       	cpc	r17, r1
     95e:	09 f4       	brne	.+2      	; 0x962 <automode+0x176>
     960:	6a c1       	rjmp	.+724    	; 0xc36 <automode+0x44a>
		
		//시작 준비------------------------------------------------
		basePoseArm();
     962:	4c dc       	rcall	.-1896   	; 0x1fc <basePoseArm>
     964:	9f ef       	ldi	r25, 0xFF	; 255
     966:	23 ed       	ldi	r18, 0xD3	; 211
     968:	80 e3       	ldi	r24, 0x30	; 48
     96a:	91 50       	subi	r25, 0x01	; 1
     96c:	20 40       	sbci	r18, 0x00	; 0
     96e:	80 40       	sbci	r24, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <automode+0x17e>
     972:	00 c0       	rjmp	.+0      	; 0x974 <automode+0x188>
     974:	00 00       	nop
		_delay_ms(1000);
		//---------------------------------------------------------
		
		//음료수 잡기-----------------------------------------------
		MoveXY_absolute(140, 210);
     976:	62 ed       	ldi	r22, 0xD2	; 210
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	8c e8       	ldi	r24, 0x8C	; 140
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	1a dd       	rcall	.-1484   	; 0x3b4 <MoveXY_absolute>
		pauseUntilStop();
     980:	7f dd       	rcall	.-1282   	; 0x480 <pauseUntilStop>
     982:	9f ef       	ldi	r25, 0xFF	; 255
     984:	29 e6       	ldi	r18, 0x69	; 105
     986:	88 e1       	ldi	r24, 0x18	; 24
     988:	91 50       	subi	r25, 0x01	; 1
     98a:	20 40       	sbci	r18, 0x00	; 0
     98c:	80 40       	sbci	r24, 0x00	; 0
     98e:	e1 f7       	brne	.-8      	; 0x988 <automode+0x19c>
     990:	00 c0       	rjmp	.+0      	; 0x992 <automode+0x1a6>
     992:	00 00       	nop
		_delay_ms(500);
		
		openHand();
     994:	68 dc       	rcall	.-1840   	; 0x266 <openHand>
     996:	62 ed       	ldi	r22, 0xD2	; 210
		
		MoveXY_absolute(0, 210);
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0a dd       	rcall	.-1516   	; 0x3b4 <MoveXY_absolute>
     9a0:	6f dd       	rcall	.-1314   	; 0x480 <pauseUntilStop>
		pauseUntilStop();
     9a2:	9f ef       	ldi	r25, 0xFF	; 255
     9a4:	29 e6       	ldi	r18, 0x69	; 105
     9a6:	88 e1       	ldi	r24, 0x18	; 24
     9a8:	91 50       	subi	r25, 0x01	; 1
     9aa:	20 40       	sbci	r18, 0x00	; 0
     9ac:	80 40       	sbci	r24, 0x00	; 0
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <automode+0x1bc>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <automode+0x1c6>
     9b2:	00 00       	nop
     9b4:	4a dc       	rcall	.-1900   	; 0x24a <catchHand_thin>
		_delay_ms(500);
		
		catchHand_thin();
     9b6:	9f ef       	ldi	r25, 0xFF	; 255
     9b8:	29 e6       	ldi	r18, 0x69	; 105
     9ba:	88 e1       	ldi	r24, 0x18	; 24
     9bc:	91 50       	subi	r25, 0x01	; 1
     9be:	20 40       	sbci	r18, 0x00	; 0
     9c0:	80 40       	sbci	r24, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <automode+0x1d0>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <automode+0x1da>
     9c6:	00 00       	nop
		_delay_ms(500);
		
		MoveXY_relative(0, 40);
     9c8:	68 e2       	ldi	r22, 0x28	; 40
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	90 dc       	rcall	.-1760   	; 0x2f2 <MoveXY_relative>
     9d2:	56 dd       	rcall	.-1364   	; 0x480 <pauseUntilStop>
		pauseUntilStop();
     9d4:	9f ef       	ldi	r25, 0xFF	; 255
     9d6:	25 ea       	ldi	r18, 0xA5	; 165
     9d8:	8e e0       	ldi	r24, 0x0E	; 14
     9da:	91 50       	subi	r25, 0x01	; 1
     9dc:	20 40       	sbci	r18, 0x00	; 0
     9de:	80 40       	sbci	r24, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <automode+0x1ee>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <automode+0x1f8>
     9e4:	00 00       	nop
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
		_delay_ms(300);
		MoveXY_relative(100, 0);
     9ea:	84 e6       	ldi	r24, 0x64	; 100
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	81 dc       	rcall	.-1790   	; 0x2f2 <MoveXY_relative>
     9f0:	47 dd       	rcall	.-1394   	; 0x480 <pauseUntilStop>
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	25 ea       	ldi	r18, 0xA5	; 165
		pauseUntilStop();
     9f6:	8e e0       	ldi	r24, 0x0E	; 14
     9f8:	91 50       	subi	r25, 0x01	; 1
     9fa:	20 40       	sbci	r18, 0x00	; 0
     9fc:	80 40       	sbci	r24, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <automode+0x20c>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <automode+0x216>
     a02:	00 00       	nop
     a04:	29 81       	ldd	r18, Y+1	; 0x01
     a06:	3a 81       	ldd	r19, Y+2	; 0x02
     a08:	f9 01       	movw	r30, r18
     a0a:	ee 0f       	add	r30, r30
		_delay_ms(300);
		//----------------------------------------------------------
		
		//지정된 좌표로 이동 및 안쪽으로 팔 집어넣음--------------------
		if(XlocArr[row][column] <= 250) {
     a0c:	ff 1f       	adc	r31, r31
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	e2 0f       	add	r30, r18
     a18:	f3 1f       	adc	r31, r19
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	9c 81       	ldd	r25, Y+4	; 0x04
     a1e:	e8 0f       	add	r30, r24
     a20:	f9 1f       	adc	r31, r25
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	e8 5f       	subi	r30, 0xF8	; 248
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	8b 3f       	cpi	r24, 0xFB	; 251
     a30:	91 05       	cpc	r25, r1
     a32:	0c f0       	brlt	.+2      	; 0xa36 <automode+0x24a>
     a34:	5a c0       	rjmp	.+180    	; 0xaea <automode+0x2fe>
     a36:	22 0f       	add	r18, r18
			MoveXY_absolute(250, YlocArr[row]);
     a38:	33 1f       	adc	r19, r19
     a3a:	f9 01       	movw	r30, r18
     a3c:	e0 50       	subi	r30, 0x00	; 0
     a3e:	ff 4f       	sbci	r31, 0xFF	; 255
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	8a ef       	ldi	r24, 0xFA	; 250
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	b5 dc       	rcall	.-1686   	; 0x3b4 <MoveXY_absolute>
     a4a:	1a dd       	rcall	.-1484   	; 0x480 <pauseUntilStop>
			pauseUntilStop();
     a4c:	9f ef       	ldi	r25, 0xFF	; 255
     a4e:	29 e6       	ldi	r18, 0x69	; 105
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	91 50       	subi	r25, 0x01	; 1
     a54:	20 40       	sbci	r18, 0x00	; 0
     a56:	80 40       	sbci	r24, 0x00	; 0
     a58:	e1 f7       	brne	.-8      	; 0xa52 <automode+0x266>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <automode+0x270>
     a5c:	00 00       	nop
     a5e:	11 dc       	rcall	.-2014   	; 0x282 <CWturnWrist>
     a60:	9f ef       	ldi	r25, 0xFF	; 255
			_delay_ms(500);
			
			CWturnWrist();
     a62:	23 ed       	ldi	r18, 0xD3	; 211
     a64:	80 e3       	ldi	r24, 0x30	; 48
     a66:	91 50       	subi	r25, 0x01	; 1
     a68:	20 40       	sbci	r18, 0x00	; 0
     a6a:	80 40       	sbci	r24, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <automode+0x27a>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <automode+0x284>
     a70:	00 00       	nop
     a72:	15 dc       	rcall	.-2006   	; 0x29e <innerTurnElbow>
     a74:	9f ef       	ldi	r25, 0xFF	; 255
     a76:	23 ed       	ldi	r18, 0xD3	; 211
			_delay_ms(1000);
			innerTurnElbow();
     a78:	80 e3       	ldi	r24, 0x30	; 48
     a7a:	91 50       	subi	r25, 0x01	; 1
     a7c:	20 40       	sbci	r18, 0x00	; 0
     a7e:	80 40       	sbci	r24, 0x00	; 0
     a80:	e1 f7       	brne	.-8      	; 0xa7a <automode+0x28e>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <automode+0x298>
     a84:	00 00       	nop
     a86:	e8 db       	rcall	.-2096   	; 0x258 <holdHand_thin>
     a88:	9f ef       	ldi	r25, 0xFF	; 255
     a8a:	23 ed       	ldi	r18, 0xD3	; 211
     a8c:	80 e3       	ldi	r24, 0x30	; 48
			_delay_ms(1000);
			holdHand_thin();
     a8e:	91 50       	subi	r25, 0x01	; 1
     a90:	20 40       	sbci	r18, 0x00	; 0
     a92:	80 40       	sbci	r24, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <automode+0x2a2>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <automode+0x2ac>
     a98:	00 00       	nop
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	fc 01       	movw	r30, r24
			_delay_ms(1000);
			
			MoveXY_absolute(XlocArr[row][column], YlocArr[row]);
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	e0 50       	subi	r30, 0x00	; 0
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	60 81       	ld	r22, Z
     aaa:	71 81       	ldd	r23, Z+1	; 0x01
     aac:	fc 01       	movw	r30, r24
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	e8 0f       	add	r30, r24
     abc:	f9 1f       	adc	r31, r25
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	e8 0f       	add	r30, r24
     ac4:	f9 1f       	adc	r31, r25
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	e8 5f       	subi	r30, 0xF8	; 248
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	70 dc       	rcall	.-1824   	; 0x3b4 <MoveXY_absolute>
     ad4:	d5 dc       	rcall	.-1622   	; 0x480 <pauseUntilStop>
			pauseUntilStop();
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	29 e6       	ldi	r18, 0x69	; 105
     ada:	88 e1       	ldi	r24, 0x18	; 24
     adc:	91 50       	subi	r25, 0x01	; 1
     ade:	20 40       	sbci	r18, 0x00	; 0
     ae0:	80 40       	sbci	r24, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <automode+0x2f0>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <automode+0x2fa>
     ae6:	00 00       	nop
     ae8:	30 c0       	rjmp	.+96     	; 0xb4a <automode+0x35e>
     aea:	22 0f       	add	r18, r18
			_delay_ms(500);
		} else {
			MoveXY_absolute(XlocArr[row][column], YlocArr[row]);
     aec:	33 1f       	adc	r19, r19
     aee:	f9 01       	movw	r30, r18
     af0:	e0 50       	subi	r30, 0x00	; 0
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
     af4:	60 81       	ld	r22, Z
     af6:	71 81       	ldd	r23, Z+1	; 0x01
     af8:	5d dc       	rcall	.-1862   	; 0x3b4 <MoveXY_absolute>
     afa:	c2 dc       	rcall	.-1660   	; 0x480 <pauseUntilStop>
			pauseUntilStop();
     afc:	9f ef       	ldi	r25, 0xFF	; 255
     afe:	29 e6       	ldi	r18, 0x69	; 105
     b00:	88 e1       	ldi	r24, 0x18	; 24
     b02:	91 50       	subi	r25, 0x01	; 1
     b04:	20 40       	sbci	r18, 0x00	; 0
     b06:	80 40       	sbci	r24, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <automode+0x316>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <automode+0x320>
     b0c:	00 00       	nop
			_delay_ms(500);
			
			CWturnWrist();
     b0e:	b9 db       	rcall	.-2190   	; 0x282 <CWturnWrist>
     b10:	9f ef       	ldi	r25, 0xFF	; 255
     b12:	23 ed       	ldi	r18, 0xD3	; 211
     b14:	80 e3       	ldi	r24, 0x30	; 48
     b16:	91 50       	subi	r25, 0x01	; 1
     b18:	20 40       	sbci	r18, 0x00	; 0
     b1a:	80 40       	sbci	r24, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <automode+0x32a>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <automode+0x334>
     b20:	00 00       	nop
			_delay_ms(1000);
			innerTurnElbow();
     b22:	bd db       	rcall	.-2182   	; 0x29e <innerTurnElbow>
     b24:	9f ef       	ldi	r25, 0xFF	; 255
     b26:	23 ed       	ldi	r18, 0xD3	; 211
     b28:	80 e3       	ldi	r24, 0x30	; 48
     b2a:	91 50       	subi	r25, 0x01	; 1
     b2c:	20 40       	sbci	r18, 0x00	; 0
     b2e:	80 40       	sbci	r24, 0x00	; 0
     b30:	e1 f7       	brne	.-8      	; 0xb2a <automode+0x33e>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <automode+0x348>
			_delay_ms(1000);
			holdHand_thin();
     b34:	00 00       	nop
     b36:	90 db       	rcall	.-2272   	; 0x258 <holdHand_thin>
     b38:	9f ef       	ldi	r25, 0xFF	; 255
     b3a:	23 ed       	ldi	r18, 0xD3	; 211
     b3c:	80 e3       	ldi	r24, 0x30	; 48
     b3e:	91 50       	subi	r25, 0x01	; 1
     b40:	20 40       	sbci	r18, 0x00	; 0
     b42:	80 40       	sbci	r24, 0x00	; 0
     b44:	e1 f7       	brne	.-8      	; 0xb3e <automode+0x352>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <automode+0x35c>
     b48:	00 00       	nop
			_delay_ms(1000);
		}
		//---------------------------------------------------------
		
		//살짝 내려놓음---------------------------------------------
		MoveXY_relative(0, -50);
     b4a:	6e ec       	ldi	r22, 0xCE	; 206
     b4c:	7f ef       	ldi	r23, 0xFF	; 255
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	cf db       	rcall	.-2146   	; 0x2f2 <MoveXY_relative>
     b54:	95 dc       	rcall	.-1750   	; 0x480 <pauseUntilStop>
		pauseUntilStop();
     b56:	9f ef       	ldi	r25, 0xFF	; 255
     b58:	23 ed       	ldi	r18, 0xD3	; 211
     b5a:	80 e3       	ldi	r24, 0x30	; 48
     b5c:	91 50       	subi	r25, 0x01	; 1
     b5e:	20 40       	sbci	r18, 0x00	; 0
     b60:	80 40       	sbci	r24, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <automode+0x370>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <automode+0x37a>
     b66:	00 00       	nop
     b68:	85 db       	rcall	.-2294   	; 0x274 <wideOpenHand>
     b6a:	9f ef       	ldi	r25, 0xFF	; 255
		_delay_ms(1000);
		
		wideOpenHand();
     b6c:	27 ea       	ldi	r18, 0xA7	; 167
     b6e:	81 e6       	ldi	r24, 0x61	; 97
     b70:	91 50       	subi	r25, 0x01	; 1
     b72:	20 40       	sbci	r18, 0x00	; 0
     b74:	80 40       	sbci	r24, 0x00	; 0
     b76:	e1 f7       	brne	.-8      	; 0xb70 <automode+0x384>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <automode+0x38e>
     b7a:	00 00       	nop
     b7c:	62 e3       	ldi	r22, 0x32	; 50
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
		_delay_ms(2000);
		
		MoveXY_relative(0, 50);
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	b6 db       	rcall	.-2196   	; 0x2f2 <MoveXY_relative>
     b86:	7c dc       	rcall	.-1800   	; 0x480 <pauseUntilStop>
     b88:	9f ef       	ldi	r25, 0xFF	; 255
		pauseUntilStop();
     b8a:	23 ed       	ldi	r18, 0xD3	; 211
     b8c:	80 e3       	ldi	r24, 0x30	; 48
     b8e:	91 50       	subi	r25, 0x01	; 1
     b90:	20 40       	sbci	r18, 0x00	; 0
     b92:	80 40       	sbci	r24, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <automode+0x3a2>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <automode+0x3ac>
     b98:	00 00       	nop
     b9a:	29 81       	ldd	r18, Y+1	; 0x01
     b9c:	3a 81       	ldd	r19, Y+2	; 0x02
		_delay_ms(1000);
		//----------------------------------------------------------
		
		//팔 뻄-----------------------------------------------------
		if(XlocArr[row][column] <= 250) {
     b9e:	f9 01       	movw	r30, r18
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	e2 0f       	add	r30, r18
     bae:	f3 1f       	adc	r31, r19
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	e8 0f       	add	r30, r24
     bb6:	f9 1f       	adc	r31, r25
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	e8 5f       	subi	r30, 0xF8	; 248
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	8b 3f       	cpi	r24, 0xFB	; 251
     bc6:	91 05       	cpc	r25, r1
			MoveXY_absolute(250, YlocArr[row]);
     bc8:	a4 f4       	brge	.+40     	; 0xbf2 <automode+0x406>
     bca:	22 0f       	add	r18, r18
     bcc:	33 1f       	adc	r19, r19
     bce:	f9 01       	movw	r30, r18
     bd0:	e0 50       	subi	r30, 0x00	; 0
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	60 81       	ld	r22, Z
     bd6:	71 81       	ldd	r23, Z+1	; 0x01
     bd8:	8a ef       	ldi	r24, 0xFA	; 250
			pauseUntilStop();
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	eb db       	rcall	.-2090   	; 0x3b4 <MoveXY_absolute>
     bde:	50 dc       	rcall	.-1888   	; 0x480 <pauseUntilStop>
     be0:	9f ef       	ldi	r25, 0xFF	; 255
     be2:	23 ed       	ldi	r18, 0xD3	; 211
     be4:	80 e3       	ldi	r24, 0x30	; 48
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	20 40       	sbci	r18, 0x00	; 0
     bea:	80 40       	sbci	r24, 0x00	; 0
     bec:	e1 f7       	brne	.-8      	; 0xbe6 <automode+0x3fa>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <automode+0x404>
			_delay_ms(1000);
		}
		
		closeHand_thin();
     bf0:	00 00       	nop
     bf2:	24 db       	rcall	.-2488   	; 0x23c <closeHand_thin>
     bf4:	9f ef       	ldi	r25, 0xFF	; 255
     bf6:	23 ed       	ldi	r18, 0xD3	; 211
     bf8:	80 e3       	ldi	r24, 0x30	; 48
     bfa:	91 50       	subi	r25, 0x01	; 1
     bfc:	20 40       	sbci	r18, 0x00	; 0
     bfe:	80 40       	sbci	r24, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <automode+0x40e>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <automode+0x418>
     c04:	00 00       	nop
		_delay_ms(1000);
		
		normalTurnElbow();
     c06:	52 db       	rcall	.-2396   	; 0x2ac <normalTurnElbow>
     c08:	43 db       	rcall	.-2426   	; 0x290 <normalWrist>
		normalWrist();
     c0a:	9f ef       	ldi	r25, 0xFF	; 255
     c0c:	23 ed       	ldi	r18, 0xD3	; 211
     c0e:	80 e3       	ldi	r24, 0x30	; 48
     c10:	91 50       	subi	r25, 0x01	; 1
     c12:	20 40       	sbci	r18, 0x00	; 0
     c14:	80 40       	sbci	r24, 0x00	; 0
     c16:	e1 f7       	brne	.-8      	; 0xc10 <automode+0x424>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <automode+0x42e>
     c1a:	00 00       	nop
     c1c:	66 e9       	ldi	r22, 0x96	; 150
     c1e:	70 e0       	ldi	r23, 0x00	; 0
		_delay_ms(1000);
		//----------------------------------------------------------
		
		//복귀------------------------------------------------------
		MoveXY_absolute(250, 150);
     c20:	8a ef       	ldi	r24, 0xFA	; 250
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	c7 db       	rcall	.-2162   	; 0x3b4 <MoveXY_absolute>
     c26:	2c dc       	rcall	.-1960   	; 0x480 <pauseUntilStop>
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
		pauseUntilStop();
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
		MoveXY_absolute(0, 0);
     c30:	c1 db       	rcall	.-2174   	; 0x3b4 <MoveXY_absolute>
     c32:	26 dc       	rcall	.-1972   	; 0x480 <pauseUntilStop>
     c34:	e3 cd       	rjmp	.-1082   	; 0x7fc <automode+0x10>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
		pauseUntilStop();
     c3c:	0f 90       	pop	r0
     c3e:	df 91       	pop	r29
		//---------------------------------------------------------
	}
     c40:	cf 91       	pop	r28
}
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	08 95       	ret

00000c48 <manualmode>:
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	85 b3       	in	r24, 0x15	; 21
     c52:	81 60       	ori	r24, 0x01	; 1

void manualmode(void) {
	PORTC |= (1 << PORTC0);//PORTC0 low : disable vertical motor
     c54:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PORTC4);//PORTC4 low : disable horizontal motor
     c56:	85 b3       	in	r24, 0x15	; 21
     c58:	80 61       	ori	r24, 0x10	; 16
     c5a:	85 bb       	out	0x15, r24	; 21
	freePoseArm();
     c5c:	e0 da       	rcall	.-2624   	; 0x21e <freePoseArm>
	
	while(1) {
		printf("Moveup(1), Movedown(2), gotoMainMenu(q)?");
     c5e:	8e e4       	ldi	r24, 0x4E	; 78
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	cc d1       	rcall	.+920    	; 0x1000 <printf>
		scanf("%s", uartBuffer);
     c68:	80 e5       	ldi	r24, 0x50	; 80
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	9f 93       	push	r25
     c6e:	8f 93       	push	r24
     c70:	83 ec       	ldi	r24, 0xC3	; 195
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	9f 93       	push	r25
     c76:	8f 93       	push	r24
     c78:	0b d2       	rcall	.+1046   	; 0x1090 <scanf>
		
		if(strcasecmp(uartBuffer, "1")==0) {
     c7a:	66 ec       	ldi	r22, 0xC6	; 198
     c7c:	71 e0       	ldi	r23, 0x01	; 1
     c7e:	80 e5       	ldi	r24, 0x50	; 80
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	ab d1       	rcall	.+854    	; 0xfda <strcasecmp>
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	89 2b       	or	r24, r25
     c92:	61 f5       	brne	.+88     	; 0xcec <manualmode+0xa4>
			printf("ready?(any word) : ");
     c94:	87 e7       	ldi	r24, 0x77	; 119
     c96:	93 e0       	ldi	r25, 0x03	; 3
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	b1 d1       	rcall	.+866    	; 0x1000 <printf>
			scanf("%s",uartBuffer);
     c9e:	00 e5       	ldi	r16, 0x50	; 80
     ca0:	11 e0       	ldi	r17, 0x01	; 1
     ca2:	1f 93       	push	r17
     ca4:	0f 93       	push	r16
     ca6:	c3 ec       	ldi	r28, 0xC3	; 195
     ca8:	d1 e0       	ldi	r29, 0x01	; 1
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	f0 d1       	rcall	.+992    	; 0x1090 <scanf>
			PORTC &= ~(1 << PORTC0);
     cb0:	85 b3       	in	r24, 0x15	; 21
     cb2:	8e 7f       	andi	r24, 0xFE	; 254
			PORTC &= ~(1<<PORTC1);
     cb4:	85 bb       	out	0x15, r24	; 21
     cb6:	85 b3       	in	r24, 0x15	; 21
			verticalMove();
     cb8:	8d 7f       	andi	r24, 0xFD	; 253
     cba:	85 bb       	out	0x15, r24	; 21
			printf("stop(any word) : ");
     cbc:	fe da       	rcall	.-2564   	; 0x2ba <verticalMove>
     cbe:	8b e8       	ldi	r24, 0x8B	; 139
     cc0:	93 e0       	ldi	r25, 0x03	; 3
     cc2:	9f 93       	push	r25
			scanf("%s",uartBuffer);
     cc4:	8f 93       	push	r24
     cc6:	9c d1       	rcall	.+824    	; 0x1000 <printf>
     cc8:	1f 93       	push	r17
     cca:	0f 93       	push	r16
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
			verticalStop();
     cd0:	df d1       	rcall	.+958    	; 0x1090 <scanf>
     cd2:	fa da       	rcall	.-2572   	; 0x2c8 <verticalStop>
			PORTC |= (1 << PORTC0);
     cd4:	85 b3       	in	r24, 0x15	; 21
     cd6:	81 60       	ori	r24, 0x01	; 1
     cd8:	85 bb       	out	0x15, r24	; 21
     cda:	8d b7       	in	r24, 0x3d	; 61
     cdc:	9e b7       	in	r25, 0x3e	; 62
     cde:	0c 96       	adiw	r24, 0x0c	; 12
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	9e bf       	out	0x3e, r25	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	8d bf       	out	0x3d, r24	; 61
		}
		else if (strcasecmp(uartBuffer, "2")==0){
     cea:	b9 cf       	rjmp	.-142    	; 0xc5e <manualmode+0x16>
     cec:	68 ec       	ldi	r22, 0xC8	; 200
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	80 e5       	ldi	r24, 0x50	; 80
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	72 d1       	rcall	.+740    	; 0xfda <strcasecmp>
     cf6:	89 2b       	or	r24, r25
			printf("ready?(any word) : ");
     cf8:	61 f5       	brne	.+88     	; 0xd52 <manualmode+0x10a>
     cfa:	87 e7       	ldi	r24, 0x77	; 119
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
			scanf("%s",uartBuffer);
     d02:	7e d1       	rcall	.+764    	; 0x1000 <printf>
     d04:	00 e5       	ldi	r16, 0x50	; 80
     d06:	11 e0       	ldi	r17, 0x01	; 1
     d08:	1f 93       	push	r17
     d0a:	0f 93       	push	r16
     d0c:	c3 ec       	ldi	r28, 0xC3	; 195
     d0e:	d1 e0       	ldi	r29, 0x01	; 1
     d10:	df 93       	push	r29
			PORTC &= ~(1 << PORTC0);
     d12:	cf 93       	push	r28
     d14:	bd d1       	rcall	.+890    	; 0x1090 <scanf>
     d16:	85 b3       	in	r24, 0x15	; 21
			PORTC |= (1<<PORTC1);
     d18:	8e 7f       	andi	r24, 0xFE	; 254
			verticalMove();
     d1a:	85 bb       	out	0x15, r24	; 21
     d1c:	85 b3       	in	r24, 0x15	; 21
			printf("stop(any word) : ");
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	85 bb       	out	0x15, r24	; 21
     d22:	cb da       	rcall	.-2666   	; 0x2ba <verticalMove>
     d24:	8b e8       	ldi	r24, 0x8B	; 139
     d26:	93 e0       	ldi	r25, 0x03	; 3
     d28:	9f 93       	push	r25
			scanf("%s",uartBuffer);
     d2a:	8f 93       	push	r24
     d2c:	69 d1       	rcall	.+722    	; 0x1000 <printf>
     d2e:	1f 93       	push	r17
     d30:	0f 93       	push	r16
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
			verticalStop();
     d36:	ac d1       	rcall	.+856    	; 0x1090 <scanf>
			PORTC |= (1 << PORTC0);
     d38:	c7 da       	rcall	.-2674   	; 0x2c8 <verticalStop>
     d3a:	85 b3       	in	r24, 0x15	; 21
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	85 bb       	out	0x15, r24	; 21
     d40:	8d b7       	in	r24, 0x3d	; 61
     d42:	9e b7       	in	r25, 0x3e	; 62
     d44:	0c 96       	adiw	r24, 0x0c	; 12
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	9e bf       	out	0x3e, r25	; 62
		}
		else if (strcasecmp(uartBuffer, "q")==0)
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	8d bf       	out	0x3d, r24	; 61
     d50:	86 cf       	rjmp	.-244    	; 0xc5e <manualmode+0x16>
     d52:	6c ec       	ldi	r22, 0xCC	; 204
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	80 e5       	ldi	r24, 0x50	; 80
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	3f d1       	rcall	.+638    	; 0xfda <strcasecmp>
			break;
		else
			printf("input '1', '2' or 'q'\r\n");
     d5c:	89 2b       	or	r24, r25
     d5e:	21 f0       	breq	.+8      	; 0xd68 <manualmode+0x120>
     d60:	8d e9       	ldi	r24, 0x9D	; 157
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	65 d1       	rcall	.+714    	; 0x1030 <puts>
	}
	
	basePoseArm();
     d66:	7b cf       	rjmp	.-266    	; 0xc5e <manualmode+0x16>
     d68:	49 da       	rcall	.-2926   	; 0x1fc <basePoseArm>
	
	PORTC &= ~(1 << PORTC0);//PORTC0 low : enable vertical motor
     d6a:	85 b3       	in	r24, 0x15	; 21
     d6c:	8e 7f       	andi	r24, 0xFE	; 254
     d6e:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << PORTC4);//PORTC4 low : enable horizontal motor
     d70:	85 b3       	in	r24, 0x15	; 21
     d72:	8f 7e       	andi	r24, 0xEF	; 239
     d74:	85 bb       	out	0x15, r24	; 21
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	08 95       	ret

00000d80 <setHereas00>:

void setHereas00(void) {
	curX = 0; curY = 0;
     d80:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <curX+0x1>
     d84:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <curX>
     d88:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <curY+0x1>
     d8c:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <curY>
     d90:	08 95       	ret

00000d92 <__vector_1>:
}

ISR(INT0_vect) {//emergency switch
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	0b b6       	in	r0, 0x3b	; 59
     d9e:	0f 92       	push	r0
     da0:	2f 93       	push	r18
     da2:	3f 93       	push	r19
     da4:	4f 93       	push	r20
     da6:	5f 93       	push	r21
     da8:	6f 93       	push	r22
     daa:	7f 93       	push	r23
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	af 93       	push	r26
     db2:	bf 93       	push	r27
     db4:	ef 93       	push	r30
     db6:	ff 93       	push	r31
	freePoseArm();
     db8:	32 da       	rcall	.-2972   	; 0x21e <freePoseArm>
	
	PORTC |= (1 << PORTC0);//PORTC0 low : disable vertical motor
     dba:	85 b3       	in	r24, 0x15	; 21
     dbc:	81 60       	ori	r24, 0x01	; 1
     dbe:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PORTC4);//PORTC4 low : disable horizontal motor
     dc0:	85 b3       	in	r24, 0x15	; 21
     dc2:	80 61       	ori	r24, 0x10	; 16
     dc4:	85 bb       	out	0x15, r24	; 21
}
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0b be       	out	0x3b, r0	; 59
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <__vector_14>:

ISR(TIMER1_OVF_vect) {
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	0b b6       	in	r0, 0x3b	; 59
     df8:	0f 92       	push	r0
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	4f 93       	push	r20
     e00:	5f 93       	push	r21
     e02:	6f 93       	push	r22
     e04:	7f 93       	push	r23
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	ef 93       	push	r30
     e10:	ff 93       	push	r31
	if(h_ms != -1) h_ms--;
     e12:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <h_ms>
     e16:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <h_ms+0x1>
     e1a:	8f 3f       	cpi	r24, 0xFF	; 255
     e1c:	2f ef       	ldi	r18, 0xFF	; 255
     e1e:	92 07       	cpc	r25, r18
     e20:	29 f0       	breq	.+10     	; 0xe2c <__vector_14+0x40>
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <h_ms+0x1>
     e28:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <h_ms>
	if(v_ms != -1) v_ms--;
     e2c:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <v_ms>
     e30:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <v_ms+0x1>
     e34:	8f 3f       	cpi	r24, 0xFF	; 255
     e36:	2f ef       	ldi	r18, 0xFF	; 255
     e38:	92 07       	cpc	r25, r18
     e3a:	29 f0       	breq	.+10     	; 0xe46 <__vector_14+0x5a>
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <v_ms+0x1>
     e42:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <v_ms>
	
	if(h_ms == 0) {
     e46:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <h_ms>
     e4a:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <h_ms+0x1>
     e4e:	89 2b       	or	r24, r25
     e50:	39 f4       	brne	.+14     	; 0xe60 <__vector_14+0x74>
		horizontalStop();
     e52:	48 da       	rcall	.-2928   	; 0x2e4 <horizontalStop>
		h_stopFlag = 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <h_stopFlag+0x1>
     e5c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <h_stopFlag>
	}
	if(v_ms == 0) {
     e60:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <v_ms>
     e64:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <v_ms+0x1>
     e68:	89 2b       	or	r24, r25
		verticalStop();
     e6a:	39 f4       	brne	.+14     	; 0xe7a <__vector_14+0x8e>
     e6c:	2d da       	rcall	.-2982   	; 0x2c8 <verticalStop>
		v_stopFlag = 1;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <v_stopFlag+0x1>
     e76:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <v_stopFlag>
	}
}
     e7a:	ff 91       	pop	r31
     e7c:	ef 91       	pop	r30
     e7e:	bf 91       	pop	r27
     e80:	af 91       	pop	r26
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	7f 91       	pop	r23
     e88:	6f 91       	pop	r22
     e8a:	5f 91       	pop	r21
     e8c:	4f 91       	pop	r20
     e8e:	3f 91       	pop	r19
     e90:	2f 91       	pop	r18
     e92:	0f 90       	pop	r0
     e94:	0b be       	out	0x3b, r0	; 59
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <main>:


int main(void)
{
	DDRC |= (1 << PORTC0) | (1 << PORTC1);//vertical, PORTC0 : EN, PORTC1 : CW;
     ea0:	84 b3       	in	r24, 0x14	; 20
     ea2:	83 60       	ori	r24, 0x03	; 3
     ea4:	84 bb       	out	0x14, r24	; 20
	DDRC |= (1 << PORTC4) | (1 << PORTC5);//horizontal, PORTC4 : EN, PORTC5 : CW;
     ea6:	84 b3       	in	r24, 0x14	; 20
     ea8:	80 63       	ori	r24, 0x30	; 48
     eaa:	84 bb       	out	0x14, r24	; 20

	PORTC &= ~(1 << PORTC0);//PORTC0 low : enable vertical motor
     eac:	85 b3       	in	r24, 0x15	; 21
     eae:	8e 7f       	andi	r24, 0xFE	; 254
     eb0:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << PORTC4);//PORTC4 low : enable horizontal motor
     eb2:	85 b3       	in	r24, 0x15	; 21
     eb4:	8f 7e       	andi	r24, 0xEF	; 239
     eb6:	85 bb       	out	0x15, r24	; 21

	InitializeTimer0();//vertical step motor PWM channel
     eb8:	0e d9       	rcall	.-3556   	; 0xd6 <InitializeTimer0>
	InitializeTimer2();//horizontal step motor PWM channel
     eba:	22 d9       	rcall	.-3516   	; 0x100 <InitializeTimer2>
	InitializeTimer3();//robot arm servo motor PWM channel
     ebc:	47 d9       	rcall	.-3442   	; 0x14c <InitializeTimer3>
     ebe:	35 d9       	rcall	.-3478   	; 0x12a <InitializeTimer1>
	
	InitializeTimer1();//user timer
     ec0:	87 b7       	in	r24, 0x37	; 55
     ec2:	84 60       	ori	r24, 0x04	; 4
	TIMSK |= (1<<TOIE1); //T/C1 overflow interrupt enable
     ec4:	87 bf       	out	0x37, r24	; 55
     ec6:	81 b3       	in	r24, 0x11	; 17
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
	
	DDRD &= ~(1<<PORTD0);
     eca:	81 bb       	out	0x11, r24	; 17
     ecc:	82 b3       	in	r24, 0x12	; 18
     ece:	81 60       	ori	r24, 0x01	; 1
	PORTD |= (1<<PORTD0);
     ed0:	82 bb       	out	0x12, r24	; 18
     ed2:	89 b7       	in	r24, 0x39	; 57
     ed4:	81 60       	ori	r24, 0x01	; 1
	EIMSK |= (1<<INT0);
     ed6:	89 bf       	out	0x39, r24	; 57
     ed8:	ea e6       	ldi	r30, 0x6A	; 106
     eda:	f0 e0       	ldi	r31, 0x00	; 0
	EICRA |= (1<<ISC01);
     edc:	80 81       	ld	r24, Z
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	80 83       	st	Z, r24
     ee2:	78 94       	sei
	
	sei();
     ee4:	54 d0       	rcall	.+168    	; 0xf8e <UART1_init>
	
	UART1_init();
     ee6:	e6 e2       	ldi	r30, 0x26	; 38
     ee8:	f4 e0       	ldi	r31, 0x04	; 4
	stdout = &OUTPUT;
     eea:	82 e7       	ldi	r24, 0x72	; 114
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	93 83       	std	Z+3, r25	; 0x03
     ef0:	82 83       	std	Z+2, r24	; 0x02
     ef2:	84 e6       	ldi	r24, 0x64	; 100
	stdin = &INPUT;
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
     efa:	80 d9       	rcall	.-3328   	; 0x1fc <basePoseArm>
	
	
	basePoseArm();
     efc:	2f ef       	ldi	r18, 0xFF	; 255
     efe:	83 e2       	ldi	r24, 0x23	; 35
     f00:	94 ef       	ldi	r25, 0xF4	; 244
     f02:	21 50       	subi	r18, 0x01	; 1
     f04:	80 40       	sbci	r24, 0x00	; 0
     f06:	90 40       	sbci	r25, 0x00	; 0
     f08:	e1 f7       	brne	.-8      	; 0xf02 <main+0x62>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <main+0x6c>
     f0c:	00 00       	nop
     f0e:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <__data_end+0x1>
	_delay_ms(5000);

	while(1) {
		do {
			wronginput = 0;
     f12:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <__data_end>
     f16:	84 eb       	ldi	r24, 0xB4	; 180
			
			printf("Testmode(1), automode(2), manualmode(3), setHereAs[0,0](4)?");
     f18:	93 e0       	ldi	r25, 0x03	; 3
     f1a:	9f 93       	push	r25
     f1c:	8f 93       	push	r24
     f1e:	70 d0       	rcall	.+224    	; 0x1000 <printf>
     f20:	80 e5       	ldi	r24, 0x50	; 80
     f22:	91 e0       	ldi	r25, 0x01	; 1
			scanf("%s", uartBuffer);
     f24:	9f 93       	push	r25
     f26:	8f 93       	push	r24
     f28:	83 ec       	ldi	r24, 0xC3	; 195
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	9f 93       	push	r25
     f2e:	8f 93       	push	r24
     f30:	af d0       	rcall	.+350    	; 0x1090 <scanf>
     f32:	66 ec       	ldi	r22, 0xC6	; 198
			
			if(strcasecmp(uartBuffer, "1")==0) 
     f34:	71 e0       	ldi	r23, 0x01	; 1
     f36:	80 e5       	ldi	r24, 0x50	; 80
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	4f d0       	rcall	.+158    	; 0xfda <strcasecmp>
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	89 2b       	or	r24, r25
     f4a:	11 f4       	brne	.+4      	; 0xf50 <main+0xb0>
				testmode();
     f4c:	a6 da       	rcall	.-2740   	; 0x49a <testmode>
     f4e:	df cf       	rjmp	.-66     	; 0xf0e <main+0x6e>
			else if (strcasecmp(uartBuffer, "2")==0) 
     f50:	68 ec       	ldi	r22, 0xC8	; 200
     f52:	71 e0       	ldi	r23, 0x01	; 1
     f54:	80 e5       	ldi	r24, 0x50	; 80
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	40 d0       	rcall	.+128    	; 0xfda <strcasecmp>
     f5a:	89 2b       	or	r24, r25
				automode();
     f5c:	11 f4       	brne	.+4      	; 0xf62 <main+0xc2>
     f5e:	46 dc       	rcall	.-1908   	; 0x7ec <automode>
     f60:	d6 cf       	rjmp	.-84     	; 0xf0e <main+0x6e>
			else if (strcasecmp(uartBuffer, "3")==0)
     f62:	6a ec       	ldi	r22, 0xCA	; 202
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	80 e5       	ldi	r24, 0x50	; 80
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	37 d0       	rcall	.+110    	; 0xfda <strcasecmp>
     f6c:	89 2b       	or	r24, r25
				manualmode();
     f6e:	11 f4       	brne	.+4      	; 0xf74 <main+0xd4>
     f70:	6b de       	rcall	.-810    	; 0xc48 <manualmode>
			else if (strcasecmp(uartBuffer, "4")==0)
     f72:	cd cf       	rjmp	.-102    	; 0xf0e <main+0x6e>
     f74:	60 ef       	ldi	r22, 0xF0	; 240
     f76:	73 e0       	ldi	r23, 0x03	; 3
     f78:	80 e5       	ldi	r24, 0x50	; 80
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	2e d0       	rcall	.+92     	; 0xfda <strcasecmp>
     f7e:	89 2b       	or	r24, r25
     f80:	11 f4       	brne	.+4      	; 0xf86 <main+0xe6>
				setHereas00();
     f82:	fe de       	rcall	.-516    	; 0xd80 <setHereas00>
     f84:	c4 cf       	rjmp	.-120    	; 0xf0e <main+0x6e>
     f86:	82 ef       	ldi	r24, 0xF2	; 242
			else{
				printf("input '1', '2', '3' or '4'\r\n");
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	52 d0       	rcall	.+164    	; 0x1030 <puts>
     f8c:	c0 cf       	rjmp	.-128    	; 0xf0e <main+0x6e>

00000f8e <UART1_init>:
﻿#include <avr/io.h>

void UART1_init(void)
{
	UBRR1H = 0x00;			// 9600 보율로 설정
     f8e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;
     f92:	8f ec       	ldi	r24, 0xCF	; 207
     f94:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= _BV(U2X1);			// 2배속 모드
     f98:	eb e9       	ldi	r30, 0x9B	; 155
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	82 60       	ori	r24, 0x02	; 2
     fa0:	80 83       	st	Z, r24
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR1C |= 0x06;
     fa2:	ed e9       	ldi	r30, 0x9D	; 157
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	86 60       	ori	r24, 0x06	; 6
     faa:	80 83       	st	Z, r24
	
	UCSR1B |= _BV(RXEN1);		// 송수신 가능
     fac:	ea e9       	ldi	r30, 0x9A	; 154
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 61       	ori	r24, 0x10	; 16
     fb4:	80 83       	st	Z, r24
	UCSR1B |= _BV(TXEN1);
     fb6:	80 81       	ld	r24, Z
     fb8:	88 60       	ori	r24, 0x08	; 8
     fba:	80 83       	st	Z, r24
     fbc:	08 95       	ret

00000fbe <UART1_transmit>:
}

void UART1_transmit(char data)
{
	while( !(UCSR1A & (1 << UDRE1)) );	// 송신 가능 대기
     fbe:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     fc2:	95 ff       	sbrs	r25, 5
     fc4:	fc cf       	rjmp	.-8      	; 0xfbe <UART1_transmit>
	UDR1 = data;				// 데이터 전송
     fc6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     fca:	08 95       	ret

00000fcc <UART1_receive>:
}

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );	// 데이터 수신 대기
     fcc:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     fd0:	88 23       	and	r24, r24
     fd2:	e4 f7       	brge	.-8      	; 0xfcc <UART1_receive>
	return UDR1;
     fd4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
     fd8:	08 95       	ret

00000fda <strcasecmp>:
     fda:	fb 01       	movw	r30, r22
     fdc:	dc 01       	movw	r26, r24
     fde:	8d 91       	ld	r24, X+
     fe0:	81 34       	cpi	r24, 0x41	; 65
     fe2:	1c f0       	brlt	.+6      	; 0xfea <strcasecmp+0x10>
     fe4:	8b 35       	cpi	r24, 0x5B	; 91
     fe6:	0c f4       	brge	.+2      	; 0xfea <strcasecmp+0x10>
     fe8:	80 5e       	subi	r24, 0xE0	; 224
     fea:	61 91       	ld	r22, Z+
     fec:	61 34       	cpi	r22, 0x41	; 65
     fee:	1c f0       	brlt	.+6      	; 0xff6 <strcasecmp+0x1c>
     ff0:	6b 35       	cpi	r22, 0x5B	; 91
     ff2:	0c f4       	brge	.+2      	; 0xff6 <strcasecmp+0x1c>
     ff4:	60 5e       	subi	r22, 0xE0	; 224
     ff6:	86 1b       	sub	r24, r22
     ff8:	61 11       	cpse	r22, r1
     ffa:	89 f3       	breq	.-30     	; 0xfde <strcasecmp+0x4>
     ffc:	99 0b       	sbc	r25, r25
     ffe:	08 95       	ret

00001000 <printf>:
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	ae 01       	movw	r20, r28
    100a:	4b 5f       	subi	r20, 0xFB	; 251
    100c:	5f 4f       	sbci	r21, 0xFF	; 255
    100e:	fa 01       	movw	r30, r20
    1010:	61 91       	ld	r22, Z+
    1012:	71 91       	ld	r23, Z+
    1014:	af 01       	movw	r20, r30
    1016:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__iob+0x2>
    101a:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <__iob+0x3>
    101e:	4b d0       	rcall	.+150    	; 0x10b6 <vfprintf>
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <putchar>:
    1026:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <__iob+0x2>
    102a:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <__iob+0x3>
    102e:	70 c5       	rjmp	.+2784   	; 0x1b10 <fputc>

00001030 <puts>:
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	e0 91 28 04 	lds	r30, 0x0428	; 0x800428 <__iob+0x2>
    103c:	f0 91 29 04 	lds	r31, 0x0429	; 0x800429 <__iob+0x3>
    1040:	23 81       	ldd	r18, Z+3	; 0x03
    1042:	21 ff       	sbrs	r18, 1
    1044:	1b c0       	rjmp	.+54     	; 0x107c <puts+0x4c>
    1046:	8c 01       	movw	r16, r24
    1048:	d0 e0       	ldi	r29, 0x00	; 0
    104a:	c0 e0       	ldi	r28, 0x00	; 0
    104c:	f8 01       	movw	r30, r16
    104e:	81 91       	ld	r24, Z+
    1050:	8f 01       	movw	r16, r30
    1052:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <__iob+0x2>
    1056:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <__iob+0x3>
    105a:	db 01       	movw	r26, r22
    105c:	18 96       	adiw	r26, 0x08	; 8
    105e:	ed 91       	ld	r30, X+
    1060:	fc 91       	ld	r31, X
    1062:	19 97       	sbiw	r26, 0x09	; 9
    1064:	88 23       	and	r24, r24
    1066:	31 f0       	breq	.+12     	; 0x1074 <puts+0x44>
    1068:	09 95       	icall
    106a:	89 2b       	or	r24, r25
    106c:	79 f3       	breq	.-34     	; 0x104c <puts+0x1c>
    106e:	df ef       	ldi	r29, 0xFF	; 255
    1070:	cf ef       	ldi	r28, 0xFF	; 255
    1072:	ec cf       	rjmp	.-40     	; 0x104c <puts+0x1c>
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	09 95       	icall
    1078:	89 2b       	or	r24, r25
    107a:	19 f0       	breq	.+6      	; 0x1082 <puts+0x52>
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <puts+0x56>
    1082:	8d 2f       	mov	r24, r29
    1084:	9c 2f       	mov	r25, r28
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <scanf>:
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	ae 01       	movw	r20, r28
    109a:	4b 5f       	subi	r20, 0xFB	; 251
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	fa 01       	movw	r30, r20
    10a0:	61 91       	ld	r22, Z+
    10a2:	71 91       	ld	r23, Z+
    10a4:	af 01       	movw	r20, r30
    10a6:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__iob>
    10aa:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__iob+0x1>
    10ae:	b2 d3       	rcall	.+1892   	; 0x1814 <vfscanf>
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <vfprintf>:
    10b6:	2f 92       	push	r2
    10b8:	3f 92       	push	r3
    10ba:	4f 92       	push	r4
    10bc:	5f 92       	push	r5
    10be:	6f 92       	push	r6
    10c0:	7f 92       	push	r7
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	2b 97       	sbiw	r28, 0x0b	; 11
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	6c 01       	movw	r12, r24
    10ec:	7b 01       	movw	r14, r22
    10ee:	8a 01       	movw	r16, r20
    10f0:	fc 01       	movw	r30, r24
    10f2:	17 82       	std	Z+7, r1	; 0x07
    10f4:	16 82       	std	Z+6, r1	; 0x06
    10f6:	83 81       	ldd	r24, Z+3	; 0x03
    10f8:	81 ff       	sbrs	r24, 1
    10fa:	bf c1       	rjmp	.+894    	; 0x147a <__stack+0x37b>
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	3c 01       	movw	r6, r24
    1102:	f6 01       	movw	r30, r12
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	f7 01       	movw	r30, r14
    1108:	93 fd       	sbrc	r25, 3
    110a:	85 91       	lpm	r24, Z+
    110c:	93 ff       	sbrs	r25, 3
    110e:	81 91       	ld	r24, Z+
    1110:	7f 01       	movw	r14, r30
    1112:	88 23       	and	r24, r24
    1114:	09 f4       	brne	.+2      	; 0x1118 <__stack+0x19>
    1116:	ad c1       	rjmp	.+858    	; 0x1472 <__stack+0x373>
    1118:	85 32       	cpi	r24, 0x25	; 37
    111a:	39 f4       	brne	.+14     	; 0x112a <__stack+0x2b>
    111c:	93 fd       	sbrc	r25, 3
    111e:	85 91       	lpm	r24, Z+
    1120:	93 ff       	sbrs	r25, 3
    1122:	81 91       	ld	r24, Z+
    1124:	7f 01       	movw	r14, r30
    1126:	85 32       	cpi	r24, 0x25	; 37
    1128:	21 f4       	brne	.+8      	; 0x1132 <__stack+0x33>
    112a:	b6 01       	movw	r22, r12
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	f0 d4       	rcall	.+2528   	; 0x1b10 <fputc>
    1130:	e8 cf       	rjmp	.-48     	; 0x1102 <__stack+0x3>
    1132:	91 2c       	mov	r9, r1
    1134:	21 2c       	mov	r2, r1
    1136:	31 2c       	mov	r3, r1
    1138:	ff e1       	ldi	r31, 0x1F	; 31
    113a:	f3 15       	cp	r31, r3
    113c:	d8 f0       	brcs	.+54     	; 0x1174 <__stack+0x75>
    113e:	8b 32       	cpi	r24, 0x2B	; 43
    1140:	79 f0       	breq	.+30     	; 0x1160 <__stack+0x61>
    1142:	38 f4       	brcc	.+14     	; 0x1152 <__stack+0x53>
    1144:	80 32       	cpi	r24, 0x20	; 32
    1146:	79 f0       	breq	.+30     	; 0x1166 <__stack+0x67>
    1148:	83 32       	cpi	r24, 0x23	; 35
    114a:	a1 f4       	brne	.+40     	; 0x1174 <__stack+0x75>
    114c:	23 2d       	mov	r18, r3
    114e:	20 61       	ori	r18, 0x10	; 16
    1150:	1d c0       	rjmp	.+58     	; 0x118c <__stack+0x8d>
    1152:	8d 32       	cpi	r24, 0x2D	; 45
    1154:	61 f0       	breq	.+24     	; 0x116e <__stack+0x6f>
    1156:	80 33       	cpi	r24, 0x30	; 48
    1158:	69 f4       	brne	.+26     	; 0x1174 <__stack+0x75>
    115a:	23 2d       	mov	r18, r3
    115c:	21 60       	ori	r18, 0x01	; 1
    115e:	16 c0       	rjmp	.+44     	; 0x118c <__stack+0x8d>
    1160:	83 2d       	mov	r24, r3
    1162:	82 60       	ori	r24, 0x02	; 2
    1164:	38 2e       	mov	r3, r24
    1166:	e3 2d       	mov	r30, r3
    1168:	e4 60       	ori	r30, 0x04	; 4
    116a:	3e 2e       	mov	r3, r30
    116c:	2a c0       	rjmp	.+84     	; 0x11c2 <__stack+0xc3>
    116e:	f3 2d       	mov	r31, r3
    1170:	f8 60       	ori	r31, 0x08	; 8
    1172:	1d c0       	rjmp	.+58     	; 0x11ae <__stack+0xaf>
    1174:	37 fc       	sbrc	r3, 7
    1176:	2d c0       	rjmp	.+90     	; 0x11d2 <__stack+0xd3>
    1178:	20 ed       	ldi	r18, 0xD0	; 208
    117a:	28 0f       	add	r18, r24
    117c:	2a 30       	cpi	r18, 0x0A	; 10
    117e:	40 f0       	brcs	.+16     	; 0x1190 <__stack+0x91>
    1180:	8e 32       	cpi	r24, 0x2E	; 46
    1182:	b9 f4       	brne	.+46     	; 0x11b2 <__stack+0xb3>
    1184:	36 fc       	sbrc	r3, 6
    1186:	75 c1       	rjmp	.+746    	; 0x1472 <__stack+0x373>
    1188:	23 2d       	mov	r18, r3
    118a:	20 64       	ori	r18, 0x40	; 64
    118c:	32 2e       	mov	r3, r18
    118e:	19 c0       	rjmp	.+50     	; 0x11c2 <__stack+0xc3>
    1190:	36 fe       	sbrs	r3, 6
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <__stack+0xa1>
    1194:	8a e0       	ldi	r24, 0x0A	; 10
    1196:	98 9e       	mul	r9, r24
    1198:	20 0d       	add	r18, r0
    119a:	11 24       	eor	r1, r1
    119c:	92 2e       	mov	r9, r18
    119e:	11 c0       	rjmp	.+34     	; 0x11c2 <__stack+0xc3>
    11a0:	ea e0       	ldi	r30, 0x0A	; 10
    11a2:	2e 9e       	mul	r2, r30
    11a4:	20 0d       	add	r18, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	22 2e       	mov	r2, r18
    11aa:	f3 2d       	mov	r31, r3
    11ac:	f0 62       	ori	r31, 0x20	; 32
    11ae:	3f 2e       	mov	r3, r31
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <__stack+0xc3>
    11b2:	8c 36       	cpi	r24, 0x6C	; 108
    11b4:	21 f4       	brne	.+8      	; 0x11be <__stack+0xbf>
    11b6:	83 2d       	mov	r24, r3
    11b8:	80 68       	ori	r24, 0x80	; 128
    11ba:	38 2e       	mov	r3, r24
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <__stack+0xc3>
    11be:	88 36       	cpi	r24, 0x68	; 104
    11c0:	41 f4       	brne	.+16     	; 0x11d2 <__stack+0xd3>
    11c2:	f7 01       	movw	r30, r14
    11c4:	93 fd       	sbrc	r25, 3
    11c6:	85 91       	lpm	r24, Z+
    11c8:	93 ff       	sbrs	r25, 3
    11ca:	81 91       	ld	r24, Z+
    11cc:	7f 01       	movw	r14, r30
    11ce:	81 11       	cpse	r24, r1
    11d0:	b3 cf       	rjmp	.-154    	; 0x1138 <__stack+0x39>
    11d2:	98 2f       	mov	r25, r24
    11d4:	9f 7d       	andi	r25, 0xDF	; 223
    11d6:	95 54       	subi	r25, 0x45	; 69
    11d8:	93 30       	cpi	r25, 0x03	; 3
    11da:	28 f4       	brcc	.+10     	; 0x11e6 <__stack+0xe7>
    11dc:	0c 5f       	subi	r16, 0xFC	; 252
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	9f e3       	ldi	r25, 0x3F	; 63
    11e2:	99 83       	std	Y+1, r25	; 0x01
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <__stack+0x101>
    11e6:	83 36       	cpi	r24, 0x63	; 99
    11e8:	31 f0       	breq	.+12     	; 0x11f6 <__stack+0xf7>
    11ea:	83 37       	cpi	r24, 0x73	; 115
    11ec:	71 f0       	breq	.+28     	; 0x120a <__stack+0x10b>
    11ee:	83 35       	cpi	r24, 0x53	; 83
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <__stack+0xf5>
    11f2:	55 c0       	rjmp	.+170    	; 0x129e <__stack+0x19f>
    11f4:	20 c0       	rjmp	.+64     	; 0x1236 <__stack+0x137>
    11f6:	f8 01       	movw	r30, r16
    11f8:	80 81       	ld	r24, Z
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	0e 5f       	subi	r16, 0xFE	; 254
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1200:	88 24       	eor	r8, r8
    1202:	83 94       	inc	r8
    1204:	91 2c       	mov	r9, r1
    1206:	53 01       	movw	r10, r6
    1208:	12 c0       	rjmp	.+36     	; 0x122e <__stack+0x12f>
    120a:	28 01       	movw	r4, r16
    120c:	f2 e0       	ldi	r31, 0x02	; 2
    120e:	4f 0e       	add	r4, r31
    1210:	51 1c       	adc	r5, r1
    1212:	f8 01       	movw	r30, r16
    1214:	a0 80       	ld	r10, Z
    1216:	b1 80       	ldd	r11, Z+1	; 0x01
    1218:	36 fe       	sbrs	r3, 6
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <__stack+0x123>
    121c:	69 2d       	mov	r22, r9
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <__stack+0x127>
    1222:	6f ef       	ldi	r22, 0xFF	; 255
    1224:	7f ef       	ldi	r23, 0xFF	; 255
    1226:	c5 01       	movw	r24, r10
    1228:	2a d4       	rcall	.+2132   	; 0x1a7e <strnlen>
    122a:	4c 01       	movw	r8, r24
    122c:	82 01       	movw	r16, r4
    122e:	f3 2d       	mov	r31, r3
    1230:	ff 77       	andi	r31, 0x7F	; 127
    1232:	3f 2e       	mov	r3, r31
    1234:	15 c0       	rjmp	.+42     	; 0x1260 <__stack+0x161>
    1236:	28 01       	movw	r4, r16
    1238:	22 e0       	ldi	r18, 0x02	; 2
    123a:	42 0e       	add	r4, r18
    123c:	51 1c       	adc	r5, r1
    123e:	f8 01       	movw	r30, r16
    1240:	a0 80       	ld	r10, Z
    1242:	b1 80       	ldd	r11, Z+1	; 0x01
    1244:	36 fe       	sbrs	r3, 6
    1246:	03 c0       	rjmp	.+6      	; 0x124e <__stack+0x14f>
    1248:	69 2d       	mov	r22, r9
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <__stack+0x153>
    124e:	6f ef       	ldi	r22, 0xFF	; 255
    1250:	7f ef       	ldi	r23, 0xFF	; 255
    1252:	c5 01       	movw	r24, r10
    1254:	09 d4       	rcall	.+2066   	; 0x1a68 <strnlen_P>
    1256:	4c 01       	movw	r8, r24
    1258:	f3 2d       	mov	r31, r3
    125a:	f0 68       	ori	r31, 0x80	; 128
    125c:	3f 2e       	mov	r3, r31
    125e:	82 01       	movw	r16, r4
    1260:	33 fc       	sbrc	r3, 3
    1262:	19 c0       	rjmp	.+50     	; 0x1296 <__stack+0x197>
    1264:	82 2d       	mov	r24, r2
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	88 16       	cp	r8, r24
    126a:	99 06       	cpc	r9, r25
    126c:	a0 f4       	brcc	.+40     	; 0x1296 <__stack+0x197>
    126e:	b6 01       	movw	r22, r12
    1270:	80 e2       	ldi	r24, 0x20	; 32
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	4d d4       	rcall	.+2202   	; 0x1b10 <fputc>
    1276:	2a 94       	dec	r2
    1278:	f5 cf       	rjmp	.-22     	; 0x1264 <__stack+0x165>
    127a:	f5 01       	movw	r30, r10
    127c:	37 fc       	sbrc	r3, 7
    127e:	85 91       	lpm	r24, Z+
    1280:	37 fe       	sbrs	r3, 7
    1282:	81 91       	ld	r24, Z+
    1284:	5f 01       	movw	r10, r30
    1286:	b6 01       	movw	r22, r12
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	42 d4       	rcall	.+2180   	; 0x1b10 <fputc>
    128c:	21 10       	cpse	r2, r1
    128e:	2a 94       	dec	r2
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	82 1a       	sub	r8, r18
    1294:	91 08       	sbc	r9, r1
    1296:	81 14       	cp	r8, r1
    1298:	91 04       	cpc	r9, r1
    129a:	79 f7       	brne	.-34     	; 0x127a <__stack+0x17b>
    129c:	e1 c0       	rjmp	.+450    	; 0x1460 <__stack+0x361>
    129e:	84 36       	cpi	r24, 0x64	; 100
    12a0:	11 f0       	breq	.+4      	; 0x12a6 <__stack+0x1a7>
    12a2:	89 36       	cpi	r24, 0x69	; 105
    12a4:	39 f5       	brne	.+78     	; 0x12f4 <__stack+0x1f5>
    12a6:	f8 01       	movw	r30, r16
    12a8:	37 fe       	sbrs	r3, 7
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <__stack+0x1bb>
    12ac:	60 81       	ld	r22, Z
    12ae:	71 81       	ldd	r23, Z+1	; 0x01
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	0c 5f       	subi	r16, 0xFC	; 252
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
    12b8:	08 c0       	rjmp	.+16     	; 0x12ca <__stack+0x1cb>
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	07 2e       	mov	r0, r23
    12c0:	00 0c       	add	r0, r0
    12c2:	88 0b       	sbc	r24, r24
    12c4:	99 0b       	sbc	r25, r25
    12c6:	0e 5f       	subi	r16, 0xFE	; 254
    12c8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ca:	f3 2d       	mov	r31, r3
    12cc:	ff 76       	andi	r31, 0x6F	; 111
    12ce:	3f 2e       	mov	r3, r31
    12d0:	97 ff       	sbrs	r25, 7
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <__stack+0x1e7>
    12d4:	90 95       	com	r25
    12d6:	80 95       	com	r24
    12d8:	70 95       	com	r23
    12da:	61 95       	neg	r22
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	f0 68       	ori	r31, 0x80	; 128
    12e4:	3f 2e       	mov	r3, r31
    12e6:	2a e0       	ldi	r18, 0x0A	; 10
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	a3 01       	movw	r20, r6
    12ec:	66 d4       	rcall	.+2252   	; 0x1bba <__ultoa_invert>
    12ee:	88 2e       	mov	r8, r24
    12f0:	86 18       	sub	r8, r6
    12f2:	44 c0       	rjmp	.+136    	; 0x137c <__stack+0x27d>
    12f4:	85 37       	cpi	r24, 0x75	; 117
    12f6:	31 f4       	brne	.+12     	; 0x1304 <__stack+0x205>
    12f8:	23 2d       	mov	r18, r3
    12fa:	2f 7e       	andi	r18, 0xEF	; 239
    12fc:	b2 2e       	mov	r11, r18
    12fe:	2a e0       	ldi	r18, 0x0A	; 10
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	25 c0       	rjmp	.+74     	; 0x134e <__stack+0x24f>
    1304:	93 2d       	mov	r25, r3
    1306:	99 7f       	andi	r25, 0xF9	; 249
    1308:	b9 2e       	mov	r11, r25
    130a:	8f 36       	cpi	r24, 0x6F	; 111
    130c:	c1 f0       	breq	.+48     	; 0x133e <__stack+0x23f>
    130e:	18 f4       	brcc	.+6      	; 0x1316 <__stack+0x217>
    1310:	88 35       	cpi	r24, 0x58	; 88
    1312:	79 f0       	breq	.+30     	; 0x1332 <__stack+0x233>
    1314:	ae c0       	rjmp	.+348    	; 0x1472 <__stack+0x373>
    1316:	80 37       	cpi	r24, 0x70	; 112
    1318:	19 f0       	breq	.+6      	; 0x1320 <__stack+0x221>
    131a:	88 37       	cpi	r24, 0x78	; 120
    131c:	21 f0       	breq	.+8      	; 0x1326 <__stack+0x227>
    131e:	a9 c0       	rjmp	.+338    	; 0x1472 <__stack+0x373>
    1320:	e9 2f       	mov	r30, r25
    1322:	e0 61       	ori	r30, 0x10	; 16
    1324:	be 2e       	mov	r11, r30
    1326:	b4 fe       	sbrs	r11, 4
    1328:	0d c0       	rjmp	.+26     	; 0x1344 <__stack+0x245>
    132a:	fb 2d       	mov	r31, r11
    132c:	f4 60       	ori	r31, 0x04	; 4
    132e:	bf 2e       	mov	r11, r31
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <__stack+0x245>
    1332:	34 fe       	sbrs	r3, 4
    1334:	0a c0       	rjmp	.+20     	; 0x134a <__stack+0x24b>
    1336:	29 2f       	mov	r18, r25
    1338:	26 60       	ori	r18, 0x06	; 6
    133a:	b2 2e       	mov	r11, r18
    133c:	06 c0       	rjmp	.+12     	; 0x134a <__stack+0x24b>
    133e:	28 e0       	ldi	r18, 0x08	; 8
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	05 c0       	rjmp	.+10     	; 0x134e <__stack+0x24f>
    1344:	20 e1       	ldi	r18, 0x10	; 16
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	02 c0       	rjmp	.+4      	; 0x134e <__stack+0x24f>
    134a:	20 e1       	ldi	r18, 0x10	; 16
    134c:	32 e0       	ldi	r19, 0x02	; 2
    134e:	f8 01       	movw	r30, r16
    1350:	b7 fe       	sbrs	r11, 7
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <__stack+0x263>
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	0c 5f       	subi	r16, 0xFC	; 252
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	06 c0       	rjmp	.+12     	; 0x136e <__stack+0x26f>
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 5f       	subi	r16, 0xFE	; 254
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	a3 01       	movw	r20, r6
    1370:	24 d4       	rcall	.+2120   	; 0x1bba <__ultoa_invert>
    1372:	88 2e       	mov	r8, r24
    1374:	86 18       	sub	r8, r6
    1376:	fb 2d       	mov	r31, r11
    1378:	ff 77       	andi	r31, 0x7F	; 127
    137a:	3f 2e       	mov	r3, r31
    137c:	36 fe       	sbrs	r3, 6
    137e:	0d c0       	rjmp	.+26     	; 0x139a <__stack+0x29b>
    1380:	23 2d       	mov	r18, r3
    1382:	2e 7f       	andi	r18, 0xFE	; 254
    1384:	a2 2e       	mov	r10, r18
    1386:	89 14       	cp	r8, r9
    1388:	58 f4       	brcc	.+22     	; 0x13a0 <__stack+0x2a1>
    138a:	34 fe       	sbrs	r3, 4
    138c:	0b c0       	rjmp	.+22     	; 0x13a4 <__stack+0x2a5>
    138e:	32 fc       	sbrc	r3, 2
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <__stack+0x2a5>
    1392:	83 2d       	mov	r24, r3
    1394:	8e 7e       	andi	r24, 0xEE	; 238
    1396:	a8 2e       	mov	r10, r24
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <__stack+0x2a5>
    139a:	b8 2c       	mov	r11, r8
    139c:	a3 2c       	mov	r10, r3
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <__stack+0x2a7>
    13a0:	b8 2c       	mov	r11, r8
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <__stack+0x2a7>
    13a4:	b9 2c       	mov	r11, r9
    13a6:	a4 fe       	sbrs	r10, 4
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <__stack+0x2c9>
    13aa:	fe 01       	movw	r30, r28
    13ac:	e8 0d       	add	r30, r8
    13ae:	f1 1d       	adc	r31, r1
    13b0:	80 81       	ld	r24, Z
    13b2:	80 33       	cpi	r24, 0x30	; 48
    13b4:	21 f4       	brne	.+8      	; 0x13be <__stack+0x2bf>
    13b6:	9a 2d       	mov	r25, r10
    13b8:	99 7e       	andi	r25, 0xE9	; 233
    13ba:	a9 2e       	mov	r10, r25
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <__stack+0x2d1>
    13be:	a2 fe       	sbrs	r10, 2
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <__stack+0x2cf>
    13c2:	b3 94       	inc	r11
    13c4:	b3 94       	inc	r11
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <__stack+0x2d1>
    13c8:	8a 2d       	mov	r24, r10
    13ca:	86 78       	andi	r24, 0x86	; 134
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <__stack+0x2d1>
    13ce:	b3 94       	inc	r11
    13d0:	a3 fc       	sbrc	r10, 3
    13d2:	10 c0       	rjmp	.+32     	; 0x13f4 <__stack+0x2f5>
    13d4:	a0 fe       	sbrs	r10, 0
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <__stack+0x2e5>
    13d8:	b2 14       	cp	r11, r2
    13da:	80 f4       	brcc	.+32     	; 0x13fc <__stack+0x2fd>
    13dc:	28 0c       	add	r2, r8
    13de:	92 2c       	mov	r9, r2
    13e0:	9b 18       	sub	r9, r11
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <__stack+0x2ff>
    13e4:	b2 14       	cp	r11, r2
    13e6:	58 f4       	brcc	.+22     	; 0x13fe <__stack+0x2ff>
    13e8:	b6 01       	movw	r22, r12
    13ea:	80 e2       	ldi	r24, 0x20	; 32
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	90 d3       	rcall	.+1824   	; 0x1b10 <fputc>
    13f0:	b3 94       	inc	r11
    13f2:	f8 cf       	rjmp	.-16     	; 0x13e4 <__stack+0x2e5>
    13f4:	b2 14       	cp	r11, r2
    13f6:	18 f4       	brcc	.+6      	; 0x13fe <__stack+0x2ff>
    13f8:	2b 18       	sub	r2, r11
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <__stack+0x301>
    13fc:	98 2c       	mov	r9, r8
    13fe:	21 2c       	mov	r2, r1
    1400:	a4 fe       	sbrs	r10, 4
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <__stack+0x323>
    1404:	b6 01       	movw	r22, r12
    1406:	80 e3       	ldi	r24, 0x30	; 48
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	82 d3       	rcall	.+1796   	; 0x1b10 <fputc>
    140c:	a2 fe       	sbrs	r10, 2
    140e:	16 c0       	rjmp	.+44     	; 0x143c <__stack+0x33d>
    1410:	a1 fc       	sbrc	r10, 1
    1412:	03 c0       	rjmp	.+6      	; 0x141a <__stack+0x31b>
    1414:	88 e7       	ldi	r24, 0x78	; 120
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <__stack+0x31f>
    141a:	88 e5       	ldi	r24, 0x58	; 88
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	b6 01       	movw	r22, r12
    1420:	0c c0       	rjmp	.+24     	; 0x143a <__stack+0x33b>
    1422:	8a 2d       	mov	r24, r10
    1424:	86 78       	andi	r24, 0x86	; 134
    1426:	51 f0       	breq	.+20     	; 0x143c <__stack+0x33d>
    1428:	a1 fe       	sbrs	r10, 1
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <__stack+0x331>
    142c:	8b e2       	ldi	r24, 0x2B	; 43
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <__stack+0x333>
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	a7 fc       	sbrc	r10, 7
    1434:	8d e2       	ldi	r24, 0x2D	; 45
    1436:	b6 01       	movw	r22, r12
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	6a d3       	rcall	.+1748   	; 0x1b10 <fputc>
    143c:	89 14       	cp	r8, r9
    143e:	30 f4       	brcc	.+12     	; 0x144c <__stack+0x34d>
    1440:	b6 01       	movw	r22, r12
    1442:	80 e3       	ldi	r24, 0x30	; 48
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	64 d3       	rcall	.+1736   	; 0x1b10 <fputc>
    1448:	9a 94       	dec	r9
    144a:	f8 cf       	rjmp	.-16     	; 0x143c <__stack+0x33d>
    144c:	8a 94       	dec	r8
    144e:	f3 01       	movw	r30, r6
    1450:	e8 0d       	add	r30, r8
    1452:	f1 1d       	adc	r31, r1
    1454:	80 81       	ld	r24, Z
    1456:	b6 01       	movw	r22, r12
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	5a d3       	rcall	.+1716   	; 0x1b10 <fputc>
    145c:	81 10       	cpse	r8, r1
    145e:	f6 cf       	rjmp	.-20     	; 0x144c <__stack+0x34d>
    1460:	22 20       	and	r2, r2
    1462:	09 f4       	brne	.+2      	; 0x1466 <__stack+0x367>
    1464:	4e ce       	rjmp	.-868    	; 0x1102 <__stack+0x3>
    1466:	b6 01       	movw	r22, r12
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	51 d3       	rcall	.+1698   	; 0x1b10 <fputc>
    146e:	2a 94       	dec	r2
    1470:	f7 cf       	rjmp	.-18     	; 0x1460 <__stack+0x361>
    1472:	f6 01       	movw	r30, r12
    1474:	86 81       	ldd	r24, Z+6	; 0x06
    1476:	97 81       	ldd	r25, Z+7	; 0x07
    1478:	02 c0       	rjmp	.+4      	; 0x147e <__stack+0x37f>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	2b 96       	adiw	r28, 0x0b	; 11
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	bf 90       	pop	r11
    149c:	af 90       	pop	r10
    149e:	9f 90       	pop	r9
    14a0:	8f 90       	pop	r8
    14a2:	7f 90       	pop	r7
    14a4:	6f 90       	pop	r6
    14a6:	5f 90       	pop	r5
    14a8:	4f 90       	pop	r4
    14aa:	3f 90       	pop	r3
    14ac:	2f 90       	pop	r2
    14ae:	08 95       	ret

000014b0 <putval>:
    14b0:	20 fd       	sbrc	r18, 0
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <putval+0x16>
    14b4:	fc 01       	movw	r30, r24
    14b6:	23 fd       	sbrc	r18, 3
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <putval+0x14>
    14ba:	22 ff       	sbrs	r18, 2
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <putval+0x12>
    14be:	73 83       	std	Z+3, r23	; 0x03
    14c0:	62 83       	std	Z+2, r22	; 0x02
    14c2:	51 83       	std	Z+1, r21	; 0x01
    14c4:	40 83       	st	Z, r20
    14c6:	08 95       	ret

000014c8 <mulacc>:
    14c8:	44 fd       	sbrc	r20, 4
    14ca:	17 c0       	rjmp	.+46     	; 0x14fa <mulacc+0x32>
    14cc:	46 fd       	sbrc	r20, 6
    14ce:	17 c0       	rjmp	.+46     	; 0x14fe <mulacc+0x36>
    14d0:	ab 01       	movw	r20, r22
    14d2:	bc 01       	movw	r22, r24
    14d4:	da 01       	movw	r26, r20
    14d6:	fb 01       	movw	r30, r22
    14d8:	aa 0f       	add	r26, r26
    14da:	bb 1f       	adc	r27, r27
    14dc:	ee 1f       	adc	r30, r30
    14de:	ff 1f       	adc	r31, r31
    14e0:	10 94       	com	r1
    14e2:	d1 f7       	brne	.-12     	; 0x14d8 <mulacc+0x10>
    14e4:	4a 0f       	add	r20, r26
    14e6:	5b 1f       	adc	r21, r27
    14e8:	6e 1f       	adc	r22, r30
    14ea:	7f 1f       	adc	r23, r31
    14ec:	cb 01       	movw	r24, r22
    14ee:	ba 01       	movw	r22, r20
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <mulacc+0x44>
    14fa:	33 e0       	ldi	r19, 0x03	; 3
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <mulacc+0x38>
    14fe:	34 e0       	ldi	r19, 0x04	; 4
    1500:	66 0f       	add	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	88 1f       	adc	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	31 50       	subi	r19, 0x01	; 1
    150a:	d1 f7       	brne	.-12     	; 0x1500 <mulacc+0x38>
    150c:	62 0f       	add	r22, r18
    150e:	71 1d       	adc	r23, r1
    1510:	81 1d       	adc	r24, r1
    1512:	91 1d       	adc	r25, r1
    1514:	08 95       	ret

00001516 <skip_spaces>:
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	8c 01       	movw	r16, r24
    1520:	c8 01       	movw	r24, r16
    1522:	b8 d2       	rcall	.+1392   	; 0x1a94 <fgetc>
    1524:	ec 01       	movw	r28, r24
    1526:	97 fd       	sbrc	r25, 7
    1528:	06 c0       	rjmp	.+12     	; 0x1536 <skip_spaces+0x20>
    152a:	8b d2       	rcall	.+1302   	; 0x1a42 <isspace>
    152c:	89 2b       	or	r24, r25
    152e:	c1 f7       	brne	.-16     	; 0x1520 <skip_spaces+0xa>
    1530:	b8 01       	movw	r22, r16
    1532:	ce 01       	movw	r24, r28
    1534:	29 d3       	rcall	.+1618   	; 0x1b88 <ungetc>
    1536:	ce 01       	movw	r24, r28
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <conv_int>:
    1542:	8f 92       	push	r8
    1544:	9f 92       	push	r9
    1546:	af 92       	push	r10
    1548:	bf 92       	push	r11
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	8c 01       	movw	r16, r24
    1558:	d6 2f       	mov	r29, r22
    155a:	7a 01       	movw	r14, r20
    155c:	b2 2e       	mov	r11, r18
    155e:	9a d2       	rcall	.+1332   	; 0x1a94 <fgetc>
    1560:	9c 01       	movw	r18, r24
    1562:	33 27       	eor	r19, r19
    1564:	2b 32       	cpi	r18, 0x2B	; 43
    1566:	31 05       	cpc	r19, r1
    1568:	31 f0       	breq	.+12     	; 0x1576 <conv_int+0x34>
    156a:	2d 32       	cpi	r18, 0x2D	; 45
    156c:	31 05       	cpc	r19, r1
    156e:	59 f4       	brne	.+22     	; 0x1586 <conv_int+0x44>
    1570:	8b 2d       	mov	r24, r11
    1572:	80 68       	ori	r24, 0x80	; 128
    1574:	b8 2e       	mov	r11, r24
    1576:	d1 50       	subi	r29, 0x01	; 1
    1578:	11 f4       	brne	.+4      	; 0x157e <conv_int+0x3c>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	61 c0       	rjmp	.+194    	; 0x1640 <conv_int+0xfe>
    157e:	c8 01       	movw	r24, r16
    1580:	89 d2       	rcall	.+1298   	; 0x1a94 <fgetc>
    1582:	97 fd       	sbrc	r25, 7
    1584:	fa cf       	rjmp	.-12     	; 0x157a <conv_int+0x38>
    1586:	cb 2d       	mov	r28, r11
    1588:	cd 7f       	andi	r28, 0xFD	; 253
    158a:	2b 2d       	mov	r18, r11
    158c:	20 73       	andi	r18, 0x30	; 48
    158e:	f9 f4       	brne	.+62     	; 0x15ce <conv_int+0x8c>
    1590:	80 33       	cpi	r24, 0x30	; 48
    1592:	e9 f4       	brne	.+58     	; 0x15ce <conv_int+0x8c>
    1594:	aa 24       	eor	r10, r10
    1596:	aa 94       	dec	r10
    1598:	ad 0e       	add	r10, r29
    159a:	09 f4       	brne	.+2      	; 0x159e <conv_int+0x5c>
    159c:	3e c0       	rjmp	.+124    	; 0x161a <conv_int+0xd8>
    159e:	c8 01       	movw	r24, r16
    15a0:	79 d2       	rcall	.+1266   	; 0x1a94 <fgetc>
    15a2:	97 fd       	sbrc	r25, 7
    15a4:	3a c0       	rjmp	.+116    	; 0x161a <conv_int+0xd8>
    15a6:	9c 01       	movw	r18, r24
    15a8:	2f 7d       	andi	r18, 0xDF	; 223
    15aa:	33 27       	eor	r19, r19
    15ac:	28 35       	cpi	r18, 0x58	; 88
    15ae:	31 05       	cpc	r19, r1
    15b0:	41 f4       	brne	.+16     	; 0x15c2 <conv_int+0x80>
    15b2:	c2 64       	ori	r28, 0x42	; 66
    15b4:	d2 50       	subi	r29, 0x02	; 2
    15b6:	89 f1       	breq	.+98     	; 0x161a <conv_int+0xd8>
    15b8:	c8 01       	movw	r24, r16
    15ba:	6c d2       	rcall	.+1240   	; 0x1a94 <fgetc>
    15bc:	97 ff       	sbrs	r25, 7
    15be:	07 c0       	rjmp	.+14     	; 0x15ce <conv_int+0x8c>
    15c0:	2c c0       	rjmp	.+88     	; 0x161a <conv_int+0xd8>
    15c2:	b6 fe       	sbrs	r11, 6
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <conv_int+0x88>
    15c6:	c2 60       	ori	r28, 0x02	; 2
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <conv_int+0x8a>
    15ca:	c2 61       	ori	r28, 0x12	; 18
    15cc:	da 2d       	mov	r29, r10
    15ce:	81 2c       	mov	r8, r1
    15d0:	91 2c       	mov	r9, r1
    15d2:	54 01       	movw	r10, r8
    15d4:	20 ed       	ldi	r18, 0xD0	; 208
    15d6:	28 0f       	add	r18, r24
    15d8:	28 30       	cpi	r18, 0x08	; 8
    15da:	78 f0       	brcs	.+30     	; 0x15fa <conv_int+0xb8>
    15dc:	c4 ff       	sbrs	r28, 4
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <conv_int+0xa4>
    15e0:	b8 01       	movw	r22, r16
    15e2:	d2 d2       	rcall	.+1444   	; 0x1b88 <ungetc>
    15e4:	17 c0       	rjmp	.+46     	; 0x1614 <conv_int+0xd2>
    15e6:	2a 30       	cpi	r18, 0x0A	; 10
    15e8:	40 f0       	brcs	.+16     	; 0x15fa <conv_int+0xb8>
    15ea:	c6 ff       	sbrs	r28, 6
    15ec:	f9 cf       	rjmp	.-14     	; 0x15e0 <conv_int+0x9e>
    15ee:	2f 7d       	andi	r18, 0xDF	; 223
    15f0:	3f ee       	ldi	r19, 0xEF	; 239
    15f2:	32 0f       	add	r19, r18
    15f4:	36 30       	cpi	r19, 0x06	; 6
    15f6:	a0 f7       	brcc	.-24     	; 0x15e0 <conv_int+0x9e>
    15f8:	27 50       	subi	r18, 0x07	; 7
    15fa:	4c 2f       	mov	r20, r28
    15fc:	c5 01       	movw	r24, r10
    15fe:	b4 01       	movw	r22, r8
    1600:	63 df       	rcall	.-314    	; 0x14c8 <mulacc>
    1602:	4b 01       	movw	r8, r22
    1604:	5c 01       	movw	r10, r24
    1606:	c2 60       	ori	r28, 0x02	; 2
    1608:	d1 50       	subi	r29, 0x01	; 1
    160a:	51 f0       	breq	.+20     	; 0x1620 <conv_int+0xde>
    160c:	c8 01       	movw	r24, r16
    160e:	42 d2       	rcall	.+1156   	; 0x1a94 <fgetc>
    1610:	97 ff       	sbrs	r25, 7
    1612:	e0 cf       	rjmp	.-64     	; 0x15d4 <conv_int+0x92>
    1614:	c1 fd       	sbrc	r28, 1
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <conv_int+0xde>
    1618:	b0 cf       	rjmp	.-160    	; 0x157a <conv_int+0x38>
    161a:	81 2c       	mov	r8, r1
    161c:	91 2c       	mov	r9, r1
    161e:	54 01       	movw	r10, r8
    1620:	c7 ff       	sbrs	r28, 7
    1622:	08 c0       	rjmp	.+16     	; 0x1634 <conv_int+0xf2>
    1624:	b0 94       	com	r11
    1626:	a0 94       	com	r10
    1628:	90 94       	com	r9
    162a:	80 94       	com	r8
    162c:	81 1c       	adc	r8, r1
    162e:	91 1c       	adc	r9, r1
    1630:	a1 1c       	adc	r10, r1
    1632:	b1 1c       	adc	r11, r1
    1634:	2c 2f       	mov	r18, r28
    1636:	b5 01       	movw	r22, r10
    1638:	a4 01       	movw	r20, r8
    163a:	c7 01       	movw	r24, r14
    163c:	39 df       	rcall	.-398    	; 0x14b0 <putval>
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	9f 90       	pop	r9
    1652:	8f 90       	pop	r8
    1654:	08 95       	ret

00001656 <conv_brk>:
    1656:	5f 92       	push	r5
    1658:	6f 92       	push	r6
    165a:	7f 92       	push	r7
    165c:	8f 92       	push	r8
    165e:	9f 92       	push	r9
    1660:	af 92       	push	r10
    1662:	bf 92       	push	r11
    1664:	cf 92       	push	r12
    1666:	df 92       	push	r13
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	a0 97       	sbiw	r28, 0x20	; 32
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	5c 01       	movw	r10, r24
    1686:	96 2e       	mov	r9, r22
    1688:	7a 01       	movw	r14, r20
    168a:	f9 01       	movw	r30, r18
    168c:	8e 01       	movw	r16, r28
    168e:	0f 5f       	subi	r16, 0xFF	; 255
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	68 01       	movw	r12, r16
    1694:	80 e2       	ldi	r24, 0x20	; 32
    1696:	d8 01       	movw	r26, r16
    1698:	1d 92       	st	X+, r1
    169a:	8a 95       	dec	r24
    169c:	e9 f7       	brne	.-6      	; 0x1698 <conv_brk+0x42>
    169e:	d5 01       	movw	r26, r10
    16a0:	13 96       	adiw	r26, 0x03	; 3
    16a2:	8c 90       	ld	r8, X
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	61 2c       	mov	r6, r1
    16aa:	71 2c       	mov	r7, r1
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	83 fc       	sbrc	r8, 3
    16b4:	25 91       	lpm	r18, Z+
    16b6:	83 fe       	sbrs	r8, 3
    16b8:	21 91       	ld	r18, Z+
    16ba:	8f 01       	movw	r16, r30
    16bc:	52 2e       	mov	r5, r18
    16be:	21 11       	cpse	r18, r1
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <conv_brk+0x72>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	90 c0       	rjmp	.+288    	; 0x17e8 <conv_brk+0x192>
    16c8:	2e 35       	cpi	r18, 0x5E	; 94
    16ca:	11 f4       	brne	.+4      	; 0x16d0 <conv_brk+0x7a>
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	51 f1       	breq	.+84     	; 0x1724 <conv_brk+0xce>
    16d0:	43 2f       	mov	r20, r19
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	48 17       	cp	r20, r24
    16d6:	59 07       	cpc	r21, r25
    16d8:	3c f4       	brge	.+14     	; 0x16e8 <conv_brk+0x92>
    16da:	2d 35       	cpi	r18, 0x5D	; 93
    16dc:	59 f1       	breq	.+86     	; 0x1734 <conv_brk+0xde>
    16de:	2d 32       	cpi	r18, 0x2D	; 45
    16e0:	19 f4       	brne	.+6      	; 0x16e8 <conv_brk+0x92>
    16e2:	77 20       	and	r7, r7
    16e4:	09 f1       	breq	.+66     	; 0x1728 <conv_brk+0xd2>
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <conv_brk+0x98>
    16e8:	77 20       	and	r7, r7
    16ea:	09 f4       	brne	.+2      	; 0x16ee <conv_brk+0x98>
    16ec:	68 c0       	rjmp	.+208    	; 0x17be <conv_brk+0x168>
    16ee:	45 2d       	mov	r20, r5
    16f0:	46 95       	lsr	r20
    16f2:	46 95       	lsr	r20
    16f4:	46 95       	lsr	r20
    16f6:	d6 01       	movw	r26, r12
    16f8:	a4 0f       	add	r26, r20
    16fa:	b1 1d       	adc	r27, r1
    16fc:	45 2d       	mov	r20, r5
    16fe:	47 70       	andi	r20, 0x07	; 7
    1700:	8b 01       	movw	r16, r22
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <conv_brk+0xb2>
    1704:	00 0f       	add	r16, r16
    1706:	11 1f       	adc	r17, r17
    1708:	4a 95       	dec	r20
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <conv_brk+0xae>
    170c:	a8 01       	movw	r20, r16
    170e:	5c 91       	ld	r21, X
    1710:	45 2b       	or	r20, r21
    1712:	4c 93       	st	X, r20
    1714:	65 14       	cp	r6, r5
    1716:	59 f0       	breq	.+22     	; 0x172e <conv_brk+0xd8>
    1718:	56 14       	cp	r5, r6
    171a:	10 f4       	brcc	.+4      	; 0x1720 <conv_brk+0xca>
    171c:	53 94       	inc	r5
    171e:	e7 cf       	rjmp	.-50     	; 0x16ee <conv_brk+0x98>
    1720:	5a 94       	dec	r5
    1722:	e5 cf       	rjmp	.-54     	; 0x16ee <conv_brk+0x98>
    1724:	31 e0       	ldi	r19, 0x01	; 1
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <conv_brk+0xda>
    1728:	77 24       	eor	r7, r7
    172a:	73 94       	inc	r7
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <conv_brk+0xda>
    172e:	71 2c       	mov	r7, r1
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	bf cf       	rjmp	.-130    	; 0x16b2 <conv_brk+0x5c>
    1734:	77 20       	and	r7, r7
    1736:	19 f0       	breq	.+6      	; 0x173e <conv_brk+0xe8>
    1738:	8e 81       	ldd	r24, Y+6	; 0x06
    173a:	80 62       	ori	r24, 0x20	; 32
    173c:	8e 83       	std	Y+6, r24	; 0x06
    173e:	31 11       	cpse	r19, r1
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <conv_brk+0xf2>
    1742:	88 24       	eor	r8, r8
    1744:	83 94       	inc	r8
    1746:	17 c0       	rjmp	.+46     	; 0x1776 <conv_brk+0x120>
    1748:	f6 01       	movw	r30, r12
    174a:	9e 01       	movw	r18, r28
    174c:	2f 5d       	subi	r18, 0xDF	; 223
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	80 81       	ld	r24, Z
    1752:	80 95       	com	r24
    1754:	81 93       	st	Z+, r24
    1756:	2e 17       	cp	r18, r30
    1758:	3f 07       	cpc	r19, r31
    175a:	d1 f7       	brne	.-12     	; 0x1750 <conv_brk+0xfa>
    175c:	f2 cf       	rjmp	.-28     	; 0x1742 <conv_brk+0xec>
    175e:	e1 14       	cp	r14, r1
    1760:	f1 04       	cpc	r15, r1
    1762:	29 f0       	breq	.+10     	; 0x176e <conv_brk+0x118>
    1764:	d7 01       	movw	r26, r14
    1766:	8c 93       	st	X, r24
    1768:	f7 01       	movw	r30, r14
    176a:	31 96       	adiw	r30, 0x01	; 1
    176c:	7f 01       	movw	r14, r30
    176e:	9a 94       	dec	r9
    1770:	81 2c       	mov	r8, r1
    1772:	99 20       	and	r9, r9
    1774:	e9 f0       	breq	.+58     	; 0x17b0 <conv_brk+0x15a>
    1776:	c5 01       	movw	r24, r10
    1778:	8d d1       	rcall	.+794    	; 0x1a94 <fgetc>
    177a:	97 fd       	sbrc	r25, 7
    177c:	17 c0       	rjmp	.+46     	; 0x17ac <conv_brk+0x156>
    177e:	fc 01       	movw	r30, r24
    1780:	ff 27       	eor	r31, r31
    1782:	23 e0       	ldi	r18, 0x03	; 3
    1784:	f5 95       	asr	r31
    1786:	e7 95       	ror	r30
    1788:	2a 95       	dec	r18
    178a:	e1 f7       	brne	.-8      	; 0x1784 <conv_brk+0x12e>
    178c:	ec 0d       	add	r30, r12
    178e:	fd 1d       	adc	r31, r13
    1790:	20 81       	ld	r18, Z
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	ac 01       	movw	r20, r24
    1796:	47 70       	andi	r20, 0x07	; 7
    1798:	55 27       	eor	r21, r21
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <conv_brk+0x14a>
    179c:	35 95       	asr	r19
    179e:	27 95       	ror	r18
    17a0:	4a 95       	dec	r20
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <conv_brk+0x146>
    17a4:	20 fd       	sbrc	r18, 0
    17a6:	db cf       	rjmp	.-74     	; 0x175e <conv_brk+0x108>
    17a8:	b5 01       	movw	r22, r10
    17aa:	ee d1       	rcall	.+988    	; 0x1b88 <ungetc>
    17ac:	81 10       	cpse	r8, r1
    17ae:	89 cf       	rjmp	.-238    	; 0x16c2 <conv_brk+0x6c>
    17b0:	e1 14       	cp	r14, r1
    17b2:	f1 04       	cpc	r15, r1
    17b4:	11 f0       	breq	.+4      	; 0x17ba <conv_brk+0x164>
    17b6:	d7 01       	movw	r26, r14
    17b8:	1c 92       	st	X, r1
    17ba:	c8 01       	movw	r24, r16
    17bc:	15 c0       	rjmp	.+42     	; 0x17e8 <conv_brk+0x192>
    17be:	42 2f       	mov	r20, r18
    17c0:	46 95       	lsr	r20
    17c2:	46 95       	lsr	r20
    17c4:	46 95       	lsr	r20
    17c6:	d6 01       	movw	r26, r12
    17c8:	a4 0f       	add	r26, r20
    17ca:	b1 1d       	adc	r27, r1
    17cc:	42 2f       	mov	r20, r18
    17ce:	47 70       	andi	r20, 0x07	; 7
    17d0:	8b 01       	movw	r16, r22
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <conv_brk+0x182>
    17d4:	00 0f       	add	r16, r16
    17d6:	11 1f       	adc	r17, r17
    17d8:	4a 95       	dec	r20
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <conv_brk+0x17e>
    17dc:	a8 01       	movw	r20, r16
    17de:	5c 91       	ld	r21, X
    17e0:	45 2b       	or	r20, r21
    17e2:	4c 93       	st	X, r20
    17e4:	62 2e       	mov	r6, r18
    17e6:	a4 cf       	rjmp	.-184    	; 0x1730 <conv_brk+0xda>
    17e8:	a0 96       	adiw	r28, 0x20	; 32
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	cf 90       	pop	r12
    1804:	bf 90       	pop	r11
    1806:	af 90       	pop	r10
    1808:	9f 90       	pop	r9
    180a:	8f 90       	pop	r8
    180c:	7f 90       	pop	r7
    180e:	6f 90       	pop	r6
    1810:	5f 90       	pop	r5
    1812:	08 95       	ret

00001814 <vfscanf>:
    1814:	5f 92       	push	r5
    1816:	6f 92       	push	r6
    1818:	7f 92       	push	r7
    181a:	8f 92       	push	r8
    181c:	9f 92       	push	r9
    181e:	af 92       	push	r10
    1820:	bf 92       	push	r11
    1822:	cf 92       	push	r12
    1824:	df 92       	push	r13
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	6c 01       	movw	r12, r24
    1834:	eb 01       	movw	r28, r22
    1836:	5a 01       	movw	r10, r20
    1838:	fc 01       	movw	r30, r24
    183a:	17 82       	std	Z+7, r1	; 0x07
    183c:	16 82       	std	Z+6, r1	; 0x06
    183e:	51 2c       	mov	r5, r1
    1840:	f6 01       	movw	r30, r12
    1842:	e3 80       	ldd	r14, Z+3	; 0x03
    1844:	fe 01       	movw	r30, r28
    1846:	e3 fc       	sbrc	r14, 3
    1848:	85 91       	lpm	r24, Z+
    184a:	e3 fe       	sbrs	r14, 3
    184c:	81 91       	ld	r24, Z+
    184e:	18 2f       	mov	r17, r24
    1850:	ef 01       	movw	r28, r30
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <vfscanf+0x44>
    1856:	e0 c0       	rjmp	.+448    	; 0x1a18 <vfscanf+0x204>
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	f3 d0       	rcall	.+486    	; 0x1a42 <isspace>
    185c:	89 2b       	or	r24, r25
    185e:	19 f0       	breq	.+6      	; 0x1866 <vfscanf+0x52>
    1860:	c6 01       	movw	r24, r12
    1862:	59 de       	rcall	.-846    	; 0x1516 <skip_spaces>
    1864:	ed cf       	rjmp	.-38     	; 0x1840 <vfscanf+0x2c>
    1866:	15 32       	cpi	r17, 0x25	; 37
    1868:	41 f4       	brne	.+16     	; 0x187a <vfscanf+0x66>
    186a:	fe 01       	movw	r30, r28
    186c:	e3 fc       	sbrc	r14, 3
    186e:	15 91       	lpm	r17, Z+
    1870:	e3 fe       	sbrs	r14, 3
    1872:	11 91       	ld	r17, Z+
    1874:	ef 01       	movw	r28, r30
    1876:	15 32       	cpi	r17, 0x25	; 37
    1878:	71 f4       	brne	.+28     	; 0x1896 <vfscanf+0x82>
    187a:	c6 01       	movw	r24, r12
    187c:	0b d1       	rcall	.+534    	; 0x1a94 <fgetc>
    187e:	97 fd       	sbrc	r25, 7
    1880:	c9 c0       	rjmp	.+402    	; 0x1a14 <vfscanf+0x200>
    1882:	41 2f       	mov	r20, r17
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	9c 01       	movw	r18, r24
    1888:	33 27       	eor	r19, r19
    188a:	24 17       	cp	r18, r20
    188c:	35 07       	cpc	r19, r21
    188e:	c1 f2       	breq	.-80     	; 0x1840 <vfscanf+0x2c>
    1890:	b6 01       	movw	r22, r12
    1892:	7a d1       	rcall	.+756    	; 0x1b88 <ungetc>
    1894:	c1 c0       	rjmp	.+386    	; 0x1a18 <vfscanf+0x204>
    1896:	1a 32       	cpi	r17, 0x2A	; 42
    1898:	39 f4       	brne	.+14     	; 0x18a8 <vfscanf+0x94>
    189a:	e3 fc       	sbrc	r14, 3
    189c:	15 91       	lpm	r17, Z+
    189e:	e3 fe       	sbrs	r14, 3
    18a0:	11 91       	ld	r17, Z+
    18a2:	ef 01       	movw	r28, r30
    18a4:	01 e0       	ldi	r16, 0x01	; 1
    18a6:	01 c0       	rjmp	.+2      	; 0x18aa <vfscanf+0x96>
    18a8:	00 e0       	ldi	r16, 0x00	; 0
    18aa:	f1 2c       	mov	r15, r1
    18ac:	20 ed       	ldi	r18, 0xD0	; 208
    18ae:	21 0f       	add	r18, r17
    18b0:	2a 30       	cpi	r18, 0x0A	; 10
    18b2:	78 f4       	brcc	.+30     	; 0x18d2 <vfscanf+0xbe>
    18b4:	02 60       	ori	r16, 0x02	; 2
    18b6:	6f 2d       	mov	r22, r15
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	03 de       	rcall	.-1018   	; 0x14c8 <mulacc>
    18c2:	f6 2e       	mov	r15, r22
    18c4:	fe 01       	movw	r30, r28
    18c6:	e3 fc       	sbrc	r14, 3
    18c8:	15 91       	lpm	r17, Z+
    18ca:	e3 fe       	sbrs	r14, 3
    18cc:	11 91       	ld	r17, Z+
    18ce:	ef 01       	movw	r28, r30
    18d0:	ed cf       	rjmp	.-38     	; 0x18ac <vfscanf+0x98>
    18d2:	01 ff       	sbrs	r16, 1
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <vfscanf+0xc8>
    18d6:	f1 10       	cpse	r15, r1
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <vfscanf+0xcc>
    18da:	9e c0       	rjmp	.+316    	; 0x1a18 <vfscanf+0x204>
    18dc:	ff 24       	eor	r15, r15
    18de:	fa 94       	dec	r15
    18e0:	18 36       	cpi	r17, 0x68	; 104
    18e2:	19 f0       	breq	.+6      	; 0x18ea <vfscanf+0xd6>
    18e4:	1c 36       	cpi	r17, 0x6C	; 108
    18e6:	51 f0       	breq	.+20     	; 0x18fc <vfscanf+0xe8>
    18e8:	10 c0       	rjmp	.+32     	; 0x190a <vfscanf+0xf6>
    18ea:	fe 01       	movw	r30, r28
    18ec:	e3 fc       	sbrc	r14, 3
    18ee:	15 91       	lpm	r17, Z+
    18f0:	e3 fe       	sbrs	r14, 3
    18f2:	11 91       	ld	r17, Z+
    18f4:	ef 01       	movw	r28, r30
    18f6:	18 36       	cpi	r17, 0x68	; 104
    18f8:	41 f4       	brne	.+16     	; 0x190a <vfscanf+0xf6>
    18fa:	08 60       	ori	r16, 0x08	; 8
    18fc:	04 60       	ori	r16, 0x04	; 4
    18fe:	fe 01       	movw	r30, r28
    1900:	e3 fc       	sbrc	r14, 3
    1902:	15 91       	lpm	r17, Z+
    1904:	e3 fe       	sbrs	r14, 3
    1906:	11 91       	ld	r17, Z+
    1908:	ef 01       	movw	r28, r30
    190a:	11 23       	and	r17, r17
    190c:	09 f4       	brne	.+2      	; 0x1910 <vfscanf+0xfc>
    190e:	84 c0       	rjmp	.+264    	; 0x1a18 <vfscanf+0x204>
    1910:	61 2f       	mov	r22, r17
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	8c e8       	ldi	r24, 0x8C	; 140
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9c d0       	rcall	.+312    	; 0x1a52 <strchr_P>
    191a:	89 2b       	or	r24, r25
    191c:	09 f4       	brne	.+2      	; 0x1920 <vfscanf+0x10c>
    191e:	7c c0       	rjmp	.+248    	; 0x1a18 <vfscanf+0x204>
    1920:	00 fd       	sbrc	r16, 0
    1922:	07 c0       	rjmp	.+14     	; 0x1932 <vfscanf+0x11e>
    1924:	f5 01       	movw	r30, r10
    1926:	80 80       	ld	r8, Z
    1928:	91 80       	ldd	r9, Z+1	; 0x01
    192a:	c5 01       	movw	r24, r10
    192c:	02 96       	adiw	r24, 0x02	; 2
    192e:	5c 01       	movw	r10, r24
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <vfscanf+0x122>
    1932:	81 2c       	mov	r8, r1
    1934:	91 2c       	mov	r9, r1
    1936:	1e 36       	cpi	r17, 0x6E	; 110
    1938:	49 f4       	brne	.+18     	; 0x194c <vfscanf+0x138>
    193a:	f6 01       	movw	r30, r12
    193c:	46 81       	ldd	r20, Z+6	; 0x06
    193e:	57 81       	ldd	r21, Z+7	; 0x07
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	20 2f       	mov	r18, r16
    1946:	c4 01       	movw	r24, r8
    1948:	b3 dd       	rcall	.-1178   	; 0x14b0 <putval>
    194a:	7a cf       	rjmp	.-268    	; 0x1840 <vfscanf+0x2c>
    194c:	13 36       	cpi	r17, 0x63	; 99
    194e:	a1 f4       	brne	.+40     	; 0x1978 <vfscanf+0x164>
    1950:	01 fd       	sbrc	r16, 1
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <vfscanf+0x144>
    1954:	ff 24       	eor	r15, r15
    1956:	f3 94       	inc	r15
    1958:	c6 01       	movw	r24, r12
    195a:	9c d0       	rcall	.+312    	; 0x1a94 <fgetc>
    195c:	97 fd       	sbrc	r25, 7
    195e:	5a c0       	rjmp	.+180    	; 0x1a14 <vfscanf+0x200>
    1960:	81 14       	cp	r8, r1
    1962:	91 04       	cpc	r9, r1
    1964:	29 f0       	breq	.+10     	; 0x1970 <vfscanf+0x15c>
    1966:	f4 01       	movw	r30, r8
    1968:	80 83       	st	Z, r24
    196a:	c4 01       	movw	r24, r8
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	4c 01       	movw	r8, r24
    1970:	fa 94       	dec	r15
    1972:	f1 10       	cpse	r15, r1
    1974:	f1 cf       	rjmp	.-30     	; 0x1958 <vfscanf+0x144>
    1976:	4a c0       	rjmp	.+148    	; 0x1a0c <vfscanf+0x1f8>
    1978:	1b 35       	cpi	r17, 0x5B	; 91
    197a:	51 f4       	brne	.+20     	; 0x1990 <vfscanf+0x17c>
    197c:	9e 01       	movw	r18, r28
    197e:	a4 01       	movw	r20, r8
    1980:	6f 2d       	mov	r22, r15
    1982:	c6 01       	movw	r24, r12
    1984:	68 de       	rcall	.-816    	; 0x1656 <conv_brk>
    1986:	ec 01       	movw	r28, r24
    1988:	89 2b       	or	r24, r25
    198a:	09 f0       	breq	.+2      	; 0x198e <vfscanf+0x17a>
    198c:	3f c0       	rjmp	.+126    	; 0x1a0c <vfscanf+0x1f8>
    198e:	39 c0       	rjmp	.+114    	; 0x1a02 <vfscanf+0x1ee>
    1990:	c6 01       	movw	r24, r12
    1992:	c1 dd       	rcall	.-1150   	; 0x1516 <skip_spaces>
    1994:	97 fd       	sbrc	r25, 7
    1996:	3e c0       	rjmp	.+124    	; 0x1a14 <vfscanf+0x200>
    1998:	1f 36       	cpi	r17, 0x6F	; 111
    199a:	49 f1       	breq	.+82     	; 0x19ee <vfscanf+0x1da>
    199c:	28 f4       	brcc	.+10     	; 0x19a8 <vfscanf+0x194>
    199e:	14 36       	cpi	r17, 0x64	; 100
    19a0:	21 f1       	breq	.+72     	; 0x19ea <vfscanf+0x1d6>
    19a2:	19 36       	cpi	r17, 0x69	; 105
    19a4:	39 f1       	breq	.+78     	; 0x19f4 <vfscanf+0x1e0>
    19a6:	25 c0       	rjmp	.+74     	; 0x19f2 <vfscanf+0x1de>
    19a8:	13 37       	cpi	r17, 0x73	; 115
    19aa:	71 f0       	breq	.+28     	; 0x19c8 <vfscanf+0x1b4>
    19ac:	15 37       	cpi	r17, 0x75	; 117
    19ae:	e9 f0       	breq	.+58     	; 0x19ea <vfscanf+0x1d6>
    19b0:	20 c0       	rjmp	.+64     	; 0x19f2 <vfscanf+0x1de>
    19b2:	81 14       	cp	r8, r1
    19b4:	91 04       	cpc	r9, r1
    19b6:	29 f0       	breq	.+10     	; 0x19c2 <vfscanf+0x1ae>
    19b8:	f4 01       	movw	r30, r8
    19ba:	60 82       	st	Z, r6
    19bc:	c4 01       	movw	r24, r8
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	4c 01       	movw	r8, r24
    19c2:	fa 94       	dec	r15
    19c4:	ff 20       	and	r15, r15
    19c6:	59 f0       	breq	.+22     	; 0x19de <vfscanf+0x1ca>
    19c8:	c6 01       	movw	r24, r12
    19ca:	64 d0       	rcall	.+200    	; 0x1a94 <fgetc>
    19cc:	3c 01       	movw	r6, r24
    19ce:	97 fd       	sbrc	r25, 7
    19d0:	06 c0       	rjmp	.+12     	; 0x19de <vfscanf+0x1ca>
    19d2:	37 d0       	rcall	.+110    	; 0x1a42 <isspace>
    19d4:	89 2b       	or	r24, r25
    19d6:	69 f3       	breq	.-38     	; 0x19b2 <vfscanf+0x19e>
    19d8:	b6 01       	movw	r22, r12
    19da:	c3 01       	movw	r24, r6
    19dc:	d5 d0       	rcall	.+426    	; 0x1b88 <ungetc>
    19de:	81 14       	cp	r8, r1
    19e0:	91 04       	cpc	r9, r1
    19e2:	a1 f0       	breq	.+40     	; 0x1a0c <vfscanf+0x1f8>
    19e4:	f4 01       	movw	r30, r8
    19e6:	10 82       	st	Z, r1
    19e8:	11 c0       	rjmp	.+34     	; 0x1a0c <vfscanf+0x1f8>
    19ea:	00 62       	ori	r16, 0x20	; 32
    19ec:	03 c0       	rjmp	.+6      	; 0x19f4 <vfscanf+0x1e0>
    19ee:	00 61       	ori	r16, 0x10	; 16
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <vfscanf+0x1e0>
    19f2:	00 64       	ori	r16, 0x40	; 64
    19f4:	20 2f       	mov	r18, r16
    19f6:	a4 01       	movw	r20, r8
    19f8:	6f 2d       	mov	r22, r15
    19fa:	c6 01       	movw	r24, r12
    19fc:	a2 dd       	rcall	.-1212   	; 0x1542 <conv_int>
    19fe:	81 11       	cpse	r24, r1
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <vfscanf+0x1f8>
    1a02:	f6 01       	movw	r30, r12
    1a04:	83 81       	ldd	r24, Z+3	; 0x03
    1a06:	80 73       	andi	r24, 0x30	; 48
    1a08:	29 f4       	brne	.+10     	; 0x1a14 <vfscanf+0x200>
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <vfscanf+0x204>
    1a0c:	00 fd       	sbrc	r16, 0
    1a0e:	18 cf       	rjmp	.-464    	; 0x1840 <vfscanf+0x2c>
    1a10:	53 94       	inc	r5
    1a12:	16 cf       	rjmp	.-468    	; 0x1840 <vfscanf+0x2c>
    1a14:	55 20       	and	r5, r5
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <vfscanf+0x20a>
    1a18:	85 2d       	mov	r24, r5
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <vfscanf+0x20e>
    1a1e:	8f ef       	ldi	r24, 0xFF	; 255
    1a20:	9f ef       	ldi	r25, 0xFF	; 255
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	bf 90       	pop	r11
    1a34:	af 90       	pop	r10
    1a36:	9f 90       	pop	r9
    1a38:	8f 90       	pop	r8
    1a3a:	7f 90       	pop	r7
    1a3c:	6f 90       	pop	r6
    1a3e:	5f 90       	pop	r5
    1a40:	08 95       	ret

00001a42 <isspace>:
    1a42:	91 11       	cpse	r25, r1
    1a44:	18 c1       	rjmp	.+560    	; 0x1c76 <__ctype_isfalse>
    1a46:	80 32       	cpi	r24, 0x20	; 32
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <isspace+0xe>
    1a4a:	89 50       	subi	r24, 0x09	; 9
    1a4c:	85 50       	subi	r24, 0x05	; 5
    1a4e:	d0 f7       	brcc	.-12     	; 0x1a44 <isspace+0x2>
    1a50:	08 95       	ret

00001a52 <strchr_P>:
    1a52:	fc 01       	movw	r30, r24
    1a54:	05 90       	lpm	r0, Z+
    1a56:	06 16       	cp	r0, r22
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <strchr_P+0x10>
    1a5a:	00 20       	and	r0, r0
    1a5c:	d9 f7       	brne	.-10     	; 0x1a54 <strchr_P+0x2>
    1a5e:	c0 01       	movw	r24, r0
    1a60:	08 95       	ret
    1a62:	31 97       	sbiw	r30, 0x01	; 1
    1a64:	cf 01       	movw	r24, r30
    1a66:	08 95       	ret

00001a68 <strnlen_P>:
    1a68:	fc 01       	movw	r30, r24
    1a6a:	05 90       	lpm	r0, Z+
    1a6c:	61 50       	subi	r22, 0x01	; 1
    1a6e:	70 40       	sbci	r23, 0x00	; 0
    1a70:	01 10       	cpse	r0, r1
    1a72:	d8 f7       	brcc	.-10     	; 0x1a6a <strnlen_P+0x2>
    1a74:	80 95       	com	r24
    1a76:	90 95       	com	r25
    1a78:	8e 0f       	add	r24, r30
    1a7a:	9f 1f       	adc	r25, r31
    1a7c:	08 95       	ret

00001a7e <strnlen>:
    1a7e:	fc 01       	movw	r30, r24
    1a80:	61 50       	subi	r22, 0x01	; 1
    1a82:	70 40       	sbci	r23, 0x00	; 0
    1a84:	01 90       	ld	r0, Z+
    1a86:	01 10       	cpse	r0, r1
    1a88:	d8 f7       	brcc	.-10     	; 0x1a80 <strnlen+0x2>
    1a8a:	80 95       	com	r24
    1a8c:	90 95       	com	r25
    1a8e:	8e 0f       	add	r24, r30
    1a90:	9f 1f       	adc	r25, r31
    1a92:	08 95       	ret

00001a94 <fgetc>:
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	ec 01       	movw	r28, r24
    1a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9c:	20 ff       	sbrs	r18, 0
    1a9e:	33 c0       	rjmp	.+102    	; 0x1b06 <fgetc+0x72>
    1aa0:	26 ff       	sbrs	r18, 6
    1aa2:	0a c0       	rjmp	.+20     	; 0x1ab8 <fgetc+0x24>
    1aa4:	2f 7b       	andi	r18, 0xBF	; 191
    1aa6:	2b 83       	std	Y+3, r18	; 0x03
    1aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	9f 83       	std	Y+7, r25	; 0x07
    1ab0:	8e 83       	std	Y+6, r24	; 0x06
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	29 c0       	rjmp	.+82     	; 0x1b0a <fgetc+0x76>
    1ab8:	22 ff       	sbrs	r18, 2
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <fgetc+0x46>
    1abc:	e8 81       	ld	r30, Y
    1abe:	f9 81       	ldd	r31, Y+1	; 0x01
    1ac0:	80 81       	ld	r24, Z
    1ac2:	08 2e       	mov	r0, r24
    1ac4:	00 0c       	add	r0, r0
    1ac6:	99 0b       	sbc	r25, r25
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	19 f4       	brne	.+6      	; 0x1ad2 <fgetc+0x3e>
    1acc:	20 62       	ori	r18, 0x20	; 32
    1ace:	2b 83       	std	Y+3, r18	; 0x03
    1ad0:	1a c0       	rjmp	.+52     	; 0x1b06 <fgetc+0x72>
    1ad2:	31 96       	adiw	r30, 0x01	; 1
    1ad4:	f9 83       	std	Y+1, r31	; 0x01
    1ad6:	e8 83       	st	Y, r30
    1ad8:	0e c0       	rjmp	.+28     	; 0x1af6 <fgetc+0x62>
    1ada:	ea 85       	ldd	r30, Y+10	; 0x0a
    1adc:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ade:	09 95       	icall
    1ae0:	97 ff       	sbrs	r25, 7
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <fgetc+0x62>
    1ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <fgetc+0x5a>
    1aea:	80 e2       	ldi	r24, 0x20	; 32
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <fgetc+0x5c>
    1aee:	80 e1       	ldi	r24, 0x10	; 16
    1af0:	82 2b       	or	r24, r18
    1af2:	8b 83       	std	Y+3, r24	; 0x03
    1af4:	08 c0       	rjmp	.+16     	; 0x1b06 <fgetc+0x72>
    1af6:	2e 81       	ldd	r18, Y+6	; 0x06
    1af8:	3f 81       	ldd	r19, Y+7	; 0x07
    1afa:	2f 5f       	subi	r18, 0xFF	; 255
    1afc:	3f 4f       	sbci	r19, 0xFF	; 255
    1afe:	3f 83       	std	Y+7, r19	; 0x07
    1b00:	2e 83       	std	Y+6, r18	; 0x06
    1b02:	99 27       	eor	r25, r25
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <fgetc+0x76>
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	9f ef       	ldi	r25, 0xFF	; 255
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	08 95       	ret

00001b10 <fputc>:
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	fb 01       	movw	r30, r22
    1b1a:	23 81       	ldd	r18, Z+3	; 0x03
    1b1c:	21 fd       	sbrc	r18, 1
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <fputc+0x16>
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	9f ef       	ldi	r25, 0xFF	; 255
    1b24:	2c c0       	rjmp	.+88     	; 0x1b7e <fputc+0x6e>
    1b26:	22 ff       	sbrs	r18, 2
    1b28:	16 c0       	rjmp	.+44     	; 0x1b56 <fputc+0x46>
    1b2a:	46 81       	ldd	r20, Z+6	; 0x06
    1b2c:	57 81       	ldd	r21, Z+7	; 0x07
    1b2e:	24 81       	ldd	r18, Z+4	; 0x04
    1b30:	35 81       	ldd	r19, Z+5	; 0x05
    1b32:	42 17       	cp	r20, r18
    1b34:	53 07       	cpc	r21, r19
    1b36:	44 f4       	brge	.+16     	; 0x1b48 <fputc+0x38>
    1b38:	a0 81       	ld	r26, Z
    1b3a:	b1 81       	ldd	r27, Z+1	; 0x01
    1b3c:	9d 01       	movw	r18, r26
    1b3e:	2f 5f       	subi	r18, 0xFF	; 255
    1b40:	3f 4f       	sbci	r19, 0xFF	; 255
    1b42:	31 83       	std	Z+1, r19	; 0x01
    1b44:	20 83       	st	Z, r18
    1b46:	8c 93       	st	X, r24
    1b48:	26 81       	ldd	r18, Z+6	; 0x06
    1b4a:	37 81       	ldd	r19, Z+7	; 0x07
    1b4c:	2f 5f       	subi	r18, 0xFF	; 255
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	37 83       	std	Z+7, r19	; 0x07
    1b52:	26 83       	std	Z+6, r18	; 0x06
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <fputc+0x6e>
    1b56:	8b 01       	movw	r16, r22
    1b58:	ec 01       	movw	r28, r24
    1b5a:	fb 01       	movw	r30, r22
    1b5c:	00 84       	ldd	r0, Z+8	; 0x08
    1b5e:	f1 85       	ldd	r31, Z+9	; 0x09
    1b60:	e0 2d       	mov	r30, r0
    1b62:	09 95       	icall
    1b64:	89 2b       	or	r24, r25
    1b66:	e1 f6       	brne	.-72     	; 0x1b20 <fputc+0x10>
    1b68:	d8 01       	movw	r26, r16
    1b6a:	16 96       	adiw	r26, 0x06	; 6
    1b6c:	8d 91       	ld	r24, X+
    1b6e:	9c 91       	ld	r25, X
    1b70:	17 97       	sbiw	r26, 0x07	; 7
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	17 96       	adiw	r26, 0x07	; 7
    1b76:	9c 93       	st	X, r25
    1b78:	8e 93       	st	-X, r24
    1b7a:	16 97       	sbiw	r26, 0x06	; 6
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <ungetc>:
    1b88:	fb 01       	movw	r30, r22
    1b8a:	23 81       	ldd	r18, Z+3	; 0x03
    1b8c:	20 ff       	sbrs	r18, 0
    1b8e:	12 c0       	rjmp	.+36     	; 0x1bb4 <ungetc+0x2c>
    1b90:	26 fd       	sbrc	r18, 6
    1b92:	10 c0       	rjmp	.+32     	; 0x1bb4 <ungetc+0x2c>
    1b94:	8f 3f       	cpi	r24, 0xFF	; 255
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	93 07       	cpc	r25, r19
    1b9a:	61 f0       	breq	.+24     	; 0x1bb4 <ungetc+0x2c>
    1b9c:	82 83       	std	Z+2, r24	; 0x02
    1b9e:	2f 7d       	andi	r18, 0xDF	; 223
    1ba0:	20 64       	ori	r18, 0x40	; 64
    1ba2:	23 83       	std	Z+3, r18	; 0x03
    1ba4:	26 81       	ldd	r18, Z+6	; 0x06
    1ba6:	37 81       	ldd	r19, Z+7	; 0x07
    1ba8:	21 50       	subi	r18, 0x01	; 1
    1baa:	31 09       	sbc	r19, r1
    1bac:	37 83       	std	Z+7, r19	; 0x07
    1bae:	26 83       	std	Z+6, r18	; 0x06
    1bb0:	99 27       	eor	r25, r25
    1bb2:	08 95       	ret
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	9f ef       	ldi	r25, 0xFF	; 255
    1bb8:	08 95       	ret

00001bba <__ultoa_invert>:
    1bba:	fa 01       	movw	r30, r20
    1bbc:	aa 27       	eor	r26, r26
    1bbe:	28 30       	cpi	r18, 0x08	; 8
    1bc0:	51 f1       	breq	.+84     	; 0x1c16 <__ultoa_invert+0x5c>
    1bc2:	20 31       	cpi	r18, 0x10	; 16
    1bc4:	81 f1       	breq	.+96     	; 0x1c26 <__ultoa_invert+0x6c>
    1bc6:	e8 94       	clt
    1bc8:	6f 93       	push	r22
    1bca:	6e 7f       	andi	r22, 0xFE	; 254
    1bcc:	6e 5f       	subi	r22, 0xFE	; 254
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	af 4f       	sbci	r26, 0xFF	; 255
    1bd6:	b1 e0       	ldi	r27, 0x01	; 1
    1bd8:	3e d0       	rcall	.+124    	; 0x1c56 <__ultoa_invert+0x9c>
    1bda:	b4 e0       	ldi	r27, 0x04	; 4
    1bdc:	3c d0       	rcall	.+120    	; 0x1c56 <__ultoa_invert+0x9c>
    1bde:	67 0f       	add	r22, r23
    1be0:	78 1f       	adc	r23, r24
    1be2:	89 1f       	adc	r24, r25
    1be4:	9a 1f       	adc	r25, r26
    1be6:	a1 1d       	adc	r26, r1
    1be8:	68 0f       	add	r22, r24
    1bea:	79 1f       	adc	r23, r25
    1bec:	8a 1f       	adc	r24, r26
    1bee:	91 1d       	adc	r25, r1
    1bf0:	a1 1d       	adc	r26, r1
    1bf2:	6a 0f       	add	r22, r26
    1bf4:	71 1d       	adc	r23, r1
    1bf6:	81 1d       	adc	r24, r1
    1bf8:	91 1d       	adc	r25, r1
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	20 d0       	rcall	.+64     	; 0x1c3e <__ultoa_invert+0x84>
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <__ultoa_invert+0x48>
    1c00:	68 94       	set
    1c02:	3f 91       	pop	r19
    1c04:	2a e0       	ldi	r18, 0x0A	; 10
    1c06:	26 9f       	mul	r18, r22
    1c08:	11 24       	eor	r1, r1
    1c0a:	30 19       	sub	r19, r0
    1c0c:	30 5d       	subi	r19, 0xD0	; 208
    1c0e:	31 93       	st	Z+, r19
    1c10:	de f6       	brtc	.-74     	; 0x1bc8 <__ultoa_invert+0xe>
    1c12:	cf 01       	movw	r24, r30
    1c14:	08 95       	ret
    1c16:	46 2f       	mov	r20, r22
    1c18:	47 70       	andi	r20, 0x07	; 7
    1c1a:	40 5d       	subi	r20, 0xD0	; 208
    1c1c:	41 93       	st	Z+, r20
    1c1e:	b3 e0       	ldi	r27, 0x03	; 3
    1c20:	0f d0       	rcall	.+30     	; 0x1c40 <__ultoa_invert+0x86>
    1c22:	c9 f7       	brne	.-14     	; 0x1c16 <__ultoa_invert+0x5c>
    1c24:	f6 cf       	rjmp	.-20     	; 0x1c12 <__ultoa_invert+0x58>
    1c26:	46 2f       	mov	r20, r22
    1c28:	4f 70       	andi	r20, 0x0F	; 15
    1c2a:	40 5d       	subi	r20, 0xD0	; 208
    1c2c:	4a 33       	cpi	r20, 0x3A	; 58
    1c2e:	18 f0       	brcs	.+6      	; 0x1c36 <__ultoa_invert+0x7c>
    1c30:	49 5d       	subi	r20, 0xD9	; 217
    1c32:	31 fd       	sbrc	r19, 1
    1c34:	40 52       	subi	r20, 0x20	; 32
    1c36:	41 93       	st	Z+, r20
    1c38:	02 d0       	rcall	.+4      	; 0x1c3e <__ultoa_invert+0x84>
    1c3a:	a9 f7       	brne	.-22     	; 0x1c26 <__ultoa_invert+0x6c>
    1c3c:	ea cf       	rjmp	.-44     	; 0x1c12 <__ultoa_invert+0x58>
    1c3e:	b4 e0       	ldi	r27, 0x04	; 4
    1c40:	a6 95       	lsr	r26
    1c42:	97 95       	ror	r25
    1c44:	87 95       	ror	r24
    1c46:	77 95       	ror	r23
    1c48:	67 95       	ror	r22
    1c4a:	ba 95       	dec	r27
    1c4c:	c9 f7       	brne	.-14     	; 0x1c40 <__ultoa_invert+0x86>
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	61 05       	cpc	r22, r1
    1c52:	71 05       	cpc	r23, r1
    1c54:	08 95       	ret
    1c56:	9b 01       	movw	r18, r22
    1c58:	ac 01       	movw	r20, r24
    1c5a:	0a 2e       	mov	r0, r26
    1c5c:	06 94       	lsr	r0
    1c5e:	57 95       	ror	r21
    1c60:	47 95       	ror	r20
    1c62:	37 95       	ror	r19
    1c64:	27 95       	ror	r18
    1c66:	ba 95       	dec	r27
    1c68:	c9 f7       	brne	.-14     	; 0x1c5c <__ultoa_invert+0xa2>
    1c6a:	62 0f       	add	r22, r18
    1c6c:	73 1f       	adc	r23, r19
    1c6e:	84 1f       	adc	r24, r20
    1c70:	95 1f       	adc	r25, r21
    1c72:	a0 1d       	adc	r26, r0
    1c74:	08 95       	ret

00001c76 <__ctype_isfalse>:
    1c76:	99 27       	eor	r25, r25
    1c78:	88 27       	eor	r24, r24

00001c7a <__ctype_istrue>:
    1c7a:	08 95       	ret

00001c7c <_exit>:
    1c7c:	f8 94       	cli

00001c7e <__stop_program>:
    1c7e:	ff cf       	rjmp	.-2      	; 0x1c7e <__stop_program>
