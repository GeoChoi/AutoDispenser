
autoDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000039a  00800100  00001e36  00001eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080049a  0080049a  00002264  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a0c  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff8  00000000  00000000  00004f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001599  00000000  00000000  00005f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000620  00000000  00000000  000074f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d9  00000000  00000000  00007b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001433  00000000  00000000  000083e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000981c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	6e c7       	rjmp	.+3804   	; 0xee2 <__vector_1>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
      36:	00 00       	nop
      38:	7e c7       	rjmp	.+3836   	; 0xf36 <__vector_14>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	63 64       	ori	r22, 0x43	; 67
      8e:	69 6e       	ori	r22, 0xE9	; 233
      90:	6f 70       	andi	r22, 0x0F	; 15
      92:	73 75       	andi	r23, 0x53	; 83
      94:	78 58       	subi	r23, 0x88	; 136
      96:	5b 00       	.word	0x005b	; ????

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e6 e3       	ldi	r30, 0x36	; 54
      ac:	fe e1       	ldi	r31, 0x1E	; 30
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	aa 39       	cpi	r26, 0x9A	; 154
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	24 e0       	ldi	r18, 0x04	; 4
      c0:	aa e9       	ldi	r26, 0x9A	; 154
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a8 3a       	cpi	r26, 0xA8	; 168
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	8d d7       	rcall	.+3866   	; 0xfea <main>
      d0:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <_exit>

000000d4 <__bad_interrupt>:
      d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <testMode>:
extern FILE OUTPUT;
extern FILE INPUT;

char uartBuffer[20] = "0";

void testMode() {
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	2a 97       	sbiw	r28, 0x0a	; 10
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	cd bf       	out	0x3d, r28	; 61
	int quit = 0;
      fe:	c1 2c       	mov	r12, r1
     100:	d1 2c       	mov	r13, r1
	while(1) {
		do {
			do {
				wronginput = 0;
				
				printf("Select mode : step_rel(1), step_abs(2), servo_con(3), quit(q)?");
     102:	84 e8       	ldi	r24, 0x84	; 132
     104:	91 e0       	ldi	r25, 0x01	; 1
     106:	9f 93       	push	r25
     108:	8f 93       	push	r24
     10a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <printf>
				scanf("%s", uartBuffer);
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	9f 93       	push	r25
     114:	8f 93       	push	r24
     116:	83 ec       	ldi	r24, 0xC3	; 195
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	9f 93       	push	r25
     11c:	8f 93       	push	r24
     11e:	0e 94 23 09 	call	0x1246	; 0x1246 <scanf>
				
				if(strcasecmp(uartBuffer, "1")==0)
     122:	66 ec       	ldi	r22, 0xC6	; 198
     124:	71 e0       	ldi	r23, 0x01	; 1
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	0e 94 c8 08 	call	0x1190	; 0x1190 <strcasecmp>
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
     136:	0f 90       	pop	r0
     138:	0f 90       	pop	r0
     13a:	89 2b       	or	r24, r25
     13c:	f9 f0       	breq	.+62     	; 0x17c <testMode+0xa6>
				testModeSelect = 1;
				else if (strcasecmp(uartBuffer, "2")==0)
     13e:	68 ec       	ldi	r22, 0xC8	; 200
     140:	71 e0       	ldi	r23, 0x01	; 1
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 c8 08 	call	0x1190	; 0x1190 <strcasecmp>
     14a:	89 2b       	or	r24, r25
     14c:	e9 f0       	breq	.+58     	; 0x188 <testMode+0xb2>
				testModeSelect = 2;
				else if (strcasecmp(uartBuffer, "3")==0)
     14e:	6a ec       	ldi	r22, 0xCA	; 202
     150:	71 e0       	ldi	r23, 0x01	; 1
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 c8 08 	call	0x1190	; 0x1190 <strcasecmp>
     15a:	89 2b       	or	r24, r25
     15c:	e1 f0       	breq	.+56     	; 0x196 <testMode+0xc0>
				testModeSelect = 3;
				else if (strcasecmp(uartBuffer, "q")==0)
     15e:	6c ec       	ldi	r22, 0xCC	; 204
     160:	71 e0       	ldi	r23, 0x01	; 1
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 c8 08 	call	0x1190	; 0x1190 <strcasecmp>
     16a:	89 2b       	or	r24, r25
     16c:	e1 f0       	breq	.+56     	; 0x1a6 <testMode+0xd0>
				quit = 1;
				else{
					printf("input '1', '2', '3' or 'q'\r\n");
     16e:	8e ec       	ldi	r24, 0xCE	; 206
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <puts>
					wronginput = 1;
     176:	01 e0       	ldi	r16, 0x01	; 1
     178:	10 e0       	ldi	r17, 0x00	; 0
     17a:	1a c0       	rjmp	.+52     	; 0x1b0 <testMode+0xda>
				
				printf("Select mode : step_rel(1), step_abs(2), servo_con(3), quit(q)?");
				scanf("%s", uartBuffer);
				
				if(strcasecmp(uartBuffer, "1")==0)
				testModeSelect = 1;
     17c:	ee 24       	eor	r14, r14
     17e:	e3 94       	inc	r14
     180:	f1 2c       	mov	r15, r1
	unsigned int hand,  wrist, elbow;
	
	while(1) {
		do {
			do {
				wronginput = 0;
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	10 e0       	ldi	r17, 0x00	; 0
     186:	14 c0       	rjmp	.+40     	; 0x1b0 <testMode+0xda>
				scanf("%s", uartBuffer);
				
				if(strcasecmp(uartBuffer, "1")==0)
				testModeSelect = 1;
				else if (strcasecmp(uartBuffer, "2")==0)
				testModeSelect = 2;
     188:	68 94       	set
     18a:	ee 24       	eor	r14, r14
     18c:	e1 f8       	bld	r14, 1
     18e:	f1 2c       	mov	r15, r1
	unsigned int hand,  wrist, elbow;
	
	while(1) {
		do {
			do {
				wronginput = 0;
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	10 e0       	ldi	r17, 0x00	; 0
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <testMode+0xda>
				if(strcasecmp(uartBuffer, "1")==0)
				testModeSelect = 1;
				else if (strcasecmp(uartBuffer, "2")==0)
				testModeSelect = 2;
				else if (strcasecmp(uartBuffer, "3")==0)
				testModeSelect = 3;
     196:	0f 2e       	mov	r0, r31
     198:	f3 e0       	ldi	r31, 0x03	; 3
     19a:	ef 2e       	mov	r14, r31
     19c:	f1 2c       	mov	r15, r1
     19e:	f0 2d       	mov	r31, r0
	unsigned int hand,  wrist, elbow;
	
	while(1) {
		do {
			do {
				wronginput = 0;
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	10 e0       	ldi	r17, 0x00	; 0
     1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <testMode+0xda>
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	10 e0       	ldi	r17, 0x00	; 0
				else if (strcasecmp(uartBuffer, "2")==0)
				testModeSelect = 2;
				else if (strcasecmp(uartBuffer, "3")==0)
				testModeSelect = 3;
				else if (strcasecmp(uartBuffer, "q")==0)
				quit = 1;
     1aa:	cc 24       	eor	r12, r12
     1ac:	c3 94       	inc	r12
     1ae:	d1 2c       	mov	r13, r1
				else{
					printf("input '1', '2', '3' or 'q'\r\n");
					wronginput = 1;
				}
			} while(wronginput);
     1b0:	01 15       	cp	r16, r1
     1b2:	11 05       	cpc	r17, r1
     1b4:	09 f0       	breq	.+2      	; 0x1b8 <testMode+0xe2>
     1b6:	a5 cf       	rjmp	.-182    	; 0x102 <testMode+0x2c>
			
			if(quit) break;
     1b8:	c1 14       	cp	r12, r1
     1ba:	d1 04       	cpc	r13, r1
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <testMode+0xea>
     1be:	b7 c0       	rjmp	.+366    	; 0x32e <testMode+0x258>
			
			if(testModeSelect==1||testModeSelect==2) {
     1c0:	c7 01       	movw	r24, r14
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	02 97       	sbiw	r24, 0x02	; 2
     1c6:	08 f0       	brcs	.+2      	; 0x1ca <testMode+0xf4>
     1c8:	47 c0       	rjmp	.+142    	; 0x258 <testMode+0x182>
				printf("X coordinate : ");
     1ca:	8a ee       	ldi	r24, 0xEA	; 234
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	9f 93       	push	r25
     1d0:	8f 93       	push	r24
     1d2:	f1 d7       	rcall	.+4066   	; 0x11b6 <printf>
				scanf("%u", &coordinate_X);
     1d4:	ce 01       	movw	r24, r28
     1d6:	01 96       	adiw	r24, 0x01	; 1
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	0f 2e       	mov	r0, r31
     1de:	f7 e5       	ldi	r31, 0x57	; 87
     1e0:	8f 2e       	mov	r8, r31
     1e2:	f3 e0       	ldi	r31, 0x03	; 3
     1e4:	9f 2e       	mov	r9, r31
     1e6:	f0 2d       	mov	r31, r0
     1e8:	9f 92       	push	r9
     1ea:	8f 92       	push	r8
     1ec:	0e 94 23 09 	call	0x1246	; 0x1246 <scanf>
				printf("your input : %5d\r\n\r\n", coordinate_X);
     1f0:	8a 81       	ldd	r24, Y+2	; 0x02
     1f2:	8f 93       	push	r24
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	8f 93       	push	r24
     1f8:	0f 2e       	mov	r0, r31
     1fa:	fa ef       	ldi	r31, 0xFA	; 250
     1fc:	af 2e       	mov	r10, r31
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	bf 2e       	mov	r11, r31
     202:	f0 2d       	mov	r31, r0
     204:	bf 92       	push	r11
     206:	af 92       	push	r10
     208:	d6 d7       	rcall	.+4012   	; 0x11b6 <printf>
				
				printf("Y coordinate : ");
     20a:	8f e0       	ldi	r24, 0x0F	; 15
     20c:	92 e0       	ldi	r25, 0x02	; 2
     20e:	9f 93       	push	r25
     210:	8f 93       	push	r24
     212:	d1 d7       	rcall	.+4002   	; 0x11b6 <printf>
				scanf("%u", &coordinate_Y);
     214:	ce 01       	movw	r24, r28
     216:	03 96       	adiw	r24, 0x03	; 3
     218:	9f 93       	push	r25
     21a:	8f 93       	push	r24
     21c:	9f 92       	push	r9
     21e:	8f 92       	push	r8
     220:	0e 94 23 09 	call	0x1246	; 0x1246 <scanf>
				printf("your input : %5d\r\n\r\n", coordinate_Y);
     224:	8c 81       	ldd	r24, Y+4	; 0x04
     226:	8f 93       	push	r24
     228:	8b 81       	ldd	r24, Y+3	; 0x03
     22a:	8f 93       	push	r24
     22c:	bf 92       	push	r11
     22e:	af 92       	push	r10
     230:	c2 d7       	rcall	.+3972   	; 0x11b6 <printf>
				
				printf("[x,y] = [%5d, %5d]\r\n",coordinate_X, coordinate_Y);
     232:	8c 81       	ldd	r24, Y+4	; 0x04
     234:	8f 93       	push	r24
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	8f 93       	push	r24
     23a:	8a 81       	ldd	r24, Y+2	; 0x02
     23c:	8f 93       	push	r24
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	8f 93       	push	r24
     242:	8f e1       	ldi	r24, 0x1F	; 31
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	9f 93       	push	r25
     248:	8f 93       	push	r24
     24a:	b5 d7       	rcall	.+3946   	; 0x11b6 <printf>
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	33 c0       	rjmp	.+102    	; 0x2be <testMode+0x1e8>
			}
			else if(testModeSelect==3) {
     258:	93 e0       	ldi	r25, 0x03	; 3
     25a:	e9 16       	cp	r14, r25
     25c:	f1 04       	cpc	r15, r1
				printf("hand  : ");
     25e:	79 f5       	brne	.+94     	; 0x2be <testMode+0x1e8>
     260:	84 e3       	ldi	r24, 0x34	; 52
     262:	92 e0       	ldi	r25, 0x02	; 2
     264:	9f 93       	push	r25
     266:	8f 93       	push	r24
     268:	a6 d7       	rcall	.+3916   	; 0x11b6 <printf>
				scanf("%u", &hand);
     26a:	ce 01       	movw	r24, r28
     26c:	05 96       	adiw	r24, 0x05	; 5
     26e:	9f 93       	push	r25
     270:	8f 93       	push	r24
     272:	0f 2e       	mov	r0, r31
     274:	f7 e5       	ldi	r31, 0x57	; 87
     276:	af 2e       	mov	r10, r31
     278:	f3 e0       	ldi	r31, 0x03	; 3
     27a:	bf 2e       	mov	r11, r31
     27c:	f0 2d       	mov	r31, r0
     27e:	bf 92       	push	r11
     280:	af 92       	push	r10
				printf("wrist : ");
     282:	e1 d7       	rcall	.+4034   	; 0x1246 <scanf>
     284:	8d e3       	ldi	r24, 0x3D	; 61
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	9f 93       	push	r25
     28a:	8f 93       	push	r24
				scanf("%u", &wrist);
     28c:	94 d7       	rcall	.+3880   	; 0x11b6 <printf>
     28e:	ce 01       	movw	r24, r28
     290:	07 96       	adiw	r24, 0x07	; 7
     292:	9f 93       	push	r25
     294:	8f 93       	push	r24
     296:	bf 92       	push	r11
     298:	af 92       	push	r10
				printf("elbow : ");
     29a:	d5 d7       	rcall	.+4010   	; 0x1246 <scanf>
     29c:	86 e4       	ldi	r24, 0x46	; 70
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	9f 93       	push	r25
     2a2:	8f 93       	push	r24
				scanf("%u", &elbow);
     2a4:	88 d7       	rcall	.+3856   	; 0x11b6 <printf>
     2a6:	ce 01       	movw	r24, r28
     2a8:	09 96       	adiw	r24, 0x09	; 9
     2aa:	9f 93       	push	r25
     2ac:	8f 93       	push	r24
     2ae:	bf 92       	push	r11
     2b0:	af 92       	push	r10
     2b2:	c9 d7       	rcall	.+3986   	; 0x1246 <scanf>
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
			}
			
			do {
				wronginput = 0;
				
				printf("Do you want to proceed?[y/n]");
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	8f e4       	ldi	r24, 0x4F	; 79
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	9f 93       	push	r25
     2c4:	8f 93       	push	r24
				scanf("%s", uartBuffer);
     2c6:	77 d7       	rcall	.+3822   	; 0x11b6 <printf>
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	83 ec       	ldi	r24, 0xC3	; 195
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	9f 93       	push	r25
     2d6:	8f 93       	push	r24
     2d8:	b6 d7       	rcall	.+3948   	; 0x1246 <scanf>
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
     2da:	6c e6       	ldi	r22, 0x6C	; 108
     2dc:	72 e0       	ldi	r23, 0x02	; 2
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	56 d7       	rcall	.+3756   	; 0x1190 <strcasecmp>
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	89 2b       	or	r24, r25
     2f2:	69 f0       	breq	.+26     	; 0x30e <testMode+0x238>
     2f4:	6e e6       	ldi	r22, 0x6E	; 110
     2f6:	72 e0       	ldi	r23, 0x02	; 2
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	49 d7       	rcall	.+3730   	; 0x1190 <strcasecmp>
     2fe:	89 2b       	or	r24, r25
     300:	41 f0       	breq	.+16     	; 0x312 <testMode+0x23c>
					printf("input 'y' or 'n' only\r\n");
     302:	80 e7       	ldi	r24, 0x70	; 112
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	6f d7       	rcall	.+3806   	; 0x11e6 <puts>
					wronginput = 1;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	03 c0       	rjmp	.+6      	; 0x314 <testMode+0x23e>
				printf("elbow : ");
				scanf("%u", &elbow);
			}
			
			do {
				wronginput = 0;
     30e:	c8 01       	movw	r24, r16
     310:	01 c0       	rjmp	.+2      	; 0x314 <testMode+0x23e>
     312:	c8 01       	movw	r24, r16
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
					printf("input 'y' or 'n' only\r\n");
					wronginput = 1;
				}
			} while(wronginput);
     314:	89 2b       	or	r24, r25
			
			printf("\r\n");
     316:	99 f6       	brne	.-90     	; 0x2be <testMode+0x1e8>
     318:	8e e1       	ldi	r24, 0x1E	; 30
     31a:	94 e0       	ldi	r25, 0x04	; 4
     31c:	64 d7       	rcall	.+3784   	; 0x11e6 <puts>
		} while(strcasecmp(uartBuffer, "y"));
     31e:	6c e6       	ldi	r22, 0x6C	; 108
     320:	72 e0       	ldi	r23, 0x02	; 2
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	34 d7       	rcall	.+3688   	; 0x1190 <strcasecmp>
     328:	89 2b       	or	r24, r25
     32a:	09 f0       	breq	.+2      	; 0x32e <testMode+0x258>
     32c:	ea ce       	rjmp	.-556    	; 0x102 <testMode+0x2c>
		
		if(quit) break;
     32e:	c1 14       	cp	r12, r1
     330:	d1 04       	cpc	r13, r1
     332:	09 f0       	breq	.+2      	; 0x336 <testMode+0x260>
     334:	63 c0       	rjmp	.+198    	; 0x3fc <testMode+0x326>
		else if(testModeSelect == 1) {
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	e9 16       	cp	r14, r25
     33a:	f1 04       	cpc	r15, r1
			MoveXY_relative(coordinate_X, coordinate_Y);
     33c:	39 f5       	brne	.+78     	; 0x38c <testMode+0x2b6>
     33e:	6b 81       	ldd	r22, Y+3	; 0x03
     340:	7c 81       	ldd	r23, Y+4	; 0x04
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
			pauseUntilStop();
     346:	90 d4       	rcall	.+2336   	; 0xc68 <MoveXY_relative>
     348:	4d d5       	rcall	.+2714   	; 0xde4 <pauseUntilStop>
			printf("current Position : [%4d, %4d]\r\n\r\n", curX, curY);
     34a:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <curY+0x1>
     34e:	8f 93       	push	r24
     350:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <curY>
     354:	8f 93       	push	r24
     356:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <curX+0x1>
     35a:	8f 93       	push	r24
     35c:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <curX>
     360:	8f 93       	push	r24
     362:	87 e8       	ldi	r24, 0x87	; 135
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	9f 93       	push	r25
     368:	8f 93       	push	r24
     36a:	25 d7       	rcall	.+3658   	; 0x11b6 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36c:	2f ef       	ldi	r18, 0xFF	; 255
     36e:	83 ed       	ldi	r24, 0xD3	; 211
     370:	90 e3       	ldi	r25, 0x30	; 48
     372:	21 50       	subi	r18, 0x01	; 1
     374:	80 40       	sbci	r24, 0x00	; 0
     376:	90 40       	sbci	r25, 0x00	; 0
     378:	e1 f7       	brne	.-8      	; 0x372 <testMode+0x29c>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <testMode+0x2a6>
     37c:	00 00       	nop
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	bb ce       	rjmp	.-650    	; 0x102 <testMode+0x2c>
			_delay_ms(1000);
		}
		else if(testModeSelect == 2) {
     38c:	22 e0       	ldi	r18, 0x02	; 2
     38e:	e2 16       	cp	r14, r18
			MoveXY_absolute(coordinate_X, coordinate_Y);
     390:	f1 04       	cpc	r15, r1
     392:	39 f5       	brne	.+78     	; 0x3e2 <testMode+0x30c>
     394:	6b 81       	ldd	r22, Y+3	; 0x03
     396:	7c 81       	ldd	r23, Y+4	; 0x04
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
			pauseUntilStop();
     39c:	be d4       	rcall	.+2428   	; 0xd1a <MoveXY_absolute>
     39e:	22 d5       	rcall	.+2628   	; 0xde4 <pauseUntilStop>
			printf("current Position : [%4d, %4d]\r\n\r\n", curX, curY);
     3a0:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <curY+0x1>
     3a4:	8f 93       	push	r24
     3a6:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <curY>
     3aa:	8f 93       	push	r24
     3ac:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <curX+0x1>
     3b0:	8f 93       	push	r24
     3b2:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <curX>
     3b6:	8f 93       	push	r24
     3b8:	87 e8       	ldi	r24, 0x87	; 135
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	fa d6       	rcall	.+3572   	; 0x11b6 <printf>
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	93 ed       	ldi	r25, 0xD3	; 211
     3c6:	20 e3       	ldi	r18, 0x30	; 48
     3c8:	81 50       	subi	r24, 0x01	; 1
     3ca:	90 40       	sbci	r25, 0x00	; 0
     3cc:	20 40       	sbci	r18, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <testMode+0x2f2>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <testMode+0x2fc>
     3d2:	00 00       	nop
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	90 ce       	rjmp	.-736    	; 0x102 <testMode+0x2c>
			_delay_ms(1000);
		}
		else if(testModeSelect == 3){
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	e8 16       	cp	r14, r24
     3e6:	f1 04       	cpc	r15, r1
     3e8:	09 f0       	breq	.+2      	; 0x3ec <testMode+0x316>
			MoveArm(hand,wrist,elbow);
     3ea:	8b ce       	rjmp	.-746    	; 0x102 <testMode+0x2c>
     3ec:	49 85       	ldd	r20, Y+9	; 0x09
     3ee:	5a 85       	ldd	r21, Y+10	; 0x0a
     3f0:	6f 81       	ldd	r22, Y+7	; 0x07
     3f2:	78 85       	ldd	r23, Y+8	; 0x08
     3f4:	8d 81       	ldd	r24, Y+5	; 0x05
     3f6:	9e 81       	ldd	r25, Y+6	; 0x06
     3f8:	82 d3       	rcall	.+1796   	; 0xafe <MoveArm>
     3fa:	83 ce       	rjmp	.-762    	; 0x102 <testMode+0x2c>
		}
		
	}
}
     3fc:	2a 96       	adiw	r28, 0x0a	; 10
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	df 90       	pop	r13
     416:	cf 90       	pop	r12
     418:	bf 90       	pop	r11
     41a:	af 90       	pop	r10
     41c:	9f 90       	pop	r9
     41e:	8f 90       	pop	r8
     420:	08 95       	ret

00000422 <fulfill>:
		
		fulfill(row, column);
	}
}

void fulfill(int row, int column) {
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	8c 01       	movw	r16, r24
     430:	eb 01       	movw	r28, r22
	basePoseArm();
     432:	86 d3       	rcall	.+1804   	; 0xb40 <basePoseArm>
     434:	2f ef       	ldi	r18, 0xFF	; 255
     436:	39 e6       	ldi	r19, 0x69	; 105
     438:	88 e1       	ldi	r24, 0x18	; 24
     43a:	21 50       	subi	r18, 0x01	; 1
     43c:	30 40       	sbci	r19, 0x00	; 0
     43e:	80 40       	sbci	r24, 0x00	; 0
     440:	e1 f7       	brne	.-8      	; 0x43a <fulfill+0x18>
     442:	00 c0       	rjmp	.+0      	; 0x444 <fulfill+0x22>
     444:	00 00       	nop
	_delay_ms(500);
	//---------------------------------------------------------
	
	//음료수 집음-----------------------------------------------
	MoveXY_absolute(140, 210);
     446:	62 ed       	ldi	r22, 0xD2	; 210
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	8c e8       	ldi	r24, 0x8C	; 140
     44c:	90 e0       	ldi	r25, 0x00	; 0
	pauseUntilStop();
     44e:	65 d4       	rcall	.+2250   	; 0xd1a <MoveXY_absolute>
     450:	c9 d4       	rcall	.+2450   	; 0xde4 <pauseUntilStop>
     452:	9f ef       	ldi	r25, 0xFF	; 255
     454:	e9 e6       	ldi	r30, 0x69	; 105
     456:	f8 e1       	ldi	r31, 0x18	; 24
     458:	91 50       	subi	r25, 0x01	; 1
     45a:	e0 40       	sbci	r30, 0x00	; 0
     45c:	f0 40       	sbci	r31, 0x00	; 0
     45e:	e1 f7       	brne	.-8      	; 0x458 <fulfill+0x36>
     460:	00 c0       	rjmp	.+0      	; 0x462 <fulfill+0x40>
	_delay_ms(500);
	
	openHand();
     462:	00 00       	nop
     464:	a2 d3       	rcall	.+1860   	; 0xbaa <openHand>
	
	MoveXY_absolute(0, 210);
     466:	62 ed       	ldi	r22, 0xD2	; 210
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
	pauseUntilStop();
     46e:	55 d4       	rcall	.+2218   	; 0xd1a <MoveXY_absolute>
     470:	b9 d4       	rcall	.+2418   	; 0xde4 <pauseUntilStop>
     472:	2f ef       	ldi	r18, 0xFF	; 255
     474:	33 ec       	ldi	r19, 0xC3	; 195
     476:	89 e0       	ldi	r24, 0x09	; 9
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	30 40       	sbci	r19, 0x00	; 0
     47c:	80 40       	sbci	r24, 0x00	; 0
     47e:	e1 f7       	brne	.-8      	; 0x478 <fulfill+0x56>
     480:	00 c0       	rjmp	.+0      	; 0x482 <fulfill+0x60>
	_delay_ms(200);
	
	catchHand_thin();
     482:	00 00       	nop
     484:	84 d3       	rcall	.+1800   	; 0xb8e <catchHand_thin>
     486:	9f ef       	ldi	r25, 0xFF	; 255
     488:	e3 ec       	ldi	r30, 0xC3	; 195
     48a:	f9 e0       	ldi	r31, 0x09	; 9
     48c:	91 50       	subi	r25, 0x01	; 1
     48e:	e0 40       	sbci	r30, 0x00	; 0
     490:	f0 40       	sbci	r31, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <fulfill+0x6a>
	_delay_ms(200);
	
	MoveXY_relative(0, 40);
     494:	00 c0       	rjmp	.+0      	; 0x496 <fulfill+0x74>
     496:	00 00       	nop
     498:	68 e2       	ldi	r22, 0x28	; 40
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
	pauseUntilStop();
     4a0:	e3 d3       	rcall	.+1990   	; 0xc68 <MoveXY_relative>
     4a2:	a0 d4       	rcall	.+2368   	; 0xde4 <pauseUntilStop>
     4a4:	2f ef       	ldi	r18, 0xFF	; 255
     4a6:	31 ee       	ldi	r19, 0xE1	; 225
     4a8:	84 e0       	ldi	r24, 0x04	; 4
     4aa:	21 50       	subi	r18, 0x01	; 1
     4ac:	30 40       	sbci	r19, 0x00	; 0
     4ae:	80 40       	sbci	r24, 0x00	; 0
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <fulfill+0x88>
	_delay_ms(100);
	MoveXY_relative(100, 0);
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <fulfill+0x92>
     4b4:	00 00       	nop
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	84 e6       	ldi	r24, 0x64	; 100
     4bc:	90 e0       	ldi	r25, 0x00	; 0
	pauseUntilStop();
     4be:	d4 d3       	rcall	.+1960   	; 0xc68 <MoveXY_relative>
     4c0:	91 d4       	rcall	.+2338   	; 0xde4 <pauseUntilStop>
     4c2:	9f ef       	ldi	r25, 0xFF	; 255
     4c4:	e1 ee       	ldi	r30, 0xE1	; 225
     4c6:	f4 e0       	ldi	r31, 0x04	; 4
     4c8:	91 50       	subi	r25, 0x01	; 1
     4ca:	e0 40       	sbci	r30, 0x00	; 0
     4cc:	f0 40       	sbci	r31, 0x00	; 0
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <fulfill+0xa6>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <fulfill+0xb0>
     4d2:	00 00       	nop
	_delay_ms(100);
	//-----------------------------------------------------------
	
	//음료수 집은 후 지정된 위치로 이동--------------------
	if(XlocArr[row][column] <= 250) {
     4d4:	f8 01       	movw	r30, r16
     4d6:	ee 0f       	add	r30, r30
     4d8:	ff 1f       	adc	r31, r31
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e0 0f       	add	r30, r16
     4e4:	f1 1f       	adc	r31, r17
     4e6:	ec 0f       	add	r30, r28
     4e8:	fd 1f       	adc	r31, r29
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	e4 5e       	subi	r30, 0xE4	; 228
     4f0:	fe 4f       	sbci	r31, 0xFE	; 254
     4f2:	80 81       	ld	r24, Z
     4f4:	91 81       	ldd	r25, Z+1	; 0x01
     4f6:	8b 3f       	cpi	r24, 0xFB	; 251
     4f8:	91 05       	cpc	r25, r1
     4fa:	0c f0       	brlt	.+2      	; 0x4fe <fulfill+0xdc>
     4fc:	4b c0       	rjmp	.+150    	; 0x594 <fulfill+0x172>
		MoveXY_absolute(250, YlocArr[row]);
     4fe:	c8 01       	movw	r24, r16
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	9c 01       	movw	r18, r24
     506:	2c 5e       	subi	r18, 0xEC	; 236
     508:	3e 4f       	sbci	r19, 0xFE	; 254
     50a:	79 01       	movw	r14, r18
     50c:	f9 01       	movw	r30, r18
     50e:	60 81       	ld	r22, Z
     510:	71 81       	ldd	r23, Z+1	; 0x01
     512:	8a ef       	ldi	r24, 0xFA	; 250
     514:	90 e0       	ldi	r25, 0x00	; 0
		pauseUntilStop();
     516:	01 d4       	rcall	.+2050   	; 0xd1a <MoveXY_absolute>
     518:	65 d4       	rcall	.+2250   	; 0xde4 <pauseUntilStop>
     51a:	ff ef       	ldi	r31, 0xFF	; 255
     51c:	23 ec       	ldi	r18, 0xC3	; 195
     51e:	39 e0       	ldi	r19, 0x09	; 9
     520:	f1 50       	subi	r31, 0x01	; 1
     522:	20 40       	sbci	r18, 0x00	; 0
     524:	30 40       	sbci	r19, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <fulfill+0xfe>
     528:	00 c0       	rjmp	.+0      	; 0x52a <fulfill+0x108>
		_delay_ms(200);
		
		CWturnWrist();
     52a:	00 00       	nop
     52c:	45 d3       	rcall	.+1674   	; 0xbb8 <CWturnWrist>
     52e:	8f ef       	ldi	r24, 0xFF	; 255
     530:	99 e6       	ldi	r25, 0x69	; 105
     532:	e8 e1       	ldi	r30, 0x18	; 24
     534:	81 50       	subi	r24, 0x01	; 1
     536:	90 40       	sbci	r25, 0x00	; 0
     538:	e0 40       	sbci	r30, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <fulfill+0x112>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <fulfill+0x11c>
     53e:	00 00       	nop
		_delay_ms(500);
		innerTurnElbow();
     540:	49 d3       	rcall	.+1682   	; 0xbd4 <innerTurnElbow>
     542:	ff ef       	ldi	r31, 0xFF	; 255
     544:	29 e6       	ldi	r18, 0x69	; 105
     546:	38 e1       	ldi	r19, 0x18	; 24
     548:	f1 50       	subi	r31, 0x01	; 1
     54a:	20 40       	sbci	r18, 0x00	; 0
     54c:	30 40       	sbci	r19, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <fulfill+0x126>
     550:	00 c0       	rjmp	.+0      	; 0x552 <fulfill+0x130>
     552:	00 00       	nop
     554:	f7 01       	movw	r30, r14
		_delay_ms(500);
		
		
		MoveXY_absolute(XlocArr[row][column], YlocArr[row]);
     556:	60 81       	ld	r22, Z
     558:	71 81       	ldd	r23, Z+1	; 0x01
     55a:	f8 01       	movw	r30, r16
     55c:	ee 0f       	add	r30, r30
     55e:	ff 1f       	adc	r31, r31
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	e0 0f       	add	r30, r16
     56a:	f1 1f       	adc	r31, r17
     56c:	ec 0f       	add	r30, r28
     56e:	fd 1f       	adc	r31, r29
     570:	ee 0f       	add	r30, r30
     572:	ff 1f       	adc	r31, r31
     574:	e4 5e       	subi	r30, 0xE4	; 228
     576:	fe 4f       	sbci	r31, 0xFE	; 254
     578:	80 81       	ld	r24, Z
     57a:	91 81       	ldd	r25, Z+1	; 0x01
     57c:	ce d3       	rcall	.+1948   	; 0xd1a <MoveXY_absolute>
		pauseUntilStop();
     57e:	32 d4       	rcall	.+2148   	; 0xde4 <pauseUntilStop>
     580:	ff ef       	ldi	r31, 0xFF	; 255
     582:	23 ec       	ldi	r18, 0xC3	; 195
     584:	39 e0       	ldi	r19, 0x09	; 9
     586:	f1 50       	subi	r31, 0x01	; 1
     588:	20 40       	sbci	r18, 0x00	; 0
     58a:	30 40       	sbci	r19, 0x00	; 0
     58c:	e1 f7       	brne	.-8      	; 0x586 <fulfill+0x164>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <fulfill+0x16e>
     590:	00 00       	nop
		_delay_ms(200);
		} else {
		MoveXY_absolute(XlocArr[row][column], YlocArr[row]);
     592:	26 c0       	rjmp	.+76     	; 0x5e0 <fulfill+0x1be>
     594:	f8 01       	movw	r30, r16
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	ec 5e       	subi	r30, 0xEC	; 236
     59c:	fe 4f       	sbci	r31, 0xFE	; 254
     59e:	60 81       	ld	r22, Z
     5a0:	71 81       	ldd	r23, Z+1	; 0x01
		pauseUntilStop();
     5a2:	bb d3       	rcall	.+1910   	; 0xd1a <MoveXY_absolute>
     5a4:	1f d4       	rcall	.+2110   	; 0xde4 <pauseUntilStop>
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	93 ec       	ldi	r25, 0xC3	; 195
     5aa:	e9 e0       	ldi	r30, 0x09	; 9
     5ac:	81 50       	subi	r24, 0x01	; 1
     5ae:	90 40       	sbci	r25, 0x00	; 0
     5b0:	e0 40       	sbci	r30, 0x00	; 0
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <fulfill+0x18a>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <fulfill+0x194>
		_delay_ms(200);
		
		CWturnWrist();
     5b6:	00 00       	nop
     5b8:	ff d2       	rcall	.+1534   	; 0xbb8 <CWturnWrist>
     5ba:	ff ef       	ldi	r31, 0xFF	; 255
     5bc:	29 e6       	ldi	r18, 0x69	; 105
     5be:	38 e1       	ldi	r19, 0x18	; 24
     5c0:	f1 50       	subi	r31, 0x01	; 1
     5c2:	20 40       	sbci	r18, 0x00	; 0
     5c4:	30 40       	sbci	r19, 0x00	; 0
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <fulfill+0x19e>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <fulfill+0x1a8>
		_delay_ms(500);
		innerTurnElbow();
     5ca:	00 00       	nop
     5cc:	03 d3       	rcall	.+1542   	; 0xbd4 <innerTurnElbow>
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	99 e6       	ldi	r25, 0x69	; 105
     5d2:	e8 e1       	ldi	r30, 0x18	; 24
     5d4:	81 50       	subi	r24, 0x01	; 1
     5d6:	90 40       	sbci	r25, 0x00	; 0
     5d8:	e0 40       	sbci	r30, 0x00	; 0
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <fulfill+0x1b2>
		_delay_ms(500);
	}
	//---------------------------------------------------------
	
	//음료수 놓음---------------------------------------------
	holdHand_thin();
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <fulfill+0x1bc>
     5de:	00 00       	nop
     5e0:	dd d2       	rcall	.+1466   	; 0xb9c <holdHand_thin>
     5e2:	ff ef       	ldi	r31, 0xFF	; 255
     5e4:	21 ee       	ldi	r18, 0xE1	; 225
     5e6:	34 e0       	ldi	r19, 0x04	; 4
     5e8:	f1 50       	subi	r31, 0x01	; 1
     5ea:	20 40       	sbci	r18, 0x00	; 0
     5ec:	30 40       	sbci	r19, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <fulfill+0x1c6>
	_delay_ms(100);
	MoveXY_relative(0, -50);
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <fulfill+0x1d0>
     5f2:	00 00       	nop
     5f4:	6e ec       	ldi	r22, 0xCE	; 206
     5f6:	7f ef       	ldi	r23, 0xFF	; 255
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
	pauseUntilStop();
     5fc:	35 d3       	rcall	.+1642   	; 0xc68 <MoveXY_relative>
     5fe:	f2 d3       	rcall	.+2020   	; 0xde4 <pauseUntilStop>
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	93 ec       	ldi	r25, 0xC3	; 195
     604:	e9 e0       	ldi	r30, 0x09	; 9
     606:	81 50       	subi	r24, 0x01	; 1
     608:	90 40       	sbci	r25, 0x00	; 0
     60a:	e0 40       	sbci	r30, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <fulfill+0x1e4>
	_delay_ms(200);
	
	openHand();
     60e:	00 c0       	rjmp	.+0      	; 0x610 <fulfill+0x1ee>
     610:	00 00       	nop
     612:	cb d2       	rcall	.+1430   	; 0xbaa <openHand>
     614:	ff ef       	ldi	r31, 0xFF	; 255
     616:	2d e3       	ldi	r18, 0x3D	; 61
     618:	39 e4       	ldi	r19, 0x49	; 73
     61a:	f1 50       	subi	r31, 0x01	; 1
     61c:	20 40       	sbci	r18, 0x00	; 0
     61e:	30 40       	sbci	r19, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <fulfill+0x1f8>
     622:	00 c0       	rjmp	.+0      	; 0x624 <fulfill+0x202>
	_delay_ms(1500);
	
	MoveXY_relative(0, 50);
     624:	00 00       	nop
     626:	62 e3       	ldi	r22, 0x32	; 50
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	1c d3       	rcall	.+1592   	; 0xc68 <MoveXY_relative>
	pauseUntilStop();
     630:	d9 d3       	rcall	.+1970   	; 0xde4 <pauseUntilStop>
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	93 ec       	ldi	r25, 0xC3	; 195
     636:	e9 e0       	ldi	r30, 0x09	; 9
     638:	81 50       	subi	r24, 0x01	; 1
     63a:	90 40       	sbci	r25, 0x00	; 0
     63c:	e0 40       	sbci	r30, 0x00	; 0
     63e:	e1 f7       	brne	.-8      	; 0x638 <fulfill+0x216>
     640:	00 c0       	rjmp	.+0      	; 0x642 <fulfill+0x220>
     642:	00 00       	nop
     644:	c8 01       	movw	r24, r16
	_delay_ms(200);
	//----------------------------------------------------------
	
	//팔 뺌-----------------------------------------------------
	if(XlocArr[row][column] <= 250) {
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	80 0f       	add	r24, r16
     654:	91 1f       	adc	r25, r17
     656:	c8 0f       	add	r28, r24
     658:	d9 1f       	adc	r29, r25
     65a:	cc 0f       	add	r28, r28
     65c:	dd 1f       	adc	r29, r29
     65e:	c4 5e       	subi	r28, 0xE4	; 228
     660:	de 4f       	sbci	r29, 0xFE	; 254
     662:	88 81       	ld	r24, Y
     664:	99 81       	ldd	r25, Y+1	; 0x01
     666:	8b 3f       	cpi	r24, 0xFB	; 251
		MoveXY_absolute(250, YlocArr[row]);
     668:	91 05       	cpc	r25, r1
     66a:	a4 f4       	brge	.+40     	; 0x694 <fulfill+0x272>
     66c:	00 0f       	add	r16, r16
     66e:	11 1f       	adc	r17, r17
     670:	f8 01       	movw	r30, r16
     672:	ec 5e       	subi	r30, 0xEC	; 236
     674:	fe 4f       	sbci	r31, 0xFE	; 254
     676:	60 81       	ld	r22, Z
     678:	71 81       	ldd	r23, Z+1	; 0x01
     67a:	8a ef       	ldi	r24, 0xFA	; 250
		pauseUntilStop();
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	4d d3       	rcall	.+1690   	; 0xd1a <MoveXY_absolute>
     680:	b1 d3       	rcall	.+1890   	; 0xde4 <pauseUntilStop>
     682:	ff ef       	ldi	r31, 0xFF	; 255
     684:	23 ec       	ldi	r18, 0xC3	; 195
     686:	39 e0       	ldi	r19, 0x09	; 9
     688:	f1 50       	subi	r31, 0x01	; 1
     68a:	20 40       	sbci	r18, 0x00	; 0
     68c:	30 40       	sbci	r19, 0x00	; 0
     68e:	e1 f7       	brne	.-8      	; 0x688 <fulfill+0x266>
		_delay_ms(200);
	}
	
	closeHand();
     690:	00 c0       	rjmp	.+0      	; 0x692 <fulfill+0x270>
     692:	00 00       	nop
     694:	75 d2       	rcall	.+1258   	; 0xb80 <closeHand>
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	93 ec       	ldi	r25, 0xC3	; 195
     69a:	e9 e0       	ldi	r30, 0x09	; 9
     69c:	81 50       	subi	r24, 0x01	; 1
     69e:	90 40       	sbci	r25, 0x00	; 0
     6a0:	e0 40       	sbci	r30, 0x00	; 0
     6a2:	e1 f7       	brne	.-8      	; 0x69c <fulfill+0x27a>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <fulfill+0x284>
	_delay_ms(200);
	
	normalTurnElbow();
     6a6:	00 00       	nop
     6a8:	9c d2       	rcall	.+1336   	; 0xbe2 <normalTurnElbow>
     6aa:	ff ef       	ldi	r31, 0xFF	; 255
     6ac:	29 e6       	ldi	r18, 0x69	; 105
     6ae:	38 e1       	ldi	r19, 0x18	; 24
     6b0:	f1 50       	subi	r31, 0x01	; 1
     6b2:	20 40       	sbci	r18, 0x00	; 0
     6b4:	30 40       	sbci	r19, 0x00	; 0
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <fulfill+0x28e>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <fulfill+0x298>
     6ba:	00 00       	nop
	_delay_ms(500);
	normalWrist();
     6bc:	84 d2       	rcall	.+1288   	; 0xbc6 <normalWrist>
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	99 e6       	ldi	r25, 0x69	; 105
     6c2:	e8 e1       	ldi	r30, 0x18	; 24
     6c4:	81 50       	subi	r24, 0x01	; 1
     6c6:	90 40       	sbci	r25, 0x00	; 0
     6c8:	e0 40       	sbci	r30, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <fulfill+0x2a2>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <fulfill+0x2ac>
     6ce:	00 00       	nop
     6d0:	df 91       	pop	r29
	_delay_ms(500);
	//----------------------------------------------------------
	
	//종료------------------------------------------------------
	//---------------------------------------------------------
}
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	08 95       	ret

000006de <manualMode>:
     6de:	0f 93       	push	r16

void manualMode(void) {
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
	int wronginput=0;
	
	set_V_Disable();//PORTC0 low : disable vertical motor
     6e6:	88 d2       	rcall	.+1296   	; 0xbf8 <set_V_Disable>
	set_H_Disable();//PORTC4 low : disable horizontal motor
     6e8:	97 d2       	rcall	.+1326   	; 0xc18 <set_H_Disable>
	freePoseArm();
     6ea:	3b d2       	rcall	.+1142   	; 0xb62 <freePoseArm>
     6ec:	89 ea       	ldi	r24, 0xA9	; 169
	
	while(1) {
		printf("Moveup(1), Movedown(2), gotoMainMenu(q)?");
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	60 d5       	rcall	.+2752   	; 0x11b6 <printf>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
		scanf("%s", uartBuffer);
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	9f 93       	push	r25
     6fc:	8f 93       	push	r24
     6fe:	83 ec       	ldi	r24, 0xC3	; 195
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	9f d5       	rcall	.+2878   	; 0x1246 <scanf>
     708:	66 ec       	ldi	r22, 0xC6	; 198
		
		if(strcasecmp(uartBuffer, "1")==0) {
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	3f d5       	rcall	.+2686   	; 0x1190 <strcasecmp>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	89 2b       	or	r24, r25
     720:	31 f5       	brne	.+76     	; 0x76e <manualMode+0x90>
     722:	82 ed       	ldi	r24, 0xD2	; 210
			printf("ready?(any word) : ");
     724:	92 e0       	ldi	r25, 0x02	; 2
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	45 d5       	rcall	.+2698   	; 0x11b6 <printf>
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	11 e0       	ldi	r17, 0x01	; 1
			scanf("%s",uartBuffer);
     730:	1f 93       	push	r17
     732:	0f 93       	push	r16
     734:	c3 ec       	ldi	r28, 0xC3	; 195
     736:	d1 e0       	ldi	r29, 0x01	; 1
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
			set_V_Enable();
     73c:	84 d5       	rcall	.+2824   	; 0x1246 <scanf>
     73e:	58 d2       	rcall	.+1200   	; 0xbf0 <set_V_Enable>
			set_V_Up();
     740:	5f d2       	rcall	.+1214   	; 0xc00 <set_V_Up>
     742:	76 d2       	rcall	.+1260   	; 0xc30 <V_MoveStart>
			V_MoveStart();
     744:	86 ee       	ldi	r24, 0xE6	; 230
			printf("stop(any word) : ");
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	34 d5       	rcall	.+2664   	; 0x11b6 <printf>
     74e:	1f 93       	push	r17
			scanf("%s",uartBuffer);
     750:	0f 93       	push	r16
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	77 d5       	rcall	.+2798   	; 0x1246 <scanf>
     758:	72 d2       	rcall	.+1252   	; 0xc3e <V_MoveStop>
     75a:	4e d2       	rcall	.+1180   	; 0xbf8 <set_V_Disable>
			V_MoveStop();
     75c:	8d b7       	in	r24, 0x3d	; 61
     75e:	9e b7       	in	r25, 0x3e	; 62
			set_V_Disable();
     760:	0c 96       	adiw	r24, 0x0c	; 12
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	9e bf       	out	0x3e, r25	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	8d bf       	out	0x3d, r24	; 61
     76c:	bf cf       	rjmp	.-130    	; 0x6ec <manualMode+0xe>
     76e:	68 ec       	ldi	r22, 0xC8	; 200
     770:	71 e0       	ldi	r23, 0x01	; 1
		}
		else if (strcasecmp(uartBuffer, "2")==0){
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0c d5       	rcall	.+2584   	; 0x1190 <strcasecmp>
     778:	89 2b       	or	r24, r25
     77a:	31 f5       	brne	.+76     	; 0x7c8 <manualMode+0xea>
     77c:	82 ed       	ldi	r24, 0xD2	; 210
			printf("ready?(any word) : ");
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	9f 93       	push	r25
     782:	8f 93       	push	r24
     784:	18 d5       	rcall	.+2608   	; 0x11b6 <printf>
     786:	00 e0       	ldi	r16, 0x00	; 0
			scanf("%s",uartBuffer);
     788:	11 e0       	ldi	r17, 0x01	; 1
     78a:	1f 93       	push	r17
     78c:	0f 93       	push	r16
     78e:	c3 ec       	ldi	r28, 0xC3	; 195
     790:	d1 e0       	ldi	r29, 0x01	; 1
     792:	df 93       	push	r29
     794:	cf 93       	push	r28
			set_V_Enable();
     796:	57 d5       	rcall	.+2734   	; 0x1246 <scanf>
     798:	2b d2       	rcall	.+1110   	; 0xbf0 <set_V_Enable>
			set_V_Down();
     79a:	36 d2       	rcall	.+1132   	; 0xc08 <set_V_Down>
     79c:	49 d2       	rcall	.+1170   	; 0xc30 <V_MoveStart>
			V_MoveStart();
     79e:	86 ee       	ldi	r24, 0xE6	; 230
     7a0:	92 e0       	ldi	r25, 0x02	; 2
			printf("stop(any word) : ");
     7a2:	9f 93       	push	r25
     7a4:	8f 93       	push	r24
     7a6:	07 d5       	rcall	.+2574   	; 0x11b6 <printf>
     7a8:	1f 93       	push	r17
     7aa:	0f 93       	push	r16
			scanf("%s",uartBuffer);
     7ac:	df 93       	push	r29
     7ae:	cf 93       	push	r28
     7b0:	4a d5       	rcall	.+2708   	; 0x1246 <scanf>
     7b2:	45 d2       	rcall	.+1162   	; 0xc3e <V_MoveStop>
     7b4:	21 d2       	rcall	.+1090   	; 0xbf8 <set_V_Disable>
			V_MoveStop();
     7b6:	8d b7       	in	r24, 0x3d	; 61
			set_V_Disable();
     7b8:	9e b7       	in	r25, 0x3e	; 62
     7ba:	0c 96       	adiw	r24, 0x0c	; 12
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	9e bf       	out	0x3e, r25	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	8d bf       	out	0x3d, r24	; 61
     7c6:	92 cf       	rjmp	.-220    	; 0x6ec <manualMode+0xe>
     7c8:	6c ec       	ldi	r22, 0xCC	; 204
     7ca:	71 e0       	ldi	r23, 0x01	; 1
     7cc:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (strcasecmp(uartBuffer, "q")==0)
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	df d4       	rcall	.+2494   	; 0x1190 <strcasecmp>
     7d2:	89 2b       	or	r24, r25
     7d4:	21 f0       	breq	.+8      	; 0x7de <manualMode+0x100>
     7d6:	88 ef       	ldi	r24, 0xF8	; 248
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	05 d5       	rcall	.+2570   	; 0x11e6 <puts>
     7dc:	87 cf       	rjmp	.-242    	; 0x6ec <manualMode+0xe>
		break;
		else
		printf("input '1', '2' or 'q'\r\n");
     7de:	b0 d1       	rcall	.+864    	; 0xb40 <basePoseArm>
     7e0:	07 d2       	rcall	.+1038   	; 0xbf0 <set_V_Enable>
     7e2:	16 d2       	rcall	.+1068   	; 0xc10 <set_H_Enable>
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
	}
	
	basePoseArm();
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
	
	set_V_Enable();//PORTC0 low : enable vertical motor
     7ec:	08 95       	ret

000007ee <setHereas00>:
     7ee:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <curX+0x1>
	set_H_Enable();//PORTC4 low : enable horizontal motor
     7f2:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <curX>
}
     7f6:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <curY+0x1>
     7fa:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <curY>

void setHereas00(void) {
	curX = 0; curY = 0;
     7fe:	08 95       	ret

00000800 <manualFulfillMode>:
		}
		
	}
}

void manualFulfillMode(void) {
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	00 d0       	rcall	.+0      	; 0x80a <manualFulfillMode+0xa>
     80a:	00 d0       	rcall	.+0      	; 0x80c <manualFulfillMode+0xc>
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
	unsigned int column;
	
	int wronginput=0;
	int quit = 0;
	
	setHereas00();
     810:	ee df       	rcall	.-36     	; 0x7ee <setHereas00>
	
	while(1) {
		do{
			quit = 0;
			printf("n");
     812:	8e e6       	ldi	r24, 0x6E	; 110
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	e2 d4       	rcall	.+2500   	; 0x11dc <putchar>
			printf("\r\n");
     818:	8e e1       	ldi	r24, 0x1E	; 30
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	e4 d4       	rcall	.+2504   	; 0x11e6 <puts>
			printf("(forUser)@@quit for row == 4@@\r\n");
     81e:	8f e0       	ldi	r24, 0x0F	; 15
     820:	93 e0       	ldi	r25, 0x03	; 3
     822:	e1 d4       	rcall	.+2498   	; 0x11e6 <puts>
     824:	8f e2       	ldi	r24, 0x2F	; 47
			printf("(forUser)waiting for [row,column] : ");
     826:	93 e0       	ldi	r25, 0x03	; 3
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	c4 d4       	rcall	.+2440   	; 0x11b6 <printf>
     82e:	ce 01       	movw	r24, r28
			scanf("%u,%u", &row, &column);
     830:	03 96       	adiw	r24, 0x03	; 3
     832:	9f 93       	push	r25
     834:	8f 93       	push	r24
     836:	02 97       	sbiw	r24, 0x02	; 2
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	84 e5       	ldi	r24, 0x54	; 84
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	9f 93       	push	r25
     842:	8f 93       	push	r24
     844:	00 d5       	rcall	.+2560   	; 0x1246 <scanf>
     846:	0f b6       	in	r0, 0x3f	; 63
			
			while(row>=5||column>=9) {
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	24 c0       	rjmp	.+72     	; 0x89a <manualFulfillMode+0x9a>
				printf("r");
     852:	82 e7       	ldi	r24, 0x72	; 114
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	c2 d4       	rcall	.+2436   	; 0x11dc <putchar>
     858:	8e e1       	ldi	r24, 0x1E	; 30
				printf("\r\n");
     85a:	94 e0       	ldi	r25, 0x04	; 4
     85c:	c4 d4       	rcall	.+2440   	; 0x11e6 <puts>
     85e:	8a e5       	ldi	r24, 0x5A	; 90
				printf("(forUser)worng input");
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	9f 93       	push	r25
     864:	8f 93       	push	r24
     866:	a7 d4       	rcall	.+2382   	; 0x11b6 <printf>
     868:	8f e6       	ldi	r24, 0x6F	; 111
				printf("(forUser)quit for row == 4\r\n");
     86a:	93 e0       	ldi	r25, 0x03	; 3
     86c:	bc d4       	rcall	.+2424   	; 0x11e6 <puts>
     86e:	8f e2       	ldi	r24, 0x2F	; 47
     870:	93 e0       	ldi	r25, 0x03	; 3
				printf("(forUser)waiting for [row,column] : ");
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	9f d4       	rcall	.+2366   	; 0x11b6 <printf>
     878:	ce 01       	movw	r24, r28
     87a:	03 96       	adiw	r24, 0x03	; 3
     87c:	9f 93       	push	r25
				scanf("%u,%u", &row, &column);
     87e:	8f 93       	push	r24
     880:	02 97       	sbiw	r24, 0x02	; 2
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	84 e5       	ldi	r24, 0x54	; 84
     888:	93 e0       	ldi	r25, 0x03	; 3
     88a:	9f 93       	push	r25
     88c:	8f 93       	push	r24
     88e:	db d4       	rcall	.+2486   	; 0x1246 <scanf>
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	9a 81       	ldd	r25, Y+2	; 0x02
     89e:	05 97       	sbiw	r24, 0x05	; 5
			printf("\r\n");
			printf("(forUser)@@quit for row == 4@@\r\n");
			printf("(forUser)waiting for [row,column] : ");
			scanf("%u,%u", &row, &column);
			
			while(row>=5||column>=9) {
     8a0:	c0 f6       	brcc	.-80     	; 0x852 <manualFulfillMode+0x52>
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	9c 81       	ldd	r25, Y+4	; 0x04
     8a6:	09 97       	sbiw	r24, 0x09	; 9
     8a8:	a0 f6       	brcc	.-88     	; 0x852 <manualFulfillMode+0x52>
     8aa:	00 e0       	ldi	r16, 0x00	; 0
     8ac:	10 e0       	ldi	r17, 0x00	; 0
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	9a 81       	ldd	r25, Y+2	; 0x02
				scanf("%u,%u", &row, &column);
			}
			
			do {
				wronginput = 0;
				if(row==4) {
     8b2:	84 30       	cpi	r24, 0x04	; 4
     8b4:	91 05       	cpc	r25, r1
     8b6:	51 f4       	brne	.+20     	; 0x8cc <manualFulfillMode+0xcc>
     8b8:	8b e8       	ldi	r24, 0x8B	; 139
     8ba:	93 e0       	ldi	r25, 0x03	; 3
					printf("(forUser)quit - ");
     8bc:	9f 93       	push	r25
     8be:	8f 93       	push	r24
     8c0:	7a d4       	rcall	.+2292   	; 0x11b6 <printf>
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	01 e0       	ldi	r16, 0x01	; 1
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	11 c0       	rjmp	.+34     	; 0x8ee <manualFulfillMode+0xee>
					quit = 1;
     8cc:	2c 81       	ldd	r18, Y+4	; 0x04
     8ce:	2f 93       	push	r18
					} else {
					printf("(forUser)[%u,%u] - ",row, column);
     8d0:	2b 81       	ldd	r18, Y+3	; 0x03
     8d2:	2f 93       	push	r18
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	8c e9       	ldi	r24, 0x9C	; 156
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	9f 93       	push	r25
     8de:	8f 93       	push	r24
     8e0:	6a d4       	rcall	.+2260   	; 0x11b6 <printf>
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	80 eb       	ldi	r24, 0xB0	; 176
     8f0:	93 e0       	ldi	r25, 0x03	; 3
				}
				
				printf("Do you want to proceed?[y/n] : ");
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	5f d4       	rcall	.+2238   	; 0x11b6 <printf>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	91 e0       	ldi	r25, 0x01	; 1
				scanf("%s", uartBuffer);
     8fc:	9f 93       	push	r25
     8fe:	8f 93       	push	r24
     900:	83 ec       	ldi	r24, 0xC3	; 195
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	9f 93       	push	r25
     906:	8f 93       	push	r24
     908:	9e d4       	rcall	.+2364   	; 0x1246 <scanf>
     90a:	6c e6       	ldi	r22, 0x6C	; 108
     90c:	72 e0       	ldi	r23, 0x02	; 2
     90e:	80 e0       	ldi	r24, 0x00	; 0
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	3e d4       	rcall	.+2172   	; 0x1190 <strcasecmp>
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	89 2b       	or	r24, r25
     922:	69 f0       	breq	.+26     	; 0x93e <manualFulfillMode+0x13e>
     924:	6e e6       	ldi	r22, 0x6E	; 110
     926:	72 e0       	ldi	r23, 0x02	; 2
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	31 d4       	rcall	.+2146   	; 0x1190 <strcasecmp>
     92e:	89 2b       	or	r24, r25
     930:	49 f0       	breq	.+18     	; 0x944 <manualFulfillMode+0x144>
     932:	80 e7       	ldi	r24, 0x70	; 112
     934:	92 e0       	ldi	r25, 0x02	; 2
					printf("input 'y' or 'n' only\r\n");
     936:	57 d4       	rcall	.+2222   	; 0x11e6 <puts>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
					wronginput = 1;
     93c:	05 c0       	rjmp	.+10     	; 0x948 <manualFulfillMode+0x148>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
				printf("(forUser)waiting for [row,column] : ");
				scanf("%u,%u", &row, &column);
			}
			
			do {
				wronginput = 0;
     942:	02 c0       	rjmp	.+4      	; 0x948 <manualFulfillMode+0x148>
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	89 2b       	or	r24, r25
     94a:	09 f0       	breq	.+2      	; 0x94e <manualFulfillMode+0x14e>
				
				if(strcasecmp(uartBuffer, "y")&&strcasecmp(uartBuffer, "n")) {
					printf("input 'y' or 'n' only\r\n");
					wronginput = 1;
				}
			} while(wronginput);
     94c:	b0 cf       	rjmp	.-160    	; 0x8ae <manualFulfillMode+0xae>
     94e:	8e e1       	ldi	r24, 0x1E	; 30
     950:	94 e0       	ldi	r25, 0x04	; 4
			printf("\r\n");
     952:	49 d4       	rcall	.+2194   	; 0x11e6 <puts>
     954:	6c e6       	ldi	r22, 0x6C	; 108
     956:	72 e0       	ldi	r23, 0x02	; 2
     958:	80 e0       	ldi	r24, 0x00	; 0
		} while(strcasecmp(uartBuffer, "y"));
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	19 d4       	rcall	.+2098   	; 0x1190 <strcasecmp>
     95e:	89 2b       	or	r24, r25
     960:	09 f0       	breq	.+2      	; 0x964 <manualFulfillMode+0x164>
     962:	57 cf       	rjmp	.-338    	; 0x812 <manualFulfillMode+0x12>
     964:	01 30       	cpi	r16, 0x01	; 1
     966:	11 05       	cpc	r17, r1
     968:	89 f1       	breq	.+98     	; 0x9cc <manualFulfillMode+0x1cc>
     96a:	89 81       	ldd	r24, Y+1	; 0x01
		if(quit == 1) break;
     96c:	9a 81       	ldd	r25, Y+2	; 0x02
     96e:	fc 01       	movw	r30, r24
     970:	ee 0f       	add	r30, r30
		
		//시작 준비------------------------------------------------
		printf("location : [%u,%u]\r\n", XlocArr[row][column],  YlocArr[row]);
     972:	ff 1f       	adc	r31, r31
     974:	ec 5e       	subi	r30, 0xEC	; 236
     976:	fe 4f       	sbci	r31, 0xFE	; 254
     978:	21 81       	ldd	r18, Z+1	; 0x01
     97a:	2f 93       	push	r18
     97c:	20 81       	ld	r18, Z
     97e:	2f 93       	push	r18
     980:	fc 01       	movw	r30, r24
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	ee 0f       	add	r30, r30
     988:	ff 1f       	adc	r31, r31
     98a:	ee 0f       	add	r30, r30
     98c:	ff 1f       	adc	r31, r31
     98e:	e8 0f       	add	r30, r24
     990:	f9 1f       	adc	r31, r25
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	e8 0f       	add	r30, r24
     998:	f9 1f       	adc	r31, r25
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	e4 5e       	subi	r30, 0xE4	; 228
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
     9a4:	8f 93       	push	r24
     9a6:	80 81       	ld	r24, Z
     9a8:	8f 93       	push	r24
     9aa:	80 ed       	ldi	r24, 0xD0	; 208
     9ac:	93 e0       	ldi	r25, 0x03	; 3
     9ae:	9f 93       	push	r25
     9b0:	8f 93       	push	r24
     9b2:	01 d4       	rcall	.+2050   	; 0x11b6 <printf>
     9b4:	6b 81       	ldd	r22, Y+3	; 0x03
     9b6:	7c 81       	ldd	r23, Y+4	; 0x04
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
		
		fulfill(row, column);
     9ba:	9a 81       	ldd	r25, Y+2	; 0x02
     9bc:	32 dd       	rcall	.-1436   	; 0x422 <fulfill>
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
	}
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	23 cf       	rjmp	.-442    	; 0x812 <manualFulfillMode+0x12>
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	08 95       	ret

000009de <autoFulfillMode>:
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <autoFulfillMode+0x6>
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <autoFulfillMode+0x8>
void setHereas00(void) {
	curX = 0; curY = 0;
}


void autoFulfillMode(void) {
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	unsigned int row;
	unsigned int column;
	
	OUTPUT.put = UART0_transmit;
     9ea:	e6 e7       	ldi	r30, 0x76	; 118
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	8a e9       	ldi	r24, 0x9A	; 154
     9f0:	98 e0       	ldi	r25, 0x08	; 8
     9f2:	91 87       	std	Z+9, r25	; 0x09
     9f4:	80 87       	std	Z+8, r24	; 0x08
	OUTPUT.get = NULL;
     9f6:	13 86       	std	Z+11, r1	; 0x0b
     9f8:	12 86       	std	Z+10, r1	; 0x0a
	OUTPUT.flags = _FDEV_SETUP_WRITE;
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	83 83       	std	Z+3, r24	; 0x03

	INPUT.put = NULL;
     9fe:	e8 e6       	ldi	r30, 0x68	; 104
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	11 86       	std	Z+9, r1	; 0x09
     a04:	10 86       	std	Z+8, r1	; 0x08
	INPUT.get = UART0_receive;
     a06:	8e e9       	ldi	r24, 0x9E	; 158
     a08:	98 e0       	ldi	r25, 0x08	; 8
     a0a:	93 87       	std	Z+11, r25	; 0x0b
     a0c:	82 87       	std	Z+10, r24	; 0x0a
	INPUT.flags = _FDEV_SETUP_READ;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	83 83       	std	Z+3, r24	; 0x03
	
	setHereas00();
     a12:	ed de       	rcall	.-550    	; 0x7ee <setHereas00>
	
	while(1) {
		if(UCSR1A & (1<<RXC1)) {
     a14:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     a18:	88 23       	and	r24, r24
     a1a:	c4 f4       	brge	.+48     	; 0xa4c <autoFulfillMode+0x6e>
			
			OUTPUT.put = UART1_transmit;
     a1c:	e6 e7       	ldi	r30, 0x76	; 118
     a1e:	f1 e0       	ldi	r31, 0x01	; 1
     a20:	8a eb       	ldi	r24, 0xBA	; 186
     a22:	98 e0       	ldi	r25, 0x08	; 8
     a24:	91 87       	std	Z+9, r25	; 0x09
     a26:	80 87       	std	Z+8, r24	; 0x08
			OUTPUT.get = NULL;
     a28:	13 86       	std	Z+11, r1	; 0x0b
     a2a:	12 86       	std	Z+10, r1	; 0x0a
			OUTPUT.flags = _FDEV_SETUP_WRITE;
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	83 83       	std	Z+3, r24	; 0x03

			INPUT.put = NULL;
     a30:	e8 e6       	ldi	r30, 0x68	; 104
     a32:	f1 e0       	ldi	r31, 0x01	; 1
     a34:	11 86       	std	Z+9, r1	; 0x09
     a36:	10 86       	std	Z+8, r1	; 0x08
			INPUT.get = UART1_receive;
     a38:	81 ec       	ldi	r24, 0xC1	; 193
     a3a:	98 e0       	ldi	r25, 0x08	; 8
     a3c:	93 87       	std	Z+11, r25	; 0x0b
     a3e:	82 87       	std	Z+10, r24	; 0x0a
			INPUT.flags = _FDEV_SETUP_READ;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	83 83       	std	Z+3, r24	; 0x03
			
			printf("\r\n get out from autoFulfuillMode\r\n");
     a44:	85 ee       	ldi	r24, 0xE5	; 229
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	ce d3       	rcall	.+1948   	; 0x11e6 <puts>
			break;
     a4a:	52 c0       	rjmp	.+164    	; 0xaf0 <autoFulfillMode+0x112>
		} 
		
		printf("n");
     a4c:	8e e6       	ldi	r24, 0x6E	; 110
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	c5 d3       	rcall	.+1930   	; 0x11dc <putchar>
		scanf("%u,%u", &row, &column);
     a52:	ce 01       	movw	r24, r28
     a54:	03 96       	adiw	r24, 0x03	; 3
     a56:	9f 93       	push	r25
     a58:	8f 93       	push	r24
     a5a:	02 97       	sbiw	r24, 0x02	; 2
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	84 e5       	ldi	r24, 0x54	; 84
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	9f 93       	push	r25
     a66:	8f 93       	push	r24
     a68:	ee d3       	rcall	.+2012   	; 0x1246 <scanf>
		
		while(row>=5||column>=9) {
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
			printf("r");
     a76:	15 c0       	rjmp	.+42     	; 0xaa2 <autoFulfillMode+0xc4>
     a78:	82 e7       	ldi	r24, 0x72	; 114
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	af d3       	rcall	.+1886   	; 0x11dc <putchar>
			scanf("%u,%u", &row, &column);
     a7e:	ce 01       	movw	r24, r28
     a80:	03 96       	adiw	r24, 0x03	; 3
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	02 97       	sbiw	r24, 0x02	; 2
     a88:	9f 93       	push	r25
     a8a:	8f 93       	push	r24
     a8c:	84 e5       	ldi	r24, 0x54	; 84
     a8e:	93 e0       	ldi	r25, 0x03	; 3
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	d8 d3       	rcall	.+1968   	; 0x1246 <scanf>
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
		} 
		
		printf("n");
		scanf("%u,%u", &row, &column);
		
		while(row>=5||column>=9) {
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	85 30       	cpi	r24, 0x05	; 5
     aa8:	91 05       	cpc	r25, r1
     aaa:	30 f7       	brcc	.-52     	; 0xa78 <autoFulfillMode+0x9a>
     aac:	6b 81       	ldd	r22, Y+3	; 0x03
     aae:	7c 81       	ldd	r23, Y+4	; 0x04
     ab0:	69 30       	cpi	r22, 0x09	; 9
     ab2:	71 05       	cpc	r23, r1
     ab4:	08 f7       	brcc	.-62     	; 0xa78 <autoFulfillMode+0x9a>
			printf("r");
			scanf("%u,%u", &row, &column);
		}
		
		if(row==4) {
     ab6:	84 30       	cpi	r24, 0x04	; 4
     ab8:	91 05       	cpc	r25, r1
     aba:	c1 f4       	brne	.+48     	; 0xaec <autoFulfillMode+0x10e>
			OUTPUT.put = UART1_transmit;
     abc:	e6 e7       	ldi	r30, 0x76	; 118
     abe:	f1 e0       	ldi	r31, 0x01	; 1
     ac0:	8a eb       	ldi	r24, 0xBA	; 186
     ac2:	98 e0       	ldi	r25, 0x08	; 8
     ac4:	91 87       	std	Z+9, r25	; 0x09
     ac6:	80 87       	std	Z+8, r24	; 0x08
			OUTPUT.get = NULL;
     ac8:	13 86       	std	Z+11, r1	; 0x0b
     aca:	12 86       	std	Z+10, r1	; 0x0a
			OUTPUT.flags = _FDEV_SETUP_WRITE;
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	83 83       	std	Z+3, r24	; 0x03

			INPUT.put = NULL;
     ad0:	e8 e6       	ldi	r30, 0x68	; 104
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	11 86       	std	Z+9, r1	; 0x09
     ad6:	10 86       	std	Z+8, r1	; 0x08
			INPUT.get = UART1_receive;
     ad8:	81 ec       	ldi	r24, 0xC1	; 193
     ada:	98 e0       	ldi	r25, 0x08	; 8
     adc:	93 87       	std	Z+11, r25	; 0x0b
			INPUT.flags = _FDEV_SETUP_READ;
     ade:	82 87       	std	Z+10, r24	; 0x0a
			
			printf("\r\n get out from autoFulfuillMode\r\n");
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	83 83       	std	Z+3, r24	; 0x03
     ae4:	85 ee       	ldi	r24, 0xE5	; 229
     ae6:	93 e0       	ldi	r25, 0x03	; 3
			break;
     ae8:	7e d3       	rcall	.+1788   	; 0x11e6 <puts>
		}
		
		fulfill(row, column);
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <autoFulfillMode+0x112>
     aec:	9a dc       	rcall	.-1740   	; 0x422 <fulfill>
	}
     aee:	92 cf       	rjmp	.-220    	; 0xa14 <autoFulfillMode+0x36>
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <MoveArm>:
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	41 f0       	breq	.+16     	; 0xb12 <MoveArm+0x14>
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b0e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b12:	61 15       	cp	r22, r1
     b14:	71 05       	cpc	r23, r1
     b16:	41 f0       	breq	.+16     	; 0xb28 <MoveArm+0x2a>
     b18:	66 0f       	add	r22, r22
     b1a:	77 1f       	adc	r23, r23
     b1c:	66 0f       	add	r22, r22
     b1e:	77 1f       	adc	r23, r23
     b20:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b24:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b28:	41 15       	cp	r20, r1
     b2a:	51 05       	cpc	r21, r1
     b2c:	41 f0       	breq	.+16     	; 0xb3e <MoveArm+0x40>
     b2e:	44 0f       	add	r20, r20
     b30:	55 1f       	adc	r21, r21
     b32:	44 0f       	add	r20, r20
     b34:	55 1f       	adc	r21, r21
     b36:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     b3a:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     b3e:	08 95       	ret

00000b40 <basePoseArm>:
     b40:	80 e8       	ldi	r24, 0x80	; 128
     b42:	9c e0       	ldi	r25, 0x0C	; 12
     b44:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b48:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b4c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b50:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	9e e0       	ldi	r25, 0x0E	; 14
     b58:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     b5c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     b60:	08 95       	ret

00000b62 <freePoseArm>:
     b62:	80 ee       	ldi	r24, 0xE0	; 224
     b64:	9e e2       	ldi	r25, 0x2E	; 46
     b66:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b6a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b6e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b72:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b76:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     b7a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     b7e:	08 95       	ret

00000b80 <closeHand>:
     b80:	80 e8       	ldi	r24, 0x80	; 128
     b82:	9c e0       	ldi	r25, 0x0C	; 12
     b84:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b88:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b8c:	08 95       	ret

00000b8e <catchHand_thin>:
     b8e:	88 ef       	ldi	r24, 0xF8	; 248
     b90:	9c e0       	ldi	r25, 0x0C	; 12
     b92:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b96:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b9a:	08 95       	ret

00000b9c <holdHand_thin>:
     b9c:	88 e4       	ldi	r24, 0x48	; 72
     b9e:	9d e0       	ldi	r25, 0x0D	; 13
     ba0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ba4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     ba8:	08 95       	ret

00000baa <openHand>:
     baa:	88 e8       	ldi	r24, 0x88	; 136
     bac:	9e e0       	ldi	r25, 0x0E	; 14
     bae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     bb2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     bb6:	08 95       	ret

00000bb8 <CWturnWrist>:
     bb8:	80 eb       	ldi	r24, 0xB0	; 176
     bba:	94 e0       	ldi	r25, 0x04	; 4
     bbc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bc0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bc4:	08 95       	ret

00000bc6 <normalWrist>:
     bc6:	80 e8       	ldi	r24, 0x80	; 128
     bc8:	9c e0       	ldi	r25, 0x0C	; 12
     bca:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bce:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bd2:	08 95       	ret

00000bd4 <innerTurnElbow>:
     bd4:	88 ed       	ldi	r24, 0xD8	; 216
     bd6:	94 e0       	ldi	r25, 0x04	; 4
     bd8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     bdc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     be0:	08 95       	ret

00000be2 <normalTurnElbow>:
     be2:	80 e1       	ldi	r24, 0x10	; 16
     be4:	9e e0       	ldi	r25, 0x0E	; 14
     be6:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     bea:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     bee:	08 95       	ret

00000bf0 <set_V_Enable>:
     bf0:	88 b3       	in	r24, 0x18	; 24
     bf2:	8b 7f       	andi	r24, 0xFB	; 251
     bf4:	88 bb       	out	0x18, r24	; 24
     bf6:	08 95       	ret

00000bf8 <set_V_Disable>:
     bf8:	88 b3       	in	r24, 0x18	; 24
     bfa:	84 60       	ori	r24, 0x04	; 4
     bfc:	88 bb       	out	0x18, r24	; 24
     bfe:	08 95       	ret

00000c00 <set_V_Up>:
     c00:	88 b3       	in	r24, 0x18	; 24
     c02:	87 7f       	andi	r24, 0xF7	; 247
     c04:	88 bb       	out	0x18, r24	; 24
     c06:	08 95       	ret

00000c08 <set_V_Down>:
     c08:	88 b3       	in	r24, 0x18	; 24
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	88 bb       	out	0x18, r24	; 24
     c0e:	08 95       	ret

00000c10 <set_H_Enable>:
     c10:	88 b3       	in	r24, 0x18	; 24
     c12:	8f 7d       	andi	r24, 0xDF	; 223
     c14:	88 bb       	out	0x18, r24	; 24
     c16:	08 95       	ret

00000c18 <set_H_Disable>:
     c18:	88 b3       	in	r24, 0x18	; 24
     c1a:	80 62       	ori	r24, 0x20	; 32
     c1c:	88 bb       	out	0x18, r24	; 24
     c1e:	08 95       	ret

00000c20 <set_H_Right>:
     c20:	88 b3       	in	r24, 0x18	; 24
     c22:	8f 7b       	andi	r24, 0xBF	; 191
     c24:	88 bb       	out	0x18, r24	; 24
     c26:	08 95       	ret

00000c28 <set_H_Left>:
     c28:	88 b3       	in	r24, 0x18	; 24
     c2a:	80 64       	ori	r24, 0x40	; 64
     c2c:	88 bb       	out	0x18, r24	; 24
     c2e:	08 95       	ret

00000c30 <V_MoveStart>:
     c30:	83 b7       	in	r24, 0x33	; 51
     c32:	80 61       	ori	r24, 0x10	; 16
     c34:	83 bf       	out	0x33, r24	; 51
     c36:	83 b7       	in	r24, 0x33	; 51
     c38:	8f 7d       	andi	r24, 0xDF	; 223
     c3a:	83 bf       	out	0x33, r24	; 51
     c3c:	08 95       	ret

00000c3e <V_MoveStop>:
     c3e:	83 b7       	in	r24, 0x33	; 51
     c40:	8f 7e       	andi	r24, 0xEF	; 239
     c42:	83 bf       	out	0x33, r24	; 51
     c44:	83 b7       	in	r24, 0x33	; 51
     c46:	80 62       	ori	r24, 0x20	; 32
     c48:	83 bf       	out	0x33, r24	; 51
     c4a:	08 95       	ret

00000c4c <H_MoveStart>:
     c4c:	85 b5       	in	r24, 0x25	; 37
     c4e:	80 61       	ori	r24, 0x10	; 16
     c50:	85 bd       	out	0x25, r24	; 37
     c52:	85 b5       	in	r24, 0x25	; 37
     c54:	8f 7d       	andi	r24, 0xDF	; 223
     c56:	85 bd       	out	0x25, r24	; 37
     c58:	08 95       	ret

00000c5a <H_MoveStop>:
     c5a:	85 b5       	in	r24, 0x25	; 37
     c5c:	8f 7e       	andi	r24, 0xEF	; 239
     c5e:	85 bd       	out	0x25, r24	; 37
     c60:	85 b5       	in	r24, 0x25	; 37
     c62:	80 62       	ori	r24, 0x20	; 32
     c64:	85 bd       	out	0x25, r24	; 37
     c66:	08 95       	ret

00000c68 <MoveXY_relative>:
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	ec 01       	movw	r28, r24
     c72:	8b 01       	movw	r16, r22
     c74:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <curX>
     c78:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <curX+0x1>
     c7c:	8c 0f       	add	r24, r28
     c7e:	9d 1f       	adc	r25, r29
     c80:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <curX+0x1>
     c84:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <curX>
     c88:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <curY>
     c8c:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <curY+0x1>
     c90:	86 0f       	add	r24, r22
     c92:	97 1f       	adc	r25, r23
     c94:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <curY+0x1>
     c98:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <curY>
     c9c:	dd 23       	and	r29, r29
     c9e:	14 f0       	brlt	.+4      	; 0xca4 <MoveXY_relative+0x3c>
     ca0:	bf df       	rcall	.-130    	; 0xc20 <set_H_Right>
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <MoveXY_relative+0x44>
     ca4:	c1 df       	rcall	.-126    	; 0xc28 <set_H_Left>
     ca6:	d1 95       	neg	r29
     ca8:	c1 95       	neg	r28
     caa:	d1 09       	sbc	r29, r1
     cac:	11 23       	and	r17, r17
     cae:	14 f0       	brlt	.+4      	; 0xcb4 <MoveXY_relative+0x4c>
     cb0:	a7 df       	rcall	.-178    	; 0xc00 <set_V_Up>
     cb2:	04 c0       	rjmp	.+8      	; 0xcbc <MoveXY_relative+0x54>
     cb4:	a9 df       	rcall	.-174    	; 0xc08 <set_V_Down>
     cb6:	11 95       	neg	r17
     cb8:	01 95       	neg	r16
     cba:	11 09       	sbc	r17, r1
     cbc:	1d bc       	out	0x2d, r1	; 45
     cbe:	1c bc       	out	0x2c, r1	; 44
     cc0:	20 97       	sbiw	r28, 0x00	; 0
     cc2:	29 f0       	breq	.+10     	; 0xcce <MoveXY_relative+0x66>
     cc4:	c3 df       	rcall	.-122    	; 0xc4c <H_MoveStart>
     cc6:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <h_stopFlag+0x1>
     cca:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <h_stopFlag>
     cce:	01 15       	cp	r16, r1
     cd0:	11 05       	cpc	r17, r1
     cd2:	29 f0       	breq	.+10     	; 0xcde <MoveXY_relative+0x76>
     cd4:	ad df       	rcall	.-166    	; 0xc30 <V_MoveStart>
     cd6:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <v_stopFlag+0x1>
     cda:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <v_stopFlag>
     cde:	ce 01       	movw	r24, r28
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	cc 0f       	add	r28, r28
     ce6:	dd 1f       	adc	r29, r29
     ce8:	cc 0f       	add	r28, r28
     cea:	dd 1f       	adc	r29, r29
     cec:	cc 0f       	add	r28, r28
     cee:	dd 1f       	adc	r29, r29
     cf0:	c8 0f       	add	r28, r24
     cf2:	d9 1f       	adc	r29, r25
     cf4:	d0 93 9d 04 	sts	0x049D, r29	; 0x80049d <h_ms+0x1>
     cf8:	c0 93 9c 04 	sts	0x049C, r28	; 0x80049c <h_ms>
     cfc:	29 e1       	ldi	r18, 0x19	; 25
     cfe:	20 9f       	mul	r18, r16
     d00:	c0 01       	movw	r24, r0
     d02:	21 9f       	mul	r18, r17
     d04:	90 0d       	add	r25, r0
     d06:	11 24       	eor	r1, r1
     d08:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <__data_end+0x1>
     d0c:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <__data_end>
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	08 95       	ret

00000d1a <MoveXY_absolute>:
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <curX>
     d2e:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <curX+0x1>
     d32:	6c 01       	movw	r12, r24
     d34:	c2 1a       	sub	r12, r18
     d36:	d3 0a       	sbc	r13, r19
     d38:	e6 01       	movw	r28, r12
     d3a:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <curY>
     d3e:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <curY+0x1>
     d42:	7b 01       	movw	r14, r22
     d44:	e2 1a       	sub	r14, r18
     d46:	f3 0a       	sbc	r15, r19
     d48:	87 01       	movw	r16, r14
     d4a:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <curX+0x1>
     d4e:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <curX>
     d52:	70 93 9f 04 	sts	0x049F, r23	; 0x80049f <curY+0x1>
     d56:	60 93 9e 04 	sts	0x049E, r22	; 0x80049e <curY>
     d5a:	dd 23       	and	r29, r29
     d5c:	14 f0       	brlt	.+4      	; 0xd62 <MoveXY_absolute+0x48>
     d5e:	60 df       	rcall	.-320    	; 0xc20 <set_H_Right>
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <MoveXY_absolute+0x52>
     d62:	62 df       	rcall	.-316    	; 0xc28 <set_H_Left>
     d64:	cc 27       	eor	r28, r28
     d66:	dd 27       	eor	r29, r29
     d68:	cc 19       	sub	r28, r12
     d6a:	dd 09       	sbc	r29, r13
     d6c:	11 23       	and	r17, r17
     d6e:	14 f0       	brlt	.+4      	; 0xd74 <MoveXY_absolute+0x5a>
     d70:	47 df       	rcall	.-370    	; 0xc00 <set_V_Up>
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <MoveXY_absolute+0x64>
     d74:	49 df       	rcall	.-366    	; 0xc08 <set_V_Down>
     d76:	00 27       	eor	r16, r16
     d78:	11 27       	eor	r17, r17
     d7a:	0e 19       	sub	r16, r14
     d7c:	1f 09       	sbc	r17, r15
     d7e:	1d bc       	out	0x2d, r1	; 45
     d80:	1c bc       	out	0x2c, r1	; 44
     d82:	20 97       	sbiw	r28, 0x00	; 0
     d84:	29 f0       	breq	.+10     	; 0xd90 <MoveXY_absolute+0x76>
     d86:	62 df       	rcall	.-316    	; 0xc4c <H_MoveStart>
     d88:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <h_stopFlag+0x1>
     d8c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <h_stopFlag>
     d90:	01 15       	cp	r16, r1
     d92:	11 05       	cpc	r17, r1
     d94:	29 f0       	breq	.+10     	; 0xda0 <MoveXY_absolute+0x86>
     d96:	4c df       	rcall	.-360    	; 0xc30 <V_MoveStart>
     d98:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <v_stopFlag+0x1>
     d9c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <v_stopFlag>
     da0:	ce 01       	movw	r24, r28
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	cc 0f       	add	r28, r28
     da8:	dd 1f       	adc	r29, r29
     daa:	cc 0f       	add	r28, r28
     dac:	dd 1f       	adc	r29, r29
     dae:	cc 0f       	add	r28, r28
     db0:	dd 1f       	adc	r29, r29
     db2:	c8 0f       	add	r28, r24
     db4:	d9 1f       	adc	r29, r25
     db6:	d0 93 9d 04 	sts	0x049D, r29	; 0x80049d <h_ms+0x1>
     dba:	c0 93 9c 04 	sts	0x049C, r28	; 0x80049c <h_ms>
     dbe:	29 e1       	ldi	r18, 0x19	; 25
     dc0:	20 9f       	mul	r18, r16
     dc2:	c0 01       	movw	r24, r0
     dc4:	21 9f       	mul	r18, r17
     dc6:	90 0d       	add	r25, r0
     dc8:	11 24       	eor	r1, r1
     dca:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <__data_end+0x1>
     dce:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <__data_end>
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	08 95       	ret

00000de4 <pauseUntilStop>:
     de4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <h_stopFlag>
     de8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <h_stopFlag+0x1>
     dec:	89 2b       	or	r24, r25
     dee:	d1 f3       	breq	.-12     	; 0xde4 <pauseUntilStop>
     df0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <v_stopFlag>
     df4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <v_stopFlag+0x1>
     df8:	89 2b       	or	r24, r25
     dfa:	a1 f3       	breq	.-24     	; 0xde4 <pauseUntilStop>
     dfc:	08 95       	ret

00000dfe <InitializeTimer0>:
     dfe:	87 b3       	in	r24, 0x17	; 23
     e00:	80 61       	ori	r24, 0x10	; 16
     e02:	87 bb       	out	0x17, r24	; 23
     e04:	83 b7       	in	r24, 0x33	; 51
     e06:	88 60       	ori	r24, 0x08	; 8
     e08:	83 bf       	out	0x33, r24	; 51
     e0a:	83 b7       	in	r24, 0x33	; 51
     e0c:	8f 7e       	andi	r24, 0xEF	; 239
     e0e:	83 bf       	out	0x33, r24	; 51
     e10:	83 b7       	in	r24, 0x33	; 51
     e12:	80 62       	ori	r24, 0x20	; 32
     e14:	83 bf       	out	0x33, r24	; 51
     e16:	83 b7       	in	r24, 0x33	; 51
     e18:	81 60       	ori	r24, 0x01	; 1
     e1a:	83 bf       	out	0x33, r24	; 51
     e1c:	83 b7       	in	r24, 0x33	; 51
     e1e:	82 60       	ori	r24, 0x02	; 2
     e20:	83 bf       	out	0x33, r24	; 51
     e22:	8c e7       	ldi	r24, 0x7C	; 124
     e24:	81 bf       	out	0x31, r24	; 49
     e26:	08 95       	ret

00000e28 <InitializeTimer2>:
     e28:	87 b3       	in	r24, 0x17	; 23
     e2a:	80 68       	ori	r24, 0x80	; 128
     e2c:	87 bb       	out	0x17, r24	; 23
     e2e:	85 b5       	in	r24, 0x25	; 37
     e30:	88 60       	ori	r24, 0x08	; 8
     e32:	85 bd       	out	0x25, r24	; 37
     e34:	85 b5       	in	r24, 0x25	; 37
     e36:	8f 7e       	andi	r24, 0xEF	; 239
     e38:	85 bd       	out	0x25, r24	; 37
     e3a:	85 b5       	in	r24, 0x25	; 37
     e3c:	80 62       	ori	r24, 0x20	; 32
     e3e:	85 bd       	out	0x25, r24	; 37
     e40:	85 b5       	in	r24, 0x25	; 37
     e42:	81 60       	ori	r24, 0x01	; 1
     e44:	85 bd       	out	0x25, r24	; 37
     e46:	85 b5       	in	r24, 0x25	; 37
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	85 bd       	out	0x25, r24	; 37
     e4c:	8c e7       	ldi	r24, 0x7C	; 124
     e4e:	83 bd       	out	0x23, r24	; 35
     e50:	08 95       	ret

00000e52 <InitializeTimer1>:
     e52:	8f b5       	in	r24, 0x2f	; 47
     e54:	82 60       	ori	r24, 0x02	; 2
     e56:	8f bd       	out	0x2f, r24	; 47
     e58:	8e b5       	in	r24, 0x2e	; 46
     e5a:	88 61       	ori	r24, 0x18	; 24
     e5c:	8e bd       	out	0x2e, r24	; 46
     e5e:	8e b5       	in	r24, 0x2e	; 46
     e60:	81 60       	ori	r24, 0x01	; 1
     e62:	8e bd       	out	0x2e, r24	; 46
     e64:	8f e7       	ldi	r24, 0x7F	; 127
     e66:	9e e3       	ldi	r25, 0x3E	; 62
     e68:	97 bd       	out	0x27, r25	; 39
     e6a:	86 bd       	out	0x26, r24	; 38
     e6c:	87 b7       	in	r24, 0x37	; 55
     e6e:	84 60       	ori	r24, 0x04	; 4
     e70:	87 bf       	out	0x37, r24	; 55
     e72:	08 95       	ret

00000e74 <InitializeTimer3>:
     e74:	82 b1       	in	r24, 0x02	; 2
     e76:	88 63       	ori	r24, 0x38	; 56
     e78:	82 b9       	out	0x02, r24	; 2
     e7a:	eb e8       	ldi	r30, 0x8B	; 139
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	82 60       	ori	r24, 0x02	; 2
     e82:	80 83       	st	Z, r24
     e84:	aa e8       	ldi	r26, 0x8A	; 138
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	8c 91       	ld	r24, X
     e8a:	88 61       	ori	r24, 0x18	; 24
     e8c:	8c 93       	st	X, r24
     e8e:	80 81       	ld	r24, Z
     e90:	8f 7b       	andi	r24, 0xBF	; 191
     e92:	80 83       	st	Z, r24
     e94:	80 81       	ld	r24, Z
     e96:	80 68       	ori	r24, 0x80	; 128
     e98:	80 83       	st	Z, r24
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 7e       	andi	r24, 0xEF	; 239
     e9e:	80 83       	st	Z, r24
     ea0:	80 81       	ld	r24, Z
     ea2:	80 62       	ori	r24, 0x20	; 32
     ea4:	80 83       	st	Z, r24
     ea6:	80 81       	ld	r24, Z
     ea8:	8b 7f       	andi	r24, 0xFB	; 251
     eaa:	80 83       	st	Z, r24
     eac:	80 81       	ld	r24, Z
     eae:	88 60       	ori	r24, 0x08	; 8
     eb0:	80 83       	st	Z, r24
     eb2:	8c 91       	ld	r24, X
     eb4:	82 60       	ori	r24, 0x02	; 2
     eb6:	8c 93       	st	X, r24
     eb8:	80 e4       	ldi	r24, 0x40	; 64
     eba:	9c e9       	ldi	r25, 0x9C	; 156
     ebc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ec0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     ec4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ec8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ecc:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     ed0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     ed4:	8f e3       	ldi	r24, 0x3F	; 63
     ed6:	9c e9       	ldi	r25, 0x9C	; 156
     ed8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     edc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ee0:	08 95       	ret

00000ee2 <__vector_1>:
//--------------------------------------------------------------------




ISR(INT0_vect) {//emergency switch
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	0b b6       	in	r0, 0x3b	; 59
     eee:	0f 92       	push	r0
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
	freePoseArm();
     f08:	2c de       	rcall	.-936    	; 0xb62 <freePoseArm>
	printf("\r\n\r\n!!!!INT0 set!!!!!\r\n\r\n");
     f0a:	87 e0       	ldi	r24, 0x07	; 7
     f0c:	94 e0       	ldi	r25, 0x04	; 4
     f0e:	6b d1       	rcall	.+726    	; 0x11e6 <puts>
	
	//set_V_Disable();//PORTC0 low : disable vertical motor
	//set_H_Disable();//PORTC4 low : disable horizontal motor
}
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	0b be       	out	0x3b, r0	; 59
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	0f 90       	pop	r0
     f32:	1f 90       	pop	r1
     f34:	18 95       	reti

00000f36 <__vector_14>:

ISR(TIMER1_OVF_vect) {
     f36:	1f 92       	push	r1
     f38:	0f 92       	push	r0
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	0f 92       	push	r0
     f3e:	11 24       	eor	r1, r1
     f40:	0b b6       	in	r0, 0x3b	; 59
     f42:	0f 92       	push	r0
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
	if(h_ms != -1) h_ms--;
     f5c:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <h_ms>
     f60:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <h_ms+0x1>
     f64:	8f 3f       	cpi	r24, 0xFF	; 255
     f66:	2f ef       	ldi	r18, 0xFF	; 255
     f68:	92 07       	cpc	r25, r18
     f6a:	29 f0       	breq	.+10     	; 0xf76 <__vector_14+0x40>
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <h_ms+0x1>
     f72:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <h_ms>
	if(v_ms != -1) v_ms--;
     f76:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__data_end>
     f7a:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__data_end+0x1>
     f7e:	8f 3f       	cpi	r24, 0xFF	; 255
     f80:	2f ef       	ldi	r18, 0xFF	; 255
     f82:	92 07       	cpc	r25, r18
     f84:	29 f0       	breq	.+10     	; 0xf90 <__vector_14+0x5a>
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <__data_end+0x1>
     f8c:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <__data_end>
	
	if(h_ms == 0) {
     f90:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <h_ms>
     f94:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <h_ms+0x1>
     f98:	89 2b       	or	r24, r25
     f9a:	39 f4       	brne	.+14     	; 0xfaa <__vector_14+0x74>
		H_MoveStop();
     f9c:	5e de       	rcall	.-836    	; 0xc5a <H_MoveStop>
		h_stopFlag = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <h_stopFlag+0x1>
     fa6:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <h_stopFlag>
	}
	if(v_ms == 0) {
     faa:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__data_end>
     fae:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__data_end+0x1>
     fb2:	89 2b       	or	r24, r25
		V_MoveStop();
     fb4:	39 f4       	brne	.+14     	; 0xfc4 <__vector_14+0x8e>
     fb6:	43 de       	rcall	.-890    	; 0xc3e <V_MoveStop>
		v_stopFlag = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <v_stopFlag+0x1>
     fc0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <v_stopFlag>
	}
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <main>:


int main(void)
{
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	64 97       	sbiw	r28, 0x14	; 20
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1 << PORTB2) | (1 << PORTB3);//vertical, PORTB2 : EN, PORTB3 : CW;
     ffe:	87 b3       	in	r24, 0x17	; 23
    1000:	8c 60       	ori	r24, 0x0C	; 12
    1002:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PORTB5) | (1 << PORTB6);//horizontal, PORTB5 : EN, PORTB6 : CW;
    1004:	87 b3       	in	r24, 0x17	; 23
    1006:	80 66       	ori	r24, 0x60	; 96
    1008:	87 bb       	out	0x17, r24	; 23

	PORTB &= ~(1 << PORTB2);//PORTC0 low : enable vertical motor
    100a:	88 b3       	in	r24, 0x18	; 24
    100c:	8b 7f       	andi	r24, 0xFB	; 251
    100e:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1 << PORTB5);//PORTC4 low : enable horizontal motor
    1010:	88 b3       	in	r24, 0x18	; 24
    1012:	8f 7d       	andi	r24, 0xDF	; 223
    1014:	88 bb       	out	0x18, r24	; 24

	//T/C enable
	InitializeTimer0();//vertical step motor PWM channel
    1016:	f3 de       	rcall	.-538    	; 0xdfe <InitializeTimer0>
	InitializeTimer2();//horizontal step motor PWM channel
    1018:	07 df       	rcall	.-498    	; 0xe28 <InitializeTimer2>
	InitializeTimer3();//robot arm servo motor PWM channel
    101a:	2c df       	rcall	.-424    	; 0xe74 <InitializeTimer3>
    101c:	1a df       	rcall	.-460    	; 0xe52 <InitializeTimer1>
	
	InitializeTimer1();//user timer
    101e:	87 b7       	in	r24, 0x37	; 55
    1020:	84 60       	ori	r24, 0x04	; 4
	TIMSK |= (1<<TOIE1); //T/C1 overflow interrupt enable
    1022:	87 bf       	out	0x37, r24	; 55
    1024:	81 b3       	in	r24, 0x11	; 17
    1026:	8e 7f       	andi	r24, 0xFE	; 254
	
	//emergency button interrupt enable
	DDRD &= ~(1<<PORTD0);
    1028:	81 bb       	out	0x11, r24	; 17
    102a:	82 b3       	in	r24, 0x12	; 18
    102c:	81 60       	ori	r24, 0x01	; 1
	PORTD |= (1<<PORTD0);
    102e:	82 bb       	out	0x12, r24	; 18
    1030:	89 b7       	in	r24, 0x39	; 57
    1032:	81 60       	ori	r24, 0x01	; 1
	EIMSK |= (1<<INT0);
    1034:	89 bf       	out	0x39, r24	; 57
    1036:	ea e6       	ldi	r30, 0x6A	; 106
    1038:	f0 e0       	ldi	r31, 0x00	; 0
	EICRA |= (1<<ISC01);
    103a:	80 81       	ld	r24, Z
    103c:	82 60       	ori	r24, 0x02	; 2
    103e:	80 83       	st	Z, r24
    1040:	78 94       	sei
	
	sei();
    1042:	80 d0       	rcall	.+256    	; 0x1144 <UART1_init>
	
	UART1_init();
    1044:	e2 ea       	ldi	r30, 0xA2	; 162
    1046:	f4 e0       	ldi	r31, 0x04	; 4
	stdout = &OUTPUT;
    1048:	86 e7       	ldi	r24, 0x76	; 118
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	93 83       	std	Z+3, r25	; 0x03
    104e:	82 83       	std	Z+2, r24	; 0x02
    1050:	88 e6       	ldi	r24, 0x68	; 104
	stdin = &INPUT;
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	80 83       	st	Z, r24
	
	UART0_init();
    1058:	5a d0       	rcall	.+180    	; 0x110e <UART0_init>
    105a:	72 dd       	rcall	.-1308   	; 0xb40 <basePoseArm>
	
	
	basePoseArm();
    105c:	2f ef       	ldi	r18, 0xFF	; 255
    105e:	83 e2       	ldi	r24, 0x23	; 35
    1060:	94 ef       	ldi	r25, 0xF4	; 244
    1062:	21 50       	subi	r18, 0x01	; 1
    1064:	80 40       	sbci	r24, 0x00	; 0
    1066:	90 40       	sbci	r25, 0x00	; 0
    1068:	e1 f7       	brne	.-8      	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    106a:	00 c0       	rjmp	.+0      	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    106c:	00 00       	nop
    106e:	80 e3       	ldi	r24, 0x30	; 48
    1070:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(5000);
	
	int wronginput;
	char uartBuffer[20] = "0";
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	fe 01       	movw	r30, r28
    1078:	33 96       	adiw	r30, 0x03	; 3
    107a:	82 e1       	ldi	r24, 0x12	; 18
    107c:	df 01       	movw	r26, r30
    107e:	1d 92       	st	X+, r1
    1080:	8a 95       	dec	r24
    1082:	e9 f7       	brne	.-6      	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
    1084:	80 e2       	ldi	r24, 0x20	; 32

	while(1) {
		do {
			wronginput = 0;
			
			printf("TestMode(1), manualFulfillMode(2), manualMode(3), setHereAs[0,0](4), autoFulfillMode(5)?");
    1086:	94 e0       	ldi	r25, 0x04	; 4
    1088:	9f 93       	push	r25
    108a:	8f 93       	push	r24
    108c:	94 d0       	rcall	.+296    	; 0x11b6 <printf>
    108e:	8e 01       	movw	r16, r28
    1090:	0f 5f       	subi	r16, 0xFF	; 255
			scanf("%s", uartBuffer);
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	1f 93       	push	r17
    1096:	0f 93       	push	r16
    1098:	83 ec       	ldi	r24, 0xC3	; 195
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	9f 93       	push	r25
    109e:	8f 93       	push	r24
    10a0:	d2 d0       	rcall	.+420    	; 0x1246 <scanf>
    10a2:	66 ec       	ldi	r22, 0xC6	; 198
			
			if(strcasecmp(uartBuffer, "1")==0) 
    10a4:	71 e0       	ldi	r23, 0x01	; 1
    10a6:	c8 01       	movw	r24, r16
    10a8:	73 d0       	rcall	.+230    	; 0x1190 <strcasecmp>
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	89 2b       	or	r24, r25
    10b8:	11 f4       	brne	.+4      	; 0x10be <__DATA_REGION_LENGTH__+0xbe>
				testMode();
    10ba:	0d d8       	rcall	.-4070   	; 0xd6 <testMode>
    10bc:	e3 cf       	rjmp	.-58     	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
			else if (strcasecmp(uartBuffer, "2")==0) 
    10be:	68 ec       	ldi	r22, 0xC8	; 200
    10c0:	71 e0       	ldi	r23, 0x01	; 1
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	64 d0       	rcall	.+200    	; 0x1190 <strcasecmp>
    10c8:	89 2b       	or	r24, r25
				manualFulfillMode();
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    10cc:	99 db       	rcall	.-2254   	; 0x800 <manualFulfillMode>
    10ce:	da cf       	rjmp	.-76     	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
			else if (strcasecmp(uartBuffer, "3")==0)
    10d0:	6a ec       	ldi	r22, 0xCA	; 202
    10d2:	71 e0       	ldi	r23, 0x01	; 1
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	5b d0       	rcall	.+182    	; 0x1190 <strcasecmp>
    10da:	89 2b       	or	r24, r25
				manualMode();
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
    10de:	ff da       	rcall	.-2562   	; 0x6de <manualMode>
			else if (strcasecmp(uartBuffer, "4")==0)
    10e0:	d1 cf       	rjmp	.-94     	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
    10e2:	69 e7       	ldi	r22, 0x79	; 121
    10e4:	74 e0       	ldi	r23, 0x04	; 4
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	52 d0       	rcall	.+164    	; 0x1190 <strcasecmp>
				setHereas00();
    10ec:	89 2b       	or	r24, r25
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__DATA_REGION_LENGTH__+0xf4>
    10f0:	7e db       	rcall	.-2308   	; 0x7ee <setHereas00>
			else if (strcasecmp(uartBuffer, "5")==0)
    10f2:	c8 cf       	rjmp	.-112    	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
    10f4:	6b e7       	ldi	r22, 0x7B	; 123
    10f6:	74 e0       	ldi	r23, 0x04	; 4
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	49 d0       	rcall	.+146    	; 0x1190 <strcasecmp>
    10fe:	89 2b       	or	r24, r25
    1100:	11 f4       	brne	.+4      	; 0x1106 <__stack+0x7>
				autoFulfillMode();
    1102:	6d dc       	rcall	.-1830   	; 0x9de <autoFulfillMode>
    1104:	bf cf       	rjmp	.-130    	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
    1106:	8d e7       	ldi	r24, 0x7D	; 125
			else{
				printf("input '1', '2', '3' or '4'\r\n");
    1108:	94 e0       	ldi	r25, 0x04	; 4
    110a:	6d d0       	rcall	.+218    	; 0x11e6 <puts>
    110c:	bb cf       	rjmp	.-138    	; 0x1084 <__DATA_REGION_LENGTH__+0x84>

0000110e <UART0_init>:
#include <avr/io.h>
#include "UART0.h"

void UART0_init(void)
{
	UBRR0H = 0x00;			// 9600 ??? ??
    110e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;
    1112:	8f ec       	ldi	r24, 0xCF	; 207
    1114:	89 b9       	out	0x09, r24	; 9
	UCSR0A |= 1<<U2X0;			// 2?? ??
    1116:	8b b1       	in	r24, 0x0b	; 11
    1118:	82 60       	ori	r24, 0x02	; 2
    111a:	8b b9       	out	0x0b, r24	; 11
	// ???, 8?? ???, ??? ??, 1?? ?? ?? ??
	UCSR0C |= 0x06;
    111c:	e5 e9       	ldi	r30, 0x95	; 149
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	86 60       	ori	r24, 0x06	; 6
    1124:	80 83       	st	Z, r24
	
	UCSR0B |= 1<<RXEN0;		// ??? ??
    1126:	8a b1       	in	r24, 0x0a	; 10
    1128:	80 61       	ori	r24, 0x10	; 16
    112a:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= 1<<TXEN0;
    112c:	8a b1       	in	r24, 0x0a	; 10
    112e:	88 60       	ori	r24, 0x08	; 8
    1130:	8a b9       	out	0x0a, r24	; 10
    1132:	08 95       	ret

00001134 <UART0_transmit>:
}

void UART0_transmit(char data)
{
	while( !(UCSR0A & (1 << UDRE0)) );	// ?? ?? ??
    1134:	5d 9b       	sbis	0x0b, 5	; 11
    1136:	fe cf       	rjmp	.-4      	; 0x1134 <UART0_transmit>
	UDR0 = data;				// ??? ??
    1138:	8c b9       	out	0x0c, r24	; 12
    113a:	08 95       	ret

0000113c <UART0_receive>:
}

unsigned char UART0_receive(void)
{
	while( !(UCSR0A & (1<<RXC0)) );	// ??? ?? ??
    113c:	5f 9b       	sbis	0x0b, 7	; 11
    113e:	fe cf       	rjmp	.-4      	; 0x113c <UART0_receive>
	return UDR0;
    1140:	8c b1       	in	r24, 0x0c	; 12
}
    1142:	08 95       	ret

00001144 <UART1_init>:
﻿#include <avr/io.h>
#include "UART1.h"

void UART1_init(void)
{
	UBRR1H = 0x00;			// 9600 보율로 설정
    1144:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;
    1148:	8f ec       	ldi	r24, 0xCF	; 207
    114a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= 1<<U2X1;			// 2배속 모드
    114e:	eb e9       	ldi	r30, 0x9B	; 155
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	80 83       	st	Z, r24
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR1C |= 0x06;
    1158:	ed e9       	ldi	r30, 0x9D	; 157
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	86 60       	ori	r24, 0x06	; 6
    1160:	80 83       	st	Z, r24
	
	UCSR1B |= 1<<RXEN1;		// 송수신 가능
    1162:	ea e9       	ldi	r30, 0x9A	; 154
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	80 61       	ori	r24, 0x10	; 16
    116a:	80 83       	st	Z, r24
	UCSR1B |= 1<<TXEN1;
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	80 83       	st	Z, r24
    1172:	08 95       	ret

00001174 <UART1_transmit>:
}

void UART1_transmit(char data)
{
	while( !(UCSR1A & (1 << UDRE1)) );	// 송신 가능 대기
    1174:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1178:	95 ff       	sbrs	r25, 5
    117a:	fc cf       	rjmp	.-8      	; 0x1174 <UART1_transmit>
	UDR1 = data;				// 데이터 전송
    117c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1180:	08 95       	ret

00001182 <UART1_receive>:
}

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );	// 데이터 수신 대기
    1182:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1186:	88 23       	and	r24, r24
    1188:	e4 f7       	brge	.-8      	; 0x1182 <UART1_receive>
	return UDR1;
    118a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
    118e:	08 95       	ret

00001190 <strcasecmp>:
    1190:	fb 01       	movw	r30, r22
    1192:	dc 01       	movw	r26, r24
    1194:	8d 91       	ld	r24, X+
    1196:	81 34       	cpi	r24, 0x41	; 65
    1198:	1c f0       	brlt	.+6      	; 0x11a0 <strcasecmp+0x10>
    119a:	8b 35       	cpi	r24, 0x5B	; 91
    119c:	0c f4       	brge	.+2      	; 0x11a0 <strcasecmp+0x10>
    119e:	80 5e       	subi	r24, 0xE0	; 224
    11a0:	61 91       	ld	r22, Z+
    11a2:	61 34       	cpi	r22, 0x41	; 65
    11a4:	1c f0       	brlt	.+6      	; 0x11ac <strcasecmp+0x1c>
    11a6:	6b 35       	cpi	r22, 0x5B	; 91
    11a8:	0c f4       	brge	.+2      	; 0x11ac <strcasecmp+0x1c>
    11aa:	60 5e       	subi	r22, 0xE0	; 224
    11ac:	86 1b       	sub	r24, r22
    11ae:	61 11       	cpse	r22, r1
    11b0:	89 f3       	breq	.-30     	; 0x1194 <strcasecmp+0x4>
    11b2:	99 0b       	sbc	r25, r25
    11b4:	08 95       	ret

000011b6 <printf>:
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	ae 01       	movw	r20, r28
    11c0:	4b 5f       	subi	r20, 0xFB	; 251
    11c2:	5f 4f       	sbci	r21, 0xFF	; 255
    11c4:	fa 01       	movw	r30, r20
    11c6:	61 91       	ld	r22, Z+
    11c8:	71 91       	ld	r23, Z+
    11ca:	af 01       	movw	r20, r30
    11cc:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__iob+0x2>
    11d0:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <__iob+0x3>
    11d4:	4b d0       	rcall	.+150    	; 0x126c <vfprintf>
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <putchar>:
    11dc:	60 91 a4 04 	lds	r22, 0x04A4	; 0x8004a4 <__iob+0x2>
    11e0:	70 91 a5 04 	lds	r23, 0x04A5	; 0x8004a5 <__iob+0x3>
    11e4:	70 c5       	rjmp	.+2784   	; 0x1cc6 <fputc>

000011e6 <puts>:
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <__iob+0x2>
    11f2:	f0 91 a5 04 	lds	r31, 0x04A5	; 0x8004a5 <__iob+0x3>
    11f6:	23 81       	ldd	r18, Z+3	; 0x03
    11f8:	21 ff       	sbrs	r18, 1
    11fa:	1b c0       	rjmp	.+54     	; 0x1232 <puts+0x4c>
    11fc:	8c 01       	movw	r16, r24
    11fe:	d0 e0       	ldi	r29, 0x00	; 0
    1200:	c0 e0       	ldi	r28, 0x00	; 0
    1202:	f8 01       	movw	r30, r16
    1204:	81 91       	ld	r24, Z+
    1206:	8f 01       	movw	r16, r30
    1208:	60 91 a4 04 	lds	r22, 0x04A4	; 0x8004a4 <__iob+0x2>
    120c:	70 91 a5 04 	lds	r23, 0x04A5	; 0x8004a5 <__iob+0x3>
    1210:	db 01       	movw	r26, r22
    1212:	18 96       	adiw	r26, 0x08	; 8
    1214:	ed 91       	ld	r30, X+
    1216:	fc 91       	ld	r31, X
    1218:	19 97       	sbiw	r26, 0x09	; 9
    121a:	88 23       	and	r24, r24
    121c:	31 f0       	breq	.+12     	; 0x122a <puts+0x44>
    121e:	09 95       	icall
    1220:	89 2b       	or	r24, r25
    1222:	79 f3       	breq	.-34     	; 0x1202 <puts+0x1c>
    1224:	df ef       	ldi	r29, 0xFF	; 255
    1226:	cf ef       	ldi	r28, 0xFF	; 255
    1228:	ec cf       	rjmp	.-40     	; 0x1202 <puts+0x1c>
    122a:	8a e0       	ldi	r24, 0x0A	; 10
    122c:	09 95       	icall
    122e:	89 2b       	or	r24, r25
    1230:	19 f0       	breq	.+6      	; 0x1238 <puts+0x52>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	02 c0       	rjmp	.+4      	; 0x123c <puts+0x56>
    1238:	8d 2f       	mov	r24, r29
    123a:	9c 2f       	mov	r25, r28
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	08 95       	ret

00001246 <scanf>:
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	ae 01       	movw	r20, r28
    1250:	4b 5f       	subi	r20, 0xFB	; 251
    1252:	5f 4f       	sbci	r21, 0xFF	; 255
    1254:	fa 01       	movw	r30, r20
    1256:	61 91       	ld	r22, Z+
    1258:	71 91       	ld	r23, Z+
    125a:	af 01       	movw	r20, r30
    125c:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <__iob>
    1260:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <__iob+0x1>
    1264:	b2 d3       	rcall	.+1892   	; 0x19ca <vfscanf>
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <vfprintf>:
    126c:	2f 92       	push	r2
    126e:	3f 92       	push	r3
    1270:	4f 92       	push	r4
    1272:	5f 92       	push	r5
    1274:	6f 92       	push	r6
    1276:	7f 92       	push	r7
    1278:	8f 92       	push	r8
    127a:	9f 92       	push	r9
    127c:	af 92       	push	r10
    127e:	bf 92       	push	r11
    1280:	cf 92       	push	r12
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	2b 97       	sbiw	r28, 0x0b	; 11
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	6c 01       	movw	r12, r24
    12a2:	7b 01       	movw	r14, r22
    12a4:	8a 01       	movw	r16, r20
    12a6:	fc 01       	movw	r30, r24
    12a8:	17 82       	std	Z+7, r1	; 0x07
    12aa:	16 82       	std	Z+6, r1	; 0x06
    12ac:	83 81       	ldd	r24, Z+3	; 0x03
    12ae:	81 ff       	sbrs	r24, 1
    12b0:	bf c1       	rjmp	.+894    	; 0x1630 <vfprintf+0x3c4>
    12b2:	ce 01       	movw	r24, r28
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	3c 01       	movw	r6, r24
    12b8:	f6 01       	movw	r30, r12
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	f7 01       	movw	r30, r14
    12be:	93 fd       	sbrc	r25, 3
    12c0:	85 91       	lpm	r24, Z+
    12c2:	93 ff       	sbrs	r25, 3
    12c4:	81 91       	ld	r24, Z+
    12c6:	7f 01       	movw	r14, r30
    12c8:	88 23       	and	r24, r24
    12ca:	09 f4       	brne	.+2      	; 0x12ce <vfprintf+0x62>
    12cc:	ad c1       	rjmp	.+858    	; 0x1628 <vfprintf+0x3bc>
    12ce:	85 32       	cpi	r24, 0x25	; 37
    12d0:	39 f4       	brne	.+14     	; 0x12e0 <vfprintf+0x74>
    12d2:	93 fd       	sbrc	r25, 3
    12d4:	85 91       	lpm	r24, Z+
    12d6:	93 ff       	sbrs	r25, 3
    12d8:	81 91       	ld	r24, Z+
    12da:	7f 01       	movw	r14, r30
    12dc:	85 32       	cpi	r24, 0x25	; 37
    12de:	21 f4       	brne	.+8      	; 0x12e8 <vfprintf+0x7c>
    12e0:	b6 01       	movw	r22, r12
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	f0 d4       	rcall	.+2528   	; 0x1cc6 <fputc>
    12e6:	e8 cf       	rjmp	.-48     	; 0x12b8 <vfprintf+0x4c>
    12e8:	91 2c       	mov	r9, r1
    12ea:	21 2c       	mov	r2, r1
    12ec:	31 2c       	mov	r3, r1
    12ee:	ff e1       	ldi	r31, 0x1F	; 31
    12f0:	f3 15       	cp	r31, r3
    12f2:	d8 f0       	brcs	.+54     	; 0x132a <vfprintf+0xbe>
    12f4:	8b 32       	cpi	r24, 0x2B	; 43
    12f6:	79 f0       	breq	.+30     	; 0x1316 <vfprintf+0xaa>
    12f8:	38 f4       	brcc	.+14     	; 0x1308 <vfprintf+0x9c>
    12fa:	80 32       	cpi	r24, 0x20	; 32
    12fc:	79 f0       	breq	.+30     	; 0x131c <vfprintf+0xb0>
    12fe:	83 32       	cpi	r24, 0x23	; 35
    1300:	a1 f4       	brne	.+40     	; 0x132a <vfprintf+0xbe>
    1302:	23 2d       	mov	r18, r3
    1304:	20 61       	ori	r18, 0x10	; 16
    1306:	1d c0       	rjmp	.+58     	; 0x1342 <vfprintf+0xd6>
    1308:	8d 32       	cpi	r24, 0x2D	; 45
    130a:	61 f0       	breq	.+24     	; 0x1324 <vfprintf+0xb8>
    130c:	80 33       	cpi	r24, 0x30	; 48
    130e:	69 f4       	brne	.+26     	; 0x132a <vfprintf+0xbe>
    1310:	23 2d       	mov	r18, r3
    1312:	21 60       	ori	r18, 0x01	; 1
    1314:	16 c0       	rjmp	.+44     	; 0x1342 <vfprintf+0xd6>
    1316:	83 2d       	mov	r24, r3
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	38 2e       	mov	r3, r24
    131c:	e3 2d       	mov	r30, r3
    131e:	e4 60       	ori	r30, 0x04	; 4
    1320:	3e 2e       	mov	r3, r30
    1322:	2a c0       	rjmp	.+84     	; 0x1378 <vfprintf+0x10c>
    1324:	f3 2d       	mov	r31, r3
    1326:	f8 60       	ori	r31, 0x08	; 8
    1328:	1d c0       	rjmp	.+58     	; 0x1364 <vfprintf+0xf8>
    132a:	37 fc       	sbrc	r3, 7
    132c:	2d c0       	rjmp	.+90     	; 0x1388 <vfprintf+0x11c>
    132e:	20 ed       	ldi	r18, 0xD0	; 208
    1330:	28 0f       	add	r18, r24
    1332:	2a 30       	cpi	r18, 0x0A	; 10
    1334:	40 f0       	brcs	.+16     	; 0x1346 <vfprintf+0xda>
    1336:	8e 32       	cpi	r24, 0x2E	; 46
    1338:	b9 f4       	brne	.+46     	; 0x1368 <vfprintf+0xfc>
    133a:	36 fc       	sbrc	r3, 6
    133c:	75 c1       	rjmp	.+746    	; 0x1628 <vfprintf+0x3bc>
    133e:	23 2d       	mov	r18, r3
    1340:	20 64       	ori	r18, 0x40	; 64
    1342:	32 2e       	mov	r3, r18
    1344:	19 c0       	rjmp	.+50     	; 0x1378 <vfprintf+0x10c>
    1346:	36 fe       	sbrs	r3, 6
    1348:	06 c0       	rjmp	.+12     	; 0x1356 <vfprintf+0xea>
    134a:	8a e0       	ldi	r24, 0x0A	; 10
    134c:	98 9e       	mul	r9, r24
    134e:	20 0d       	add	r18, r0
    1350:	11 24       	eor	r1, r1
    1352:	92 2e       	mov	r9, r18
    1354:	11 c0       	rjmp	.+34     	; 0x1378 <vfprintf+0x10c>
    1356:	ea e0       	ldi	r30, 0x0A	; 10
    1358:	2e 9e       	mul	r2, r30
    135a:	20 0d       	add	r18, r0
    135c:	11 24       	eor	r1, r1
    135e:	22 2e       	mov	r2, r18
    1360:	f3 2d       	mov	r31, r3
    1362:	f0 62       	ori	r31, 0x20	; 32
    1364:	3f 2e       	mov	r3, r31
    1366:	08 c0       	rjmp	.+16     	; 0x1378 <vfprintf+0x10c>
    1368:	8c 36       	cpi	r24, 0x6C	; 108
    136a:	21 f4       	brne	.+8      	; 0x1374 <vfprintf+0x108>
    136c:	83 2d       	mov	r24, r3
    136e:	80 68       	ori	r24, 0x80	; 128
    1370:	38 2e       	mov	r3, r24
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <vfprintf+0x10c>
    1374:	88 36       	cpi	r24, 0x68	; 104
    1376:	41 f4       	brne	.+16     	; 0x1388 <vfprintf+0x11c>
    1378:	f7 01       	movw	r30, r14
    137a:	93 fd       	sbrc	r25, 3
    137c:	85 91       	lpm	r24, Z+
    137e:	93 ff       	sbrs	r25, 3
    1380:	81 91       	ld	r24, Z+
    1382:	7f 01       	movw	r14, r30
    1384:	81 11       	cpse	r24, r1
    1386:	b3 cf       	rjmp	.-154    	; 0x12ee <vfprintf+0x82>
    1388:	98 2f       	mov	r25, r24
    138a:	9f 7d       	andi	r25, 0xDF	; 223
    138c:	95 54       	subi	r25, 0x45	; 69
    138e:	93 30       	cpi	r25, 0x03	; 3
    1390:	28 f4       	brcc	.+10     	; 0x139c <vfprintf+0x130>
    1392:	0c 5f       	subi	r16, 0xFC	; 252
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	9f e3       	ldi	r25, 0x3F	; 63
    1398:	99 83       	std	Y+1, r25	; 0x01
    139a:	0d c0       	rjmp	.+26     	; 0x13b6 <vfprintf+0x14a>
    139c:	83 36       	cpi	r24, 0x63	; 99
    139e:	31 f0       	breq	.+12     	; 0x13ac <vfprintf+0x140>
    13a0:	83 37       	cpi	r24, 0x73	; 115
    13a2:	71 f0       	breq	.+28     	; 0x13c0 <vfprintf+0x154>
    13a4:	83 35       	cpi	r24, 0x53	; 83
    13a6:	09 f0       	breq	.+2      	; 0x13aa <vfprintf+0x13e>
    13a8:	55 c0       	rjmp	.+170    	; 0x1454 <vfprintf+0x1e8>
    13aa:	20 c0       	rjmp	.+64     	; 0x13ec <vfprintf+0x180>
    13ac:	f8 01       	movw	r30, r16
    13ae:	80 81       	ld	r24, Z
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	0e 5f       	subi	r16, 0xFE	; 254
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	88 24       	eor	r8, r8
    13b8:	83 94       	inc	r8
    13ba:	91 2c       	mov	r9, r1
    13bc:	53 01       	movw	r10, r6
    13be:	12 c0       	rjmp	.+36     	; 0x13e4 <vfprintf+0x178>
    13c0:	28 01       	movw	r4, r16
    13c2:	f2 e0       	ldi	r31, 0x02	; 2
    13c4:	4f 0e       	add	r4, r31
    13c6:	51 1c       	adc	r5, r1
    13c8:	f8 01       	movw	r30, r16
    13ca:	a0 80       	ld	r10, Z
    13cc:	b1 80       	ldd	r11, Z+1	; 0x01
    13ce:	36 fe       	sbrs	r3, 6
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <vfprintf+0x16c>
    13d2:	69 2d       	mov	r22, r9
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <vfprintf+0x170>
    13d8:	6f ef       	ldi	r22, 0xFF	; 255
    13da:	7f ef       	ldi	r23, 0xFF	; 255
    13dc:	c5 01       	movw	r24, r10
    13de:	2a d4       	rcall	.+2132   	; 0x1c34 <strnlen>
    13e0:	4c 01       	movw	r8, r24
    13e2:	82 01       	movw	r16, r4
    13e4:	f3 2d       	mov	r31, r3
    13e6:	ff 77       	andi	r31, 0x7F	; 127
    13e8:	3f 2e       	mov	r3, r31
    13ea:	15 c0       	rjmp	.+42     	; 0x1416 <vfprintf+0x1aa>
    13ec:	28 01       	movw	r4, r16
    13ee:	22 e0       	ldi	r18, 0x02	; 2
    13f0:	42 0e       	add	r4, r18
    13f2:	51 1c       	adc	r5, r1
    13f4:	f8 01       	movw	r30, r16
    13f6:	a0 80       	ld	r10, Z
    13f8:	b1 80       	ldd	r11, Z+1	; 0x01
    13fa:	36 fe       	sbrs	r3, 6
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <vfprintf+0x198>
    13fe:	69 2d       	mov	r22, r9
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <vfprintf+0x19c>
    1404:	6f ef       	ldi	r22, 0xFF	; 255
    1406:	7f ef       	ldi	r23, 0xFF	; 255
    1408:	c5 01       	movw	r24, r10
    140a:	09 d4       	rcall	.+2066   	; 0x1c1e <strnlen_P>
    140c:	4c 01       	movw	r8, r24
    140e:	f3 2d       	mov	r31, r3
    1410:	f0 68       	ori	r31, 0x80	; 128
    1412:	3f 2e       	mov	r3, r31
    1414:	82 01       	movw	r16, r4
    1416:	33 fc       	sbrc	r3, 3
    1418:	19 c0       	rjmp	.+50     	; 0x144c <vfprintf+0x1e0>
    141a:	82 2d       	mov	r24, r2
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	88 16       	cp	r8, r24
    1420:	99 06       	cpc	r9, r25
    1422:	a0 f4       	brcc	.+40     	; 0x144c <vfprintf+0x1e0>
    1424:	b6 01       	movw	r22, r12
    1426:	80 e2       	ldi	r24, 0x20	; 32
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	4d d4       	rcall	.+2202   	; 0x1cc6 <fputc>
    142c:	2a 94       	dec	r2
    142e:	f5 cf       	rjmp	.-22     	; 0x141a <vfprintf+0x1ae>
    1430:	f5 01       	movw	r30, r10
    1432:	37 fc       	sbrc	r3, 7
    1434:	85 91       	lpm	r24, Z+
    1436:	37 fe       	sbrs	r3, 7
    1438:	81 91       	ld	r24, Z+
    143a:	5f 01       	movw	r10, r30
    143c:	b6 01       	movw	r22, r12
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	42 d4       	rcall	.+2180   	; 0x1cc6 <fputc>
    1442:	21 10       	cpse	r2, r1
    1444:	2a 94       	dec	r2
    1446:	21 e0       	ldi	r18, 0x01	; 1
    1448:	82 1a       	sub	r8, r18
    144a:	91 08       	sbc	r9, r1
    144c:	81 14       	cp	r8, r1
    144e:	91 04       	cpc	r9, r1
    1450:	79 f7       	brne	.-34     	; 0x1430 <vfprintf+0x1c4>
    1452:	e1 c0       	rjmp	.+450    	; 0x1616 <vfprintf+0x3aa>
    1454:	84 36       	cpi	r24, 0x64	; 100
    1456:	11 f0       	breq	.+4      	; 0x145c <vfprintf+0x1f0>
    1458:	89 36       	cpi	r24, 0x69	; 105
    145a:	39 f5       	brne	.+78     	; 0x14aa <vfprintf+0x23e>
    145c:	f8 01       	movw	r30, r16
    145e:	37 fe       	sbrs	r3, 7
    1460:	07 c0       	rjmp	.+14     	; 0x1470 <vfprintf+0x204>
    1462:	60 81       	ld	r22, Z
    1464:	71 81       	ldd	r23, Z+1	; 0x01
    1466:	82 81       	ldd	r24, Z+2	; 0x02
    1468:	93 81       	ldd	r25, Z+3	; 0x03
    146a:	0c 5f       	subi	r16, 0xFC	; 252
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	08 c0       	rjmp	.+16     	; 0x1480 <vfprintf+0x214>
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	07 2e       	mov	r0, r23
    1476:	00 0c       	add	r0, r0
    1478:	88 0b       	sbc	r24, r24
    147a:	99 0b       	sbc	r25, r25
    147c:	0e 5f       	subi	r16, 0xFE	; 254
    147e:	1f 4f       	sbci	r17, 0xFF	; 255
    1480:	f3 2d       	mov	r31, r3
    1482:	ff 76       	andi	r31, 0x6F	; 111
    1484:	3f 2e       	mov	r3, r31
    1486:	97 ff       	sbrs	r25, 7
    1488:	09 c0       	rjmp	.+18     	; 0x149c <vfprintf+0x230>
    148a:	90 95       	com	r25
    148c:	80 95       	com	r24
    148e:	70 95       	com	r23
    1490:	61 95       	neg	r22
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	8f 4f       	sbci	r24, 0xFF	; 255
    1496:	9f 4f       	sbci	r25, 0xFF	; 255
    1498:	f0 68       	ori	r31, 0x80	; 128
    149a:	3f 2e       	mov	r3, r31
    149c:	2a e0       	ldi	r18, 0x0A	; 10
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	a3 01       	movw	r20, r6
    14a2:	66 d4       	rcall	.+2252   	; 0x1d70 <__ultoa_invert>
    14a4:	88 2e       	mov	r8, r24
    14a6:	86 18       	sub	r8, r6
    14a8:	44 c0       	rjmp	.+136    	; 0x1532 <vfprintf+0x2c6>
    14aa:	85 37       	cpi	r24, 0x75	; 117
    14ac:	31 f4       	brne	.+12     	; 0x14ba <vfprintf+0x24e>
    14ae:	23 2d       	mov	r18, r3
    14b0:	2f 7e       	andi	r18, 0xEF	; 239
    14b2:	b2 2e       	mov	r11, r18
    14b4:	2a e0       	ldi	r18, 0x0A	; 10
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	25 c0       	rjmp	.+74     	; 0x1504 <vfprintf+0x298>
    14ba:	93 2d       	mov	r25, r3
    14bc:	99 7f       	andi	r25, 0xF9	; 249
    14be:	b9 2e       	mov	r11, r25
    14c0:	8f 36       	cpi	r24, 0x6F	; 111
    14c2:	c1 f0       	breq	.+48     	; 0x14f4 <vfprintf+0x288>
    14c4:	18 f4       	brcc	.+6      	; 0x14cc <vfprintf+0x260>
    14c6:	88 35       	cpi	r24, 0x58	; 88
    14c8:	79 f0       	breq	.+30     	; 0x14e8 <vfprintf+0x27c>
    14ca:	ae c0       	rjmp	.+348    	; 0x1628 <vfprintf+0x3bc>
    14cc:	80 37       	cpi	r24, 0x70	; 112
    14ce:	19 f0       	breq	.+6      	; 0x14d6 <vfprintf+0x26a>
    14d0:	88 37       	cpi	r24, 0x78	; 120
    14d2:	21 f0       	breq	.+8      	; 0x14dc <vfprintf+0x270>
    14d4:	a9 c0       	rjmp	.+338    	; 0x1628 <vfprintf+0x3bc>
    14d6:	e9 2f       	mov	r30, r25
    14d8:	e0 61       	ori	r30, 0x10	; 16
    14da:	be 2e       	mov	r11, r30
    14dc:	b4 fe       	sbrs	r11, 4
    14de:	0d c0       	rjmp	.+26     	; 0x14fa <vfprintf+0x28e>
    14e0:	fb 2d       	mov	r31, r11
    14e2:	f4 60       	ori	r31, 0x04	; 4
    14e4:	bf 2e       	mov	r11, r31
    14e6:	09 c0       	rjmp	.+18     	; 0x14fa <vfprintf+0x28e>
    14e8:	34 fe       	sbrs	r3, 4
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <vfprintf+0x294>
    14ec:	29 2f       	mov	r18, r25
    14ee:	26 60       	ori	r18, 0x06	; 6
    14f0:	b2 2e       	mov	r11, r18
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <vfprintf+0x294>
    14f4:	28 e0       	ldi	r18, 0x08	; 8
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <vfprintf+0x298>
    14fa:	20 e1       	ldi	r18, 0x10	; 16
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <vfprintf+0x298>
    1500:	20 e1       	ldi	r18, 0x10	; 16
    1502:	32 e0       	ldi	r19, 0x02	; 2
    1504:	f8 01       	movw	r30, r16
    1506:	b7 fe       	sbrs	r11, 7
    1508:	07 c0       	rjmp	.+14     	; 0x1518 <vfprintf+0x2ac>
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	0c 5f       	subi	r16, 0xFC	; 252
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	06 c0       	rjmp	.+12     	; 0x1524 <vfprintf+0x2b8>
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 5f       	subi	r16, 0xFE	; 254
    1522:	1f 4f       	sbci	r17, 0xFF	; 255
    1524:	a3 01       	movw	r20, r6
    1526:	24 d4       	rcall	.+2120   	; 0x1d70 <__ultoa_invert>
    1528:	88 2e       	mov	r8, r24
    152a:	86 18       	sub	r8, r6
    152c:	fb 2d       	mov	r31, r11
    152e:	ff 77       	andi	r31, 0x7F	; 127
    1530:	3f 2e       	mov	r3, r31
    1532:	36 fe       	sbrs	r3, 6
    1534:	0d c0       	rjmp	.+26     	; 0x1550 <vfprintf+0x2e4>
    1536:	23 2d       	mov	r18, r3
    1538:	2e 7f       	andi	r18, 0xFE	; 254
    153a:	a2 2e       	mov	r10, r18
    153c:	89 14       	cp	r8, r9
    153e:	58 f4       	brcc	.+22     	; 0x1556 <vfprintf+0x2ea>
    1540:	34 fe       	sbrs	r3, 4
    1542:	0b c0       	rjmp	.+22     	; 0x155a <vfprintf+0x2ee>
    1544:	32 fc       	sbrc	r3, 2
    1546:	09 c0       	rjmp	.+18     	; 0x155a <vfprintf+0x2ee>
    1548:	83 2d       	mov	r24, r3
    154a:	8e 7e       	andi	r24, 0xEE	; 238
    154c:	a8 2e       	mov	r10, r24
    154e:	05 c0       	rjmp	.+10     	; 0x155a <vfprintf+0x2ee>
    1550:	b8 2c       	mov	r11, r8
    1552:	a3 2c       	mov	r10, r3
    1554:	03 c0       	rjmp	.+6      	; 0x155c <vfprintf+0x2f0>
    1556:	b8 2c       	mov	r11, r8
    1558:	01 c0       	rjmp	.+2      	; 0x155c <vfprintf+0x2f0>
    155a:	b9 2c       	mov	r11, r9
    155c:	a4 fe       	sbrs	r10, 4
    155e:	0f c0       	rjmp	.+30     	; 0x157e <vfprintf+0x312>
    1560:	fe 01       	movw	r30, r28
    1562:	e8 0d       	add	r30, r8
    1564:	f1 1d       	adc	r31, r1
    1566:	80 81       	ld	r24, Z
    1568:	80 33       	cpi	r24, 0x30	; 48
    156a:	21 f4       	brne	.+8      	; 0x1574 <vfprintf+0x308>
    156c:	9a 2d       	mov	r25, r10
    156e:	99 7e       	andi	r25, 0xE9	; 233
    1570:	a9 2e       	mov	r10, r25
    1572:	09 c0       	rjmp	.+18     	; 0x1586 <vfprintf+0x31a>
    1574:	a2 fe       	sbrs	r10, 2
    1576:	06 c0       	rjmp	.+12     	; 0x1584 <vfprintf+0x318>
    1578:	b3 94       	inc	r11
    157a:	b3 94       	inc	r11
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <vfprintf+0x31a>
    157e:	8a 2d       	mov	r24, r10
    1580:	86 78       	andi	r24, 0x86	; 134
    1582:	09 f0       	breq	.+2      	; 0x1586 <vfprintf+0x31a>
    1584:	b3 94       	inc	r11
    1586:	a3 fc       	sbrc	r10, 3
    1588:	10 c0       	rjmp	.+32     	; 0x15aa <vfprintf+0x33e>
    158a:	a0 fe       	sbrs	r10, 0
    158c:	06 c0       	rjmp	.+12     	; 0x159a <vfprintf+0x32e>
    158e:	b2 14       	cp	r11, r2
    1590:	80 f4       	brcc	.+32     	; 0x15b2 <vfprintf+0x346>
    1592:	28 0c       	add	r2, r8
    1594:	92 2c       	mov	r9, r2
    1596:	9b 18       	sub	r9, r11
    1598:	0d c0       	rjmp	.+26     	; 0x15b4 <vfprintf+0x348>
    159a:	b2 14       	cp	r11, r2
    159c:	58 f4       	brcc	.+22     	; 0x15b4 <vfprintf+0x348>
    159e:	b6 01       	movw	r22, r12
    15a0:	80 e2       	ldi	r24, 0x20	; 32
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	90 d3       	rcall	.+1824   	; 0x1cc6 <fputc>
    15a6:	b3 94       	inc	r11
    15a8:	f8 cf       	rjmp	.-16     	; 0x159a <vfprintf+0x32e>
    15aa:	b2 14       	cp	r11, r2
    15ac:	18 f4       	brcc	.+6      	; 0x15b4 <vfprintf+0x348>
    15ae:	2b 18       	sub	r2, r11
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <vfprintf+0x34a>
    15b2:	98 2c       	mov	r9, r8
    15b4:	21 2c       	mov	r2, r1
    15b6:	a4 fe       	sbrs	r10, 4
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <vfprintf+0x36c>
    15ba:	b6 01       	movw	r22, r12
    15bc:	80 e3       	ldi	r24, 0x30	; 48
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	82 d3       	rcall	.+1796   	; 0x1cc6 <fputc>
    15c2:	a2 fe       	sbrs	r10, 2
    15c4:	16 c0       	rjmp	.+44     	; 0x15f2 <vfprintf+0x386>
    15c6:	a1 fc       	sbrc	r10, 1
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <vfprintf+0x364>
    15ca:	88 e7       	ldi	r24, 0x78	; 120
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0x368>
    15d0:	88 e5       	ldi	r24, 0x58	; 88
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	b6 01       	movw	r22, r12
    15d6:	0c c0       	rjmp	.+24     	; 0x15f0 <vfprintf+0x384>
    15d8:	8a 2d       	mov	r24, r10
    15da:	86 78       	andi	r24, 0x86	; 134
    15dc:	51 f0       	breq	.+20     	; 0x15f2 <vfprintf+0x386>
    15de:	a1 fe       	sbrs	r10, 1
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <vfprintf+0x37a>
    15e2:	8b e2       	ldi	r24, 0x2B	; 43
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <vfprintf+0x37c>
    15e6:	80 e2       	ldi	r24, 0x20	; 32
    15e8:	a7 fc       	sbrc	r10, 7
    15ea:	8d e2       	ldi	r24, 0x2D	; 45
    15ec:	b6 01       	movw	r22, r12
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	6a d3       	rcall	.+1748   	; 0x1cc6 <fputc>
    15f2:	89 14       	cp	r8, r9
    15f4:	30 f4       	brcc	.+12     	; 0x1602 <vfprintf+0x396>
    15f6:	b6 01       	movw	r22, r12
    15f8:	80 e3       	ldi	r24, 0x30	; 48
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	64 d3       	rcall	.+1736   	; 0x1cc6 <fputc>
    15fe:	9a 94       	dec	r9
    1600:	f8 cf       	rjmp	.-16     	; 0x15f2 <vfprintf+0x386>
    1602:	8a 94       	dec	r8
    1604:	f3 01       	movw	r30, r6
    1606:	e8 0d       	add	r30, r8
    1608:	f1 1d       	adc	r31, r1
    160a:	80 81       	ld	r24, Z
    160c:	b6 01       	movw	r22, r12
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	5a d3       	rcall	.+1716   	; 0x1cc6 <fputc>
    1612:	81 10       	cpse	r8, r1
    1614:	f6 cf       	rjmp	.-20     	; 0x1602 <vfprintf+0x396>
    1616:	22 20       	and	r2, r2
    1618:	09 f4       	brne	.+2      	; 0x161c <vfprintf+0x3b0>
    161a:	4e ce       	rjmp	.-868    	; 0x12b8 <vfprintf+0x4c>
    161c:	b6 01       	movw	r22, r12
    161e:	80 e2       	ldi	r24, 0x20	; 32
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	51 d3       	rcall	.+1698   	; 0x1cc6 <fputc>
    1624:	2a 94       	dec	r2
    1626:	f7 cf       	rjmp	.-18     	; 0x1616 <vfprintf+0x3aa>
    1628:	f6 01       	movw	r30, r12
    162a:	86 81       	ldd	r24, Z+6	; 0x06
    162c:	97 81       	ldd	r25, Z+7	; 0x07
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <vfprintf+0x3c8>
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	9f ef       	ldi	r25, 0xFF	; 255
    1634:	2b 96       	adiw	r28, 0x0b	; 11
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
    164c:	df 90       	pop	r13
    164e:	cf 90       	pop	r12
    1650:	bf 90       	pop	r11
    1652:	af 90       	pop	r10
    1654:	9f 90       	pop	r9
    1656:	8f 90       	pop	r8
    1658:	7f 90       	pop	r7
    165a:	6f 90       	pop	r6
    165c:	5f 90       	pop	r5
    165e:	4f 90       	pop	r4
    1660:	3f 90       	pop	r3
    1662:	2f 90       	pop	r2
    1664:	08 95       	ret

00001666 <putval>:
    1666:	20 fd       	sbrc	r18, 0
    1668:	09 c0       	rjmp	.+18     	; 0x167c <putval+0x16>
    166a:	fc 01       	movw	r30, r24
    166c:	23 fd       	sbrc	r18, 3
    166e:	05 c0       	rjmp	.+10     	; 0x167a <putval+0x14>
    1670:	22 ff       	sbrs	r18, 2
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <putval+0x12>
    1674:	73 83       	std	Z+3, r23	; 0x03
    1676:	62 83       	std	Z+2, r22	; 0x02
    1678:	51 83       	std	Z+1, r21	; 0x01
    167a:	40 83       	st	Z, r20
    167c:	08 95       	ret

0000167e <mulacc>:
    167e:	44 fd       	sbrc	r20, 4
    1680:	17 c0       	rjmp	.+46     	; 0x16b0 <mulacc+0x32>
    1682:	46 fd       	sbrc	r20, 6
    1684:	17 c0       	rjmp	.+46     	; 0x16b4 <mulacc+0x36>
    1686:	ab 01       	movw	r20, r22
    1688:	bc 01       	movw	r22, r24
    168a:	da 01       	movw	r26, r20
    168c:	fb 01       	movw	r30, r22
    168e:	aa 0f       	add	r26, r26
    1690:	bb 1f       	adc	r27, r27
    1692:	ee 1f       	adc	r30, r30
    1694:	ff 1f       	adc	r31, r31
    1696:	10 94       	com	r1
    1698:	d1 f7       	brne	.-12     	; 0x168e <mulacc+0x10>
    169a:	4a 0f       	add	r20, r26
    169c:	5b 1f       	adc	r21, r27
    169e:	6e 1f       	adc	r22, r30
    16a0:	7f 1f       	adc	r23, r31
    16a2:	cb 01       	movw	r24, r22
    16a4:	ba 01       	movw	r22, r20
    16a6:	66 0f       	add	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	88 1f       	adc	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <mulacc+0x44>
    16b0:	33 e0       	ldi	r19, 0x03	; 3
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <mulacc+0x38>
    16b4:	34 e0       	ldi	r19, 0x04	; 4
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	31 50       	subi	r19, 0x01	; 1
    16c0:	d1 f7       	brne	.-12     	; 0x16b6 <mulacc+0x38>
    16c2:	62 0f       	add	r22, r18
    16c4:	71 1d       	adc	r23, r1
    16c6:	81 1d       	adc	r24, r1
    16c8:	91 1d       	adc	r25, r1
    16ca:	08 95       	ret

000016cc <skip_spaces>:
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	8c 01       	movw	r16, r24
    16d6:	c8 01       	movw	r24, r16
    16d8:	b8 d2       	rcall	.+1392   	; 0x1c4a <fgetc>
    16da:	ec 01       	movw	r28, r24
    16dc:	97 fd       	sbrc	r25, 7
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <skip_spaces+0x20>
    16e0:	8b d2       	rcall	.+1302   	; 0x1bf8 <isspace>
    16e2:	89 2b       	or	r24, r25
    16e4:	c1 f7       	brne	.-16     	; 0x16d6 <skip_spaces+0xa>
    16e6:	b8 01       	movw	r22, r16
    16e8:	ce 01       	movw	r24, r28
    16ea:	29 d3       	rcall	.+1618   	; 0x1d3e <ungetc>
    16ec:	ce 01       	movw	r24, r28
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	08 95       	ret

000016f8 <conv_int>:
    16f8:	8f 92       	push	r8
    16fa:	9f 92       	push	r9
    16fc:	af 92       	push	r10
    16fe:	bf 92       	push	r11
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	8c 01       	movw	r16, r24
    170e:	d6 2f       	mov	r29, r22
    1710:	7a 01       	movw	r14, r20
    1712:	b2 2e       	mov	r11, r18
    1714:	9a d2       	rcall	.+1332   	; 0x1c4a <fgetc>
    1716:	9c 01       	movw	r18, r24
    1718:	33 27       	eor	r19, r19
    171a:	2b 32       	cpi	r18, 0x2B	; 43
    171c:	31 05       	cpc	r19, r1
    171e:	31 f0       	breq	.+12     	; 0x172c <conv_int+0x34>
    1720:	2d 32       	cpi	r18, 0x2D	; 45
    1722:	31 05       	cpc	r19, r1
    1724:	59 f4       	brne	.+22     	; 0x173c <conv_int+0x44>
    1726:	8b 2d       	mov	r24, r11
    1728:	80 68       	ori	r24, 0x80	; 128
    172a:	b8 2e       	mov	r11, r24
    172c:	d1 50       	subi	r29, 0x01	; 1
    172e:	11 f4       	brne	.+4      	; 0x1734 <conv_int+0x3c>
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	61 c0       	rjmp	.+194    	; 0x17f6 <conv_int+0xfe>
    1734:	c8 01       	movw	r24, r16
    1736:	89 d2       	rcall	.+1298   	; 0x1c4a <fgetc>
    1738:	97 fd       	sbrc	r25, 7
    173a:	fa cf       	rjmp	.-12     	; 0x1730 <conv_int+0x38>
    173c:	cb 2d       	mov	r28, r11
    173e:	cd 7f       	andi	r28, 0xFD	; 253
    1740:	2b 2d       	mov	r18, r11
    1742:	20 73       	andi	r18, 0x30	; 48
    1744:	f9 f4       	brne	.+62     	; 0x1784 <conv_int+0x8c>
    1746:	80 33       	cpi	r24, 0x30	; 48
    1748:	e9 f4       	brne	.+58     	; 0x1784 <conv_int+0x8c>
    174a:	aa 24       	eor	r10, r10
    174c:	aa 94       	dec	r10
    174e:	ad 0e       	add	r10, r29
    1750:	09 f4       	brne	.+2      	; 0x1754 <conv_int+0x5c>
    1752:	3e c0       	rjmp	.+124    	; 0x17d0 <conv_int+0xd8>
    1754:	c8 01       	movw	r24, r16
    1756:	79 d2       	rcall	.+1266   	; 0x1c4a <fgetc>
    1758:	97 fd       	sbrc	r25, 7
    175a:	3a c0       	rjmp	.+116    	; 0x17d0 <conv_int+0xd8>
    175c:	9c 01       	movw	r18, r24
    175e:	2f 7d       	andi	r18, 0xDF	; 223
    1760:	33 27       	eor	r19, r19
    1762:	28 35       	cpi	r18, 0x58	; 88
    1764:	31 05       	cpc	r19, r1
    1766:	41 f4       	brne	.+16     	; 0x1778 <conv_int+0x80>
    1768:	c2 64       	ori	r28, 0x42	; 66
    176a:	d2 50       	subi	r29, 0x02	; 2
    176c:	89 f1       	breq	.+98     	; 0x17d0 <conv_int+0xd8>
    176e:	c8 01       	movw	r24, r16
    1770:	6c d2       	rcall	.+1240   	; 0x1c4a <fgetc>
    1772:	97 ff       	sbrs	r25, 7
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <conv_int+0x8c>
    1776:	2c c0       	rjmp	.+88     	; 0x17d0 <conv_int+0xd8>
    1778:	b6 fe       	sbrs	r11, 6
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <conv_int+0x88>
    177c:	c2 60       	ori	r28, 0x02	; 2
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <conv_int+0x8a>
    1780:	c2 61       	ori	r28, 0x12	; 18
    1782:	da 2d       	mov	r29, r10
    1784:	81 2c       	mov	r8, r1
    1786:	91 2c       	mov	r9, r1
    1788:	54 01       	movw	r10, r8
    178a:	20 ed       	ldi	r18, 0xD0	; 208
    178c:	28 0f       	add	r18, r24
    178e:	28 30       	cpi	r18, 0x08	; 8
    1790:	78 f0       	brcs	.+30     	; 0x17b0 <conv_int+0xb8>
    1792:	c4 ff       	sbrs	r28, 4
    1794:	03 c0       	rjmp	.+6      	; 0x179c <conv_int+0xa4>
    1796:	b8 01       	movw	r22, r16
    1798:	d2 d2       	rcall	.+1444   	; 0x1d3e <ungetc>
    179a:	17 c0       	rjmp	.+46     	; 0x17ca <conv_int+0xd2>
    179c:	2a 30       	cpi	r18, 0x0A	; 10
    179e:	40 f0       	brcs	.+16     	; 0x17b0 <conv_int+0xb8>
    17a0:	c6 ff       	sbrs	r28, 6
    17a2:	f9 cf       	rjmp	.-14     	; 0x1796 <conv_int+0x9e>
    17a4:	2f 7d       	andi	r18, 0xDF	; 223
    17a6:	3f ee       	ldi	r19, 0xEF	; 239
    17a8:	32 0f       	add	r19, r18
    17aa:	36 30       	cpi	r19, 0x06	; 6
    17ac:	a0 f7       	brcc	.-24     	; 0x1796 <conv_int+0x9e>
    17ae:	27 50       	subi	r18, 0x07	; 7
    17b0:	4c 2f       	mov	r20, r28
    17b2:	c5 01       	movw	r24, r10
    17b4:	b4 01       	movw	r22, r8
    17b6:	63 df       	rcall	.-314    	; 0x167e <mulacc>
    17b8:	4b 01       	movw	r8, r22
    17ba:	5c 01       	movw	r10, r24
    17bc:	c2 60       	ori	r28, 0x02	; 2
    17be:	d1 50       	subi	r29, 0x01	; 1
    17c0:	51 f0       	breq	.+20     	; 0x17d6 <conv_int+0xde>
    17c2:	c8 01       	movw	r24, r16
    17c4:	42 d2       	rcall	.+1156   	; 0x1c4a <fgetc>
    17c6:	97 ff       	sbrs	r25, 7
    17c8:	e0 cf       	rjmp	.-64     	; 0x178a <conv_int+0x92>
    17ca:	c1 fd       	sbrc	r28, 1
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <conv_int+0xde>
    17ce:	b0 cf       	rjmp	.-160    	; 0x1730 <conv_int+0x38>
    17d0:	81 2c       	mov	r8, r1
    17d2:	91 2c       	mov	r9, r1
    17d4:	54 01       	movw	r10, r8
    17d6:	c7 ff       	sbrs	r28, 7
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <conv_int+0xf2>
    17da:	b0 94       	com	r11
    17dc:	a0 94       	com	r10
    17de:	90 94       	com	r9
    17e0:	80 94       	com	r8
    17e2:	81 1c       	adc	r8, r1
    17e4:	91 1c       	adc	r9, r1
    17e6:	a1 1c       	adc	r10, r1
    17e8:	b1 1c       	adc	r11, r1
    17ea:	2c 2f       	mov	r18, r28
    17ec:	b5 01       	movw	r22, r10
    17ee:	a4 01       	movw	r20, r8
    17f0:	c7 01       	movw	r24, r14
    17f2:	39 df       	rcall	.-398    	; 0x1666 <putval>
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	bf 90       	pop	r11
    1804:	af 90       	pop	r10
    1806:	9f 90       	pop	r9
    1808:	8f 90       	pop	r8
    180a:	08 95       	ret

0000180c <conv_brk>:
    180c:	5f 92       	push	r5
    180e:	6f 92       	push	r6
    1810:	7f 92       	push	r7
    1812:	8f 92       	push	r8
    1814:	9f 92       	push	r9
    1816:	af 92       	push	r10
    1818:	bf 92       	push	r11
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	a0 97       	sbiw	r28, 0x20	; 32
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	5c 01       	movw	r10, r24
    183c:	96 2e       	mov	r9, r22
    183e:	7a 01       	movw	r14, r20
    1840:	f9 01       	movw	r30, r18
    1842:	8e 01       	movw	r16, r28
    1844:	0f 5f       	subi	r16, 0xFF	; 255
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	68 01       	movw	r12, r16
    184a:	80 e2       	ldi	r24, 0x20	; 32
    184c:	d8 01       	movw	r26, r16
    184e:	1d 92       	st	X+, r1
    1850:	8a 95       	dec	r24
    1852:	e9 f7       	brne	.-6      	; 0x184e <conv_brk+0x42>
    1854:	d5 01       	movw	r26, r10
    1856:	13 96       	adiw	r26, 0x03	; 3
    1858:	8c 90       	ld	r8, X
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	61 2c       	mov	r6, r1
    1860:	71 2c       	mov	r7, r1
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	83 fc       	sbrc	r8, 3
    186a:	25 91       	lpm	r18, Z+
    186c:	83 fe       	sbrs	r8, 3
    186e:	21 91       	ld	r18, Z+
    1870:	8f 01       	movw	r16, r30
    1872:	52 2e       	mov	r5, r18
    1874:	21 11       	cpse	r18, r1
    1876:	03 c0       	rjmp	.+6      	; 0x187e <conv_brk+0x72>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	90 c0       	rjmp	.+288    	; 0x199e <conv_brk+0x192>
    187e:	2e 35       	cpi	r18, 0x5E	; 94
    1880:	11 f4       	brne	.+4      	; 0x1886 <conv_brk+0x7a>
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	51 f1       	breq	.+84     	; 0x18da <conv_brk+0xce>
    1886:	43 2f       	mov	r20, r19
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	48 17       	cp	r20, r24
    188c:	59 07       	cpc	r21, r25
    188e:	3c f4       	brge	.+14     	; 0x189e <conv_brk+0x92>
    1890:	2d 35       	cpi	r18, 0x5D	; 93
    1892:	59 f1       	breq	.+86     	; 0x18ea <conv_brk+0xde>
    1894:	2d 32       	cpi	r18, 0x2D	; 45
    1896:	19 f4       	brne	.+6      	; 0x189e <conv_brk+0x92>
    1898:	77 20       	and	r7, r7
    189a:	09 f1       	breq	.+66     	; 0x18de <conv_brk+0xd2>
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <conv_brk+0x98>
    189e:	77 20       	and	r7, r7
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <conv_brk+0x98>
    18a2:	68 c0       	rjmp	.+208    	; 0x1974 <conv_brk+0x168>
    18a4:	45 2d       	mov	r20, r5
    18a6:	46 95       	lsr	r20
    18a8:	46 95       	lsr	r20
    18aa:	46 95       	lsr	r20
    18ac:	d6 01       	movw	r26, r12
    18ae:	a4 0f       	add	r26, r20
    18b0:	b1 1d       	adc	r27, r1
    18b2:	45 2d       	mov	r20, r5
    18b4:	47 70       	andi	r20, 0x07	; 7
    18b6:	8b 01       	movw	r16, r22
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <conv_brk+0xb2>
    18ba:	00 0f       	add	r16, r16
    18bc:	11 1f       	adc	r17, r17
    18be:	4a 95       	dec	r20
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <conv_brk+0xae>
    18c2:	a8 01       	movw	r20, r16
    18c4:	5c 91       	ld	r21, X
    18c6:	45 2b       	or	r20, r21
    18c8:	4c 93       	st	X, r20
    18ca:	65 14       	cp	r6, r5
    18cc:	59 f0       	breq	.+22     	; 0x18e4 <conv_brk+0xd8>
    18ce:	56 14       	cp	r5, r6
    18d0:	10 f4       	brcc	.+4      	; 0x18d6 <conv_brk+0xca>
    18d2:	53 94       	inc	r5
    18d4:	e7 cf       	rjmp	.-50     	; 0x18a4 <conv_brk+0x98>
    18d6:	5a 94       	dec	r5
    18d8:	e5 cf       	rjmp	.-54     	; 0x18a4 <conv_brk+0x98>
    18da:	31 e0       	ldi	r19, 0x01	; 1
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <conv_brk+0xda>
    18de:	77 24       	eor	r7, r7
    18e0:	73 94       	inc	r7
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <conv_brk+0xda>
    18e4:	71 2c       	mov	r7, r1
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	bf cf       	rjmp	.-130    	; 0x1868 <conv_brk+0x5c>
    18ea:	77 20       	and	r7, r7
    18ec:	19 f0       	breq	.+6      	; 0x18f4 <conv_brk+0xe8>
    18ee:	8e 81       	ldd	r24, Y+6	; 0x06
    18f0:	80 62       	ori	r24, 0x20	; 32
    18f2:	8e 83       	std	Y+6, r24	; 0x06
    18f4:	31 11       	cpse	r19, r1
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <conv_brk+0xf2>
    18f8:	88 24       	eor	r8, r8
    18fa:	83 94       	inc	r8
    18fc:	17 c0       	rjmp	.+46     	; 0x192c <conv_brk+0x120>
    18fe:	f6 01       	movw	r30, r12
    1900:	9e 01       	movw	r18, r28
    1902:	2f 5d       	subi	r18, 0xDF	; 223
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	80 95       	com	r24
    190a:	81 93       	st	Z+, r24
    190c:	2e 17       	cp	r18, r30
    190e:	3f 07       	cpc	r19, r31
    1910:	d1 f7       	brne	.-12     	; 0x1906 <conv_brk+0xfa>
    1912:	f2 cf       	rjmp	.-28     	; 0x18f8 <conv_brk+0xec>
    1914:	e1 14       	cp	r14, r1
    1916:	f1 04       	cpc	r15, r1
    1918:	29 f0       	breq	.+10     	; 0x1924 <conv_brk+0x118>
    191a:	d7 01       	movw	r26, r14
    191c:	8c 93       	st	X, r24
    191e:	f7 01       	movw	r30, r14
    1920:	31 96       	adiw	r30, 0x01	; 1
    1922:	7f 01       	movw	r14, r30
    1924:	9a 94       	dec	r9
    1926:	81 2c       	mov	r8, r1
    1928:	99 20       	and	r9, r9
    192a:	e9 f0       	breq	.+58     	; 0x1966 <conv_brk+0x15a>
    192c:	c5 01       	movw	r24, r10
    192e:	8d d1       	rcall	.+794    	; 0x1c4a <fgetc>
    1930:	97 fd       	sbrc	r25, 7
    1932:	17 c0       	rjmp	.+46     	; 0x1962 <conv_brk+0x156>
    1934:	fc 01       	movw	r30, r24
    1936:	ff 27       	eor	r31, r31
    1938:	23 e0       	ldi	r18, 0x03	; 3
    193a:	f5 95       	asr	r31
    193c:	e7 95       	ror	r30
    193e:	2a 95       	dec	r18
    1940:	e1 f7       	brne	.-8      	; 0x193a <conv_brk+0x12e>
    1942:	ec 0d       	add	r30, r12
    1944:	fd 1d       	adc	r31, r13
    1946:	20 81       	ld	r18, Z
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	ac 01       	movw	r20, r24
    194c:	47 70       	andi	r20, 0x07	; 7
    194e:	55 27       	eor	r21, r21
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <conv_brk+0x14a>
    1952:	35 95       	asr	r19
    1954:	27 95       	ror	r18
    1956:	4a 95       	dec	r20
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <conv_brk+0x146>
    195a:	20 fd       	sbrc	r18, 0
    195c:	db cf       	rjmp	.-74     	; 0x1914 <conv_brk+0x108>
    195e:	b5 01       	movw	r22, r10
    1960:	ee d1       	rcall	.+988    	; 0x1d3e <ungetc>
    1962:	81 10       	cpse	r8, r1
    1964:	89 cf       	rjmp	.-238    	; 0x1878 <conv_brk+0x6c>
    1966:	e1 14       	cp	r14, r1
    1968:	f1 04       	cpc	r15, r1
    196a:	11 f0       	breq	.+4      	; 0x1970 <conv_brk+0x164>
    196c:	d7 01       	movw	r26, r14
    196e:	1c 92       	st	X, r1
    1970:	c8 01       	movw	r24, r16
    1972:	15 c0       	rjmp	.+42     	; 0x199e <conv_brk+0x192>
    1974:	42 2f       	mov	r20, r18
    1976:	46 95       	lsr	r20
    1978:	46 95       	lsr	r20
    197a:	46 95       	lsr	r20
    197c:	d6 01       	movw	r26, r12
    197e:	a4 0f       	add	r26, r20
    1980:	b1 1d       	adc	r27, r1
    1982:	42 2f       	mov	r20, r18
    1984:	47 70       	andi	r20, 0x07	; 7
    1986:	8b 01       	movw	r16, r22
    1988:	02 c0       	rjmp	.+4      	; 0x198e <conv_brk+0x182>
    198a:	00 0f       	add	r16, r16
    198c:	11 1f       	adc	r17, r17
    198e:	4a 95       	dec	r20
    1990:	e2 f7       	brpl	.-8      	; 0x198a <conv_brk+0x17e>
    1992:	a8 01       	movw	r20, r16
    1994:	5c 91       	ld	r21, X
    1996:	45 2b       	or	r20, r21
    1998:	4c 93       	st	X, r20
    199a:	62 2e       	mov	r6, r18
    199c:	a4 cf       	rjmp	.-184    	; 0x18e6 <conv_brk+0xda>
    199e:	a0 96       	adiw	r28, 0x20	; 32
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	df 90       	pop	r13
    19b8:	cf 90       	pop	r12
    19ba:	bf 90       	pop	r11
    19bc:	af 90       	pop	r10
    19be:	9f 90       	pop	r9
    19c0:	8f 90       	pop	r8
    19c2:	7f 90       	pop	r7
    19c4:	6f 90       	pop	r6
    19c6:	5f 90       	pop	r5
    19c8:	08 95       	ret

000019ca <vfscanf>:
    19ca:	5f 92       	push	r5
    19cc:	6f 92       	push	r6
    19ce:	7f 92       	push	r7
    19d0:	8f 92       	push	r8
    19d2:	9f 92       	push	r9
    19d4:	af 92       	push	r10
    19d6:	bf 92       	push	r11
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	6c 01       	movw	r12, r24
    19ea:	eb 01       	movw	r28, r22
    19ec:	5a 01       	movw	r10, r20
    19ee:	fc 01       	movw	r30, r24
    19f0:	17 82       	std	Z+7, r1	; 0x07
    19f2:	16 82       	std	Z+6, r1	; 0x06
    19f4:	51 2c       	mov	r5, r1
    19f6:	f6 01       	movw	r30, r12
    19f8:	e3 80       	ldd	r14, Z+3	; 0x03
    19fa:	fe 01       	movw	r30, r28
    19fc:	e3 fc       	sbrc	r14, 3
    19fe:	85 91       	lpm	r24, Z+
    1a00:	e3 fe       	sbrs	r14, 3
    1a02:	81 91       	ld	r24, Z+
    1a04:	18 2f       	mov	r17, r24
    1a06:	ef 01       	movw	r28, r30
    1a08:	88 23       	and	r24, r24
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <vfscanf+0x44>
    1a0c:	e0 c0       	rjmp	.+448    	; 0x1bce <vfscanf+0x204>
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	f3 d0       	rcall	.+486    	; 0x1bf8 <isspace>
    1a12:	89 2b       	or	r24, r25
    1a14:	19 f0       	breq	.+6      	; 0x1a1c <vfscanf+0x52>
    1a16:	c6 01       	movw	r24, r12
    1a18:	59 de       	rcall	.-846    	; 0x16cc <skip_spaces>
    1a1a:	ed cf       	rjmp	.-38     	; 0x19f6 <vfscanf+0x2c>
    1a1c:	15 32       	cpi	r17, 0x25	; 37
    1a1e:	41 f4       	brne	.+16     	; 0x1a30 <vfscanf+0x66>
    1a20:	fe 01       	movw	r30, r28
    1a22:	e3 fc       	sbrc	r14, 3
    1a24:	15 91       	lpm	r17, Z+
    1a26:	e3 fe       	sbrs	r14, 3
    1a28:	11 91       	ld	r17, Z+
    1a2a:	ef 01       	movw	r28, r30
    1a2c:	15 32       	cpi	r17, 0x25	; 37
    1a2e:	71 f4       	brne	.+28     	; 0x1a4c <vfscanf+0x82>
    1a30:	c6 01       	movw	r24, r12
    1a32:	0b d1       	rcall	.+534    	; 0x1c4a <fgetc>
    1a34:	97 fd       	sbrc	r25, 7
    1a36:	c9 c0       	rjmp	.+402    	; 0x1bca <vfscanf+0x200>
    1a38:	41 2f       	mov	r20, r17
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	9c 01       	movw	r18, r24
    1a3e:	33 27       	eor	r19, r19
    1a40:	24 17       	cp	r18, r20
    1a42:	35 07       	cpc	r19, r21
    1a44:	c1 f2       	breq	.-80     	; 0x19f6 <vfscanf+0x2c>
    1a46:	b6 01       	movw	r22, r12
    1a48:	7a d1       	rcall	.+756    	; 0x1d3e <ungetc>
    1a4a:	c1 c0       	rjmp	.+386    	; 0x1bce <vfscanf+0x204>
    1a4c:	1a 32       	cpi	r17, 0x2A	; 42
    1a4e:	39 f4       	brne	.+14     	; 0x1a5e <vfscanf+0x94>
    1a50:	e3 fc       	sbrc	r14, 3
    1a52:	15 91       	lpm	r17, Z+
    1a54:	e3 fe       	sbrs	r14, 3
    1a56:	11 91       	ld	r17, Z+
    1a58:	ef 01       	movw	r28, r30
    1a5a:	01 e0       	ldi	r16, 0x01	; 1
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <vfscanf+0x96>
    1a5e:	00 e0       	ldi	r16, 0x00	; 0
    1a60:	f1 2c       	mov	r15, r1
    1a62:	20 ed       	ldi	r18, 0xD0	; 208
    1a64:	21 0f       	add	r18, r17
    1a66:	2a 30       	cpi	r18, 0x0A	; 10
    1a68:	78 f4       	brcc	.+30     	; 0x1a88 <vfscanf+0xbe>
    1a6a:	02 60       	ori	r16, 0x02	; 2
    1a6c:	6f 2d       	mov	r22, r15
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	40 e2       	ldi	r20, 0x20	; 32
    1a76:	03 de       	rcall	.-1018   	; 0x167e <mulacc>
    1a78:	f6 2e       	mov	r15, r22
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e3 fc       	sbrc	r14, 3
    1a7e:	15 91       	lpm	r17, Z+
    1a80:	e3 fe       	sbrs	r14, 3
    1a82:	11 91       	ld	r17, Z+
    1a84:	ef 01       	movw	r28, r30
    1a86:	ed cf       	rjmp	.-38     	; 0x1a62 <vfscanf+0x98>
    1a88:	01 ff       	sbrs	r16, 1
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <vfscanf+0xc8>
    1a8c:	f1 10       	cpse	r15, r1
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <vfscanf+0xcc>
    1a90:	9e c0       	rjmp	.+316    	; 0x1bce <vfscanf+0x204>
    1a92:	ff 24       	eor	r15, r15
    1a94:	fa 94       	dec	r15
    1a96:	18 36       	cpi	r17, 0x68	; 104
    1a98:	19 f0       	breq	.+6      	; 0x1aa0 <vfscanf+0xd6>
    1a9a:	1c 36       	cpi	r17, 0x6C	; 108
    1a9c:	51 f0       	breq	.+20     	; 0x1ab2 <vfscanf+0xe8>
    1a9e:	10 c0       	rjmp	.+32     	; 0x1ac0 <vfscanf+0xf6>
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e3 fc       	sbrc	r14, 3
    1aa4:	15 91       	lpm	r17, Z+
    1aa6:	e3 fe       	sbrs	r14, 3
    1aa8:	11 91       	ld	r17, Z+
    1aaa:	ef 01       	movw	r28, r30
    1aac:	18 36       	cpi	r17, 0x68	; 104
    1aae:	41 f4       	brne	.+16     	; 0x1ac0 <vfscanf+0xf6>
    1ab0:	08 60       	ori	r16, 0x08	; 8
    1ab2:	04 60       	ori	r16, 0x04	; 4
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e3 fc       	sbrc	r14, 3
    1ab8:	15 91       	lpm	r17, Z+
    1aba:	e3 fe       	sbrs	r14, 3
    1abc:	11 91       	ld	r17, Z+
    1abe:	ef 01       	movw	r28, r30
    1ac0:	11 23       	and	r17, r17
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <vfscanf+0xfc>
    1ac4:	84 c0       	rjmp	.+264    	; 0x1bce <vfscanf+0x204>
    1ac6:	61 2f       	mov	r22, r17
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	8c e8       	ldi	r24, 0x8C	; 140
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9c d0       	rcall	.+312    	; 0x1c08 <strchr_P>
    1ad0:	89 2b       	or	r24, r25
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <vfscanf+0x10c>
    1ad4:	7c c0       	rjmp	.+248    	; 0x1bce <vfscanf+0x204>
    1ad6:	00 fd       	sbrc	r16, 0
    1ad8:	07 c0       	rjmp	.+14     	; 0x1ae8 <vfscanf+0x11e>
    1ada:	f5 01       	movw	r30, r10
    1adc:	80 80       	ld	r8, Z
    1ade:	91 80       	ldd	r9, Z+1	; 0x01
    1ae0:	c5 01       	movw	r24, r10
    1ae2:	02 96       	adiw	r24, 0x02	; 2
    1ae4:	5c 01       	movw	r10, r24
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <vfscanf+0x122>
    1ae8:	81 2c       	mov	r8, r1
    1aea:	91 2c       	mov	r9, r1
    1aec:	1e 36       	cpi	r17, 0x6E	; 110
    1aee:	49 f4       	brne	.+18     	; 0x1b02 <vfscanf+0x138>
    1af0:	f6 01       	movw	r30, r12
    1af2:	46 81       	ldd	r20, Z+6	; 0x06
    1af4:	57 81       	ldd	r21, Z+7	; 0x07
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	20 2f       	mov	r18, r16
    1afc:	c4 01       	movw	r24, r8
    1afe:	b3 dd       	rcall	.-1178   	; 0x1666 <putval>
    1b00:	7a cf       	rjmp	.-268    	; 0x19f6 <vfscanf+0x2c>
    1b02:	13 36       	cpi	r17, 0x63	; 99
    1b04:	a1 f4       	brne	.+40     	; 0x1b2e <vfscanf+0x164>
    1b06:	01 fd       	sbrc	r16, 1
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <vfscanf+0x144>
    1b0a:	ff 24       	eor	r15, r15
    1b0c:	f3 94       	inc	r15
    1b0e:	c6 01       	movw	r24, r12
    1b10:	9c d0       	rcall	.+312    	; 0x1c4a <fgetc>
    1b12:	97 fd       	sbrc	r25, 7
    1b14:	5a c0       	rjmp	.+180    	; 0x1bca <vfscanf+0x200>
    1b16:	81 14       	cp	r8, r1
    1b18:	91 04       	cpc	r9, r1
    1b1a:	29 f0       	breq	.+10     	; 0x1b26 <vfscanf+0x15c>
    1b1c:	f4 01       	movw	r30, r8
    1b1e:	80 83       	st	Z, r24
    1b20:	c4 01       	movw	r24, r8
    1b22:	01 96       	adiw	r24, 0x01	; 1
    1b24:	4c 01       	movw	r8, r24
    1b26:	fa 94       	dec	r15
    1b28:	f1 10       	cpse	r15, r1
    1b2a:	f1 cf       	rjmp	.-30     	; 0x1b0e <vfscanf+0x144>
    1b2c:	4a c0       	rjmp	.+148    	; 0x1bc2 <vfscanf+0x1f8>
    1b2e:	1b 35       	cpi	r17, 0x5B	; 91
    1b30:	51 f4       	brne	.+20     	; 0x1b46 <vfscanf+0x17c>
    1b32:	9e 01       	movw	r18, r28
    1b34:	a4 01       	movw	r20, r8
    1b36:	6f 2d       	mov	r22, r15
    1b38:	c6 01       	movw	r24, r12
    1b3a:	68 de       	rcall	.-816    	; 0x180c <conv_brk>
    1b3c:	ec 01       	movw	r28, r24
    1b3e:	89 2b       	or	r24, r25
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <vfscanf+0x17a>
    1b42:	3f c0       	rjmp	.+126    	; 0x1bc2 <vfscanf+0x1f8>
    1b44:	39 c0       	rjmp	.+114    	; 0x1bb8 <vfscanf+0x1ee>
    1b46:	c6 01       	movw	r24, r12
    1b48:	c1 dd       	rcall	.-1150   	; 0x16cc <skip_spaces>
    1b4a:	97 fd       	sbrc	r25, 7
    1b4c:	3e c0       	rjmp	.+124    	; 0x1bca <vfscanf+0x200>
    1b4e:	1f 36       	cpi	r17, 0x6F	; 111
    1b50:	49 f1       	breq	.+82     	; 0x1ba4 <vfscanf+0x1da>
    1b52:	28 f4       	brcc	.+10     	; 0x1b5e <vfscanf+0x194>
    1b54:	14 36       	cpi	r17, 0x64	; 100
    1b56:	21 f1       	breq	.+72     	; 0x1ba0 <vfscanf+0x1d6>
    1b58:	19 36       	cpi	r17, 0x69	; 105
    1b5a:	39 f1       	breq	.+78     	; 0x1baa <vfscanf+0x1e0>
    1b5c:	25 c0       	rjmp	.+74     	; 0x1ba8 <vfscanf+0x1de>
    1b5e:	13 37       	cpi	r17, 0x73	; 115
    1b60:	71 f0       	breq	.+28     	; 0x1b7e <vfscanf+0x1b4>
    1b62:	15 37       	cpi	r17, 0x75	; 117
    1b64:	e9 f0       	breq	.+58     	; 0x1ba0 <vfscanf+0x1d6>
    1b66:	20 c0       	rjmp	.+64     	; 0x1ba8 <vfscanf+0x1de>
    1b68:	81 14       	cp	r8, r1
    1b6a:	91 04       	cpc	r9, r1
    1b6c:	29 f0       	breq	.+10     	; 0x1b78 <vfscanf+0x1ae>
    1b6e:	f4 01       	movw	r30, r8
    1b70:	60 82       	st	Z, r6
    1b72:	c4 01       	movw	r24, r8
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	4c 01       	movw	r8, r24
    1b78:	fa 94       	dec	r15
    1b7a:	ff 20       	and	r15, r15
    1b7c:	59 f0       	breq	.+22     	; 0x1b94 <vfscanf+0x1ca>
    1b7e:	c6 01       	movw	r24, r12
    1b80:	64 d0       	rcall	.+200    	; 0x1c4a <fgetc>
    1b82:	3c 01       	movw	r6, r24
    1b84:	97 fd       	sbrc	r25, 7
    1b86:	06 c0       	rjmp	.+12     	; 0x1b94 <vfscanf+0x1ca>
    1b88:	37 d0       	rcall	.+110    	; 0x1bf8 <isspace>
    1b8a:	89 2b       	or	r24, r25
    1b8c:	69 f3       	breq	.-38     	; 0x1b68 <vfscanf+0x19e>
    1b8e:	b6 01       	movw	r22, r12
    1b90:	c3 01       	movw	r24, r6
    1b92:	d5 d0       	rcall	.+426    	; 0x1d3e <ungetc>
    1b94:	81 14       	cp	r8, r1
    1b96:	91 04       	cpc	r9, r1
    1b98:	a1 f0       	breq	.+40     	; 0x1bc2 <vfscanf+0x1f8>
    1b9a:	f4 01       	movw	r30, r8
    1b9c:	10 82       	st	Z, r1
    1b9e:	11 c0       	rjmp	.+34     	; 0x1bc2 <vfscanf+0x1f8>
    1ba0:	00 62       	ori	r16, 0x20	; 32
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <vfscanf+0x1e0>
    1ba4:	00 61       	ori	r16, 0x10	; 16
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <vfscanf+0x1e0>
    1ba8:	00 64       	ori	r16, 0x40	; 64
    1baa:	20 2f       	mov	r18, r16
    1bac:	a4 01       	movw	r20, r8
    1bae:	6f 2d       	mov	r22, r15
    1bb0:	c6 01       	movw	r24, r12
    1bb2:	a2 dd       	rcall	.-1212   	; 0x16f8 <conv_int>
    1bb4:	81 11       	cpse	r24, r1
    1bb6:	05 c0       	rjmp	.+10     	; 0x1bc2 <vfscanf+0x1f8>
    1bb8:	f6 01       	movw	r30, r12
    1bba:	83 81       	ldd	r24, Z+3	; 0x03
    1bbc:	80 73       	andi	r24, 0x30	; 48
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <vfscanf+0x200>
    1bc0:	06 c0       	rjmp	.+12     	; 0x1bce <vfscanf+0x204>
    1bc2:	00 fd       	sbrc	r16, 0
    1bc4:	18 cf       	rjmp	.-464    	; 0x19f6 <vfscanf+0x2c>
    1bc6:	53 94       	inc	r5
    1bc8:	16 cf       	rjmp	.-468    	; 0x19f6 <vfscanf+0x2c>
    1bca:	55 20       	and	r5, r5
    1bcc:	19 f0       	breq	.+6      	; 0x1bd4 <vfscanf+0x20a>
    1bce:	85 2d       	mov	r24, r5
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <vfscanf+0x20e>
    1bd4:	8f ef       	ldi	r24, 0xFF	; 255
    1bd6:	9f ef       	ldi	r25, 0xFF	; 255
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	cf 90       	pop	r12
    1be8:	bf 90       	pop	r11
    1bea:	af 90       	pop	r10
    1bec:	9f 90       	pop	r9
    1bee:	8f 90       	pop	r8
    1bf0:	7f 90       	pop	r7
    1bf2:	6f 90       	pop	r6
    1bf4:	5f 90       	pop	r5
    1bf6:	08 95       	ret

00001bf8 <isspace>:
    1bf8:	91 11       	cpse	r25, r1
    1bfa:	18 c1       	rjmp	.+560    	; 0x1e2c <__ctype_isfalse>
    1bfc:	80 32       	cpi	r24, 0x20	; 32
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <isspace+0xe>
    1c00:	89 50       	subi	r24, 0x09	; 9
    1c02:	85 50       	subi	r24, 0x05	; 5
    1c04:	d0 f7       	brcc	.-12     	; 0x1bfa <isspace+0x2>
    1c06:	08 95       	ret

00001c08 <strchr_P>:
    1c08:	fc 01       	movw	r30, r24
    1c0a:	05 90       	lpm	r0, Z+
    1c0c:	06 16       	cp	r0, r22
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <strchr_P+0x10>
    1c10:	00 20       	and	r0, r0
    1c12:	d9 f7       	brne	.-10     	; 0x1c0a <strchr_P+0x2>
    1c14:	c0 01       	movw	r24, r0
    1c16:	08 95       	ret
    1c18:	31 97       	sbiw	r30, 0x01	; 1
    1c1a:	cf 01       	movw	r24, r30
    1c1c:	08 95       	ret

00001c1e <strnlen_P>:
    1c1e:	fc 01       	movw	r30, r24
    1c20:	05 90       	lpm	r0, Z+
    1c22:	61 50       	subi	r22, 0x01	; 1
    1c24:	70 40       	sbci	r23, 0x00	; 0
    1c26:	01 10       	cpse	r0, r1
    1c28:	d8 f7       	brcc	.-10     	; 0x1c20 <strnlen_P+0x2>
    1c2a:	80 95       	com	r24
    1c2c:	90 95       	com	r25
    1c2e:	8e 0f       	add	r24, r30
    1c30:	9f 1f       	adc	r25, r31
    1c32:	08 95       	ret

00001c34 <strnlen>:
    1c34:	fc 01       	movw	r30, r24
    1c36:	61 50       	subi	r22, 0x01	; 1
    1c38:	70 40       	sbci	r23, 0x00	; 0
    1c3a:	01 90       	ld	r0, Z+
    1c3c:	01 10       	cpse	r0, r1
    1c3e:	d8 f7       	brcc	.-10     	; 0x1c36 <strnlen+0x2>
    1c40:	80 95       	com	r24
    1c42:	90 95       	com	r25
    1c44:	8e 0f       	add	r24, r30
    1c46:	9f 1f       	adc	r25, r31
    1c48:	08 95       	ret

00001c4a <fgetc>:
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	ec 01       	movw	r28, r24
    1c50:	2b 81       	ldd	r18, Y+3	; 0x03
    1c52:	20 ff       	sbrs	r18, 0
    1c54:	33 c0       	rjmp	.+102    	; 0x1cbc <fgetc+0x72>
    1c56:	26 ff       	sbrs	r18, 6
    1c58:	0a c0       	rjmp	.+20     	; 0x1c6e <fgetc+0x24>
    1c5a:	2f 7b       	andi	r18, 0xBF	; 191
    1c5c:	2b 83       	std	Y+3, r18	; 0x03
    1c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c60:	9f 81       	ldd	r25, Y+7	; 0x07
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	9f 83       	std	Y+7, r25	; 0x07
    1c66:	8e 83       	std	Y+6, r24	; 0x06
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	29 c0       	rjmp	.+82     	; 0x1cc0 <fgetc+0x76>
    1c6e:	22 ff       	sbrs	r18, 2
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <fgetc+0x46>
    1c72:	e8 81       	ld	r30, Y
    1c74:	f9 81       	ldd	r31, Y+1	; 0x01
    1c76:	80 81       	ld	r24, Z
    1c78:	08 2e       	mov	r0, r24
    1c7a:	00 0c       	add	r0, r0
    1c7c:	99 0b       	sbc	r25, r25
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	19 f4       	brne	.+6      	; 0x1c88 <fgetc+0x3e>
    1c82:	20 62       	ori	r18, 0x20	; 32
    1c84:	2b 83       	std	Y+3, r18	; 0x03
    1c86:	1a c0       	rjmp	.+52     	; 0x1cbc <fgetc+0x72>
    1c88:	31 96       	adiw	r30, 0x01	; 1
    1c8a:	f9 83       	std	Y+1, r31	; 0x01
    1c8c:	e8 83       	st	Y, r30
    1c8e:	0e c0       	rjmp	.+28     	; 0x1cac <fgetc+0x62>
    1c90:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c92:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c94:	09 95       	icall
    1c96:	97 ff       	sbrs	r25, 7
    1c98:	09 c0       	rjmp	.+18     	; 0x1cac <fgetc+0x62>
    1c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	11 f0       	breq	.+4      	; 0x1ca4 <fgetc+0x5a>
    1ca0:	80 e2       	ldi	r24, 0x20	; 32
    1ca2:	01 c0       	rjmp	.+2      	; 0x1ca6 <fgetc+0x5c>
    1ca4:	80 e1       	ldi	r24, 0x10	; 16
    1ca6:	82 2b       	or	r24, r18
    1ca8:	8b 83       	std	Y+3, r24	; 0x03
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <fgetc+0x72>
    1cac:	2e 81       	ldd	r18, Y+6	; 0x06
    1cae:	3f 81       	ldd	r19, Y+7	; 0x07
    1cb0:	2f 5f       	subi	r18, 0xFF	; 255
    1cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb4:	3f 83       	std	Y+7, r19	; 0x07
    1cb6:	2e 83       	std	Y+6, r18	; 0x06
    1cb8:	99 27       	eor	r25, r25
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <fgetc+0x76>
    1cbc:	8f ef       	ldi	r24, 0xFF	; 255
    1cbe:	9f ef       	ldi	r25, 0xFF	; 255
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	08 95       	ret

00001cc6 <fputc>:
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	fb 01       	movw	r30, r22
    1cd0:	23 81       	ldd	r18, Z+3	; 0x03
    1cd2:	21 fd       	sbrc	r18, 1
    1cd4:	03 c0       	rjmp	.+6      	; 0x1cdc <fputc+0x16>
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	9f ef       	ldi	r25, 0xFF	; 255
    1cda:	2c c0       	rjmp	.+88     	; 0x1d34 <fputc+0x6e>
    1cdc:	22 ff       	sbrs	r18, 2
    1cde:	16 c0       	rjmp	.+44     	; 0x1d0c <fputc+0x46>
    1ce0:	46 81       	ldd	r20, Z+6	; 0x06
    1ce2:	57 81       	ldd	r21, Z+7	; 0x07
    1ce4:	24 81       	ldd	r18, Z+4	; 0x04
    1ce6:	35 81       	ldd	r19, Z+5	; 0x05
    1ce8:	42 17       	cp	r20, r18
    1cea:	53 07       	cpc	r21, r19
    1cec:	44 f4       	brge	.+16     	; 0x1cfe <fputc+0x38>
    1cee:	a0 81       	ld	r26, Z
    1cf0:	b1 81       	ldd	r27, Z+1	; 0x01
    1cf2:	9d 01       	movw	r18, r26
    1cf4:	2f 5f       	subi	r18, 0xFF	; 255
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	31 83       	std	Z+1, r19	; 0x01
    1cfa:	20 83       	st	Z, r18
    1cfc:	8c 93       	st	X, r24
    1cfe:	26 81       	ldd	r18, Z+6	; 0x06
    1d00:	37 81       	ldd	r19, Z+7	; 0x07
    1d02:	2f 5f       	subi	r18, 0xFF	; 255
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
    1d06:	37 83       	std	Z+7, r19	; 0x07
    1d08:	26 83       	std	Z+6, r18	; 0x06
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <fputc+0x6e>
    1d0c:	8b 01       	movw	r16, r22
    1d0e:	ec 01       	movw	r28, r24
    1d10:	fb 01       	movw	r30, r22
    1d12:	00 84       	ldd	r0, Z+8	; 0x08
    1d14:	f1 85       	ldd	r31, Z+9	; 0x09
    1d16:	e0 2d       	mov	r30, r0
    1d18:	09 95       	icall
    1d1a:	89 2b       	or	r24, r25
    1d1c:	e1 f6       	brne	.-72     	; 0x1cd6 <fputc+0x10>
    1d1e:	d8 01       	movw	r26, r16
    1d20:	16 96       	adiw	r26, 0x06	; 6
    1d22:	8d 91       	ld	r24, X+
    1d24:	9c 91       	ld	r25, X
    1d26:	17 97       	sbiw	r26, 0x07	; 7
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	17 96       	adiw	r26, 0x07	; 7
    1d2c:	9c 93       	st	X, r25
    1d2e:	8e 93       	st	-X, r24
    1d30:	16 97       	sbiw	r26, 0x06	; 6
    1d32:	ce 01       	movw	r24, r28
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	1f 91       	pop	r17
    1d3a:	0f 91       	pop	r16
    1d3c:	08 95       	ret

00001d3e <ungetc>:
    1d3e:	fb 01       	movw	r30, r22
    1d40:	23 81       	ldd	r18, Z+3	; 0x03
    1d42:	20 ff       	sbrs	r18, 0
    1d44:	12 c0       	rjmp	.+36     	; 0x1d6a <ungetc+0x2c>
    1d46:	26 fd       	sbrc	r18, 6
    1d48:	10 c0       	rjmp	.+32     	; 0x1d6a <ungetc+0x2c>
    1d4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d4c:	3f ef       	ldi	r19, 0xFF	; 255
    1d4e:	93 07       	cpc	r25, r19
    1d50:	61 f0       	breq	.+24     	; 0x1d6a <ungetc+0x2c>
    1d52:	82 83       	std	Z+2, r24	; 0x02
    1d54:	2f 7d       	andi	r18, 0xDF	; 223
    1d56:	20 64       	ori	r18, 0x40	; 64
    1d58:	23 83       	std	Z+3, r18	; 0x03
    1d5a:	26 81       	ldd	r18, Z+6	; 0x06
    1d5c:	37 81       	ldd	r19, Z+7	; 0x07
    1d5e:	21 50       	subi	r18, 0x01	; 1
    1d60:	31 09       	sbc	r19, r1
    1d62:	37 83       	std	Z+7, r19	; 0x07
    1d64:	26 83       	std	Z+6, r18	; 0x06
    1d66:	99 27       	eor	r25, r25
    1d68:	08 95       	ret
    1d6a:	8f ef       	ldi	r24, 0xFF	; 255
    1d6c:	9f ef       	ldi	r25, 0xFF	; 255
    1d6e:	08 95       	ret

00001d70 <__ultoa_invert>:
    1d70:	fa 01       	movw	r30, r20
    1d72:	aa 27       	eor	r26, r26
    1d74:	28 30       	cpi	r18, 0x08	; 8
    1d76:	51 f1       	breq	.+84     	; 0x1dcc <__ultoa_invert+0x5c>
    1d78:	20 31       	cpi	r18, 0x10	; 16
    1d7a:	81 f1       	breq	.+96     	; 0x1ddc <__ultoa_invert+0x6c>
    1d7c:	e8 94       	clt
    1d7e:	6f 93       	push	r22
    1d80:	6e 7f       	andi	r22, 0xFE	; 254
    1d82:	6e 5f       	subi	r22, 0xFE	; 254
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	8f 4f       	sbci	r24, 0xFF	; 255
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	af 4f       	sbci	r26, 0xFF	; 255
    1d8c:	b1 e0       	ldi	r27, 0x01	; 1
    1d8e:	3e d0       	rcall	.+124    	; 0x1e0c <__ultoa_invert+0x9c>
    1d90:	b4 e0       	ldi	r27, 0x04	; 4
    1d92:	3c d0       	rcall	.+120    	; 0x1e0c <__ultoa_invert+0x9c>
    1d94:	67 0f       	add	r22, r23
    1d96:	78 1f       	adc	r23, r24
    1d98:	89 1f       	adc	r24, r25
    1d9a:	9a 1f       	adc	r25, r26
    1d9c:	a1 1d       	adc	r26, r1
    1d9e:	68 0f       	add	r22, r24
    1da0:	79 1f       	adc	r23, r25
    1da2:	8a 1f       	adc	r24, r26
    1da4:	91 1d       	adc	r25, r1
    1da6:	a1 1d       	adc	r26, r1
    1da8:	6a 0f       	add	r22, r26
    1daa:	71 1d       	adc	r23, r1
    1dac:	81 1d       	adc	r24, r1
    1dae:	91 1d       	adc	r25, r1
    1db0:	a1 1d       	adc	r26, r1
    1db2:	20 d0       	rcall	.+64     	; 0x1df4 <__ultoa_invert+0x84>
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <__ultoa_invert+0x48>
    1db6:	68 94       	set
    1db8:	3f 91       	pop	r19
    1dba:	2a e0       	ldi	r18, 0x0A	; 10
    1dbc:	26 9f       	mul	r18, r22
    1dbe:	11 24       	eor	r1, r1
    1dc0:	30 19       	sub	r19, r0
    1dc2:	30 5d       	subi	r19, 0xD0	; 208
    1dc4:	31 93       	st	Z+, r19
    1dc6:	de f6       	brtc	.-74     	; 0x1d7e <__ultoa_invert+0xe>
    1dc8:	cf 01       	movw	r24, r30
    1dca:	08 95       	ret
    1dcc:	46 2f       	mov	r20, r22
    1dce:	47 70       	andi	r20, 0x07	; 7
    1dd0:	40 5d       	subi	r20, 0xD0	; 208
    1dd2:	41 93       	st	Z+, r20
    1dd4:	b3 e0       	ldi	r27, 0x03	; 3
    1dd6:	0f d0       	rcall	.+30     	; 0x1df6 <__ultoa_invert+0x86>
    1dd8:	c9 f7       	brne	.-14     	; 0x1dcc <__ultoa_invert+0x5c>
    1dda:	f6 cf       	rjmp	.-20     	; 0x1dc8 <__ultoa_invert+0x58>
    1ddc:	46 2f       	mov	r20, r22
    1dde:	4f 70       	andi	r20, 0x0F	; 15
    1de0:	40 5d       	subi	r20, 0xD0	; 208
    1de2:	4a 33       	cpi	r20, 0x3A	; 58
    1de4:	18 f0       	brcs	.+6      	; 0x1dec <__ultoa_invert+0x7c>
    1de6:	49 5d       	subi	r20, 0xD9	; 217
    1de8:	31 fd       	sbrc	r19, 1
    1dea:	40 52       	subi	r20, 0x20	; 32
    1dec:	41 93       	st	Z+, r20
    1dee:	02 d0       	rcall	.+4      	; 0x1df4 <__ultoa_invert+0x84>
    1df0:	a9 f7       	brne	.-22     	; 0x1ddc <__ultoa_invert+0x6c>
    1df2:	ea cf       	rjmp	.-44     	; 0x1dc8 <__ultoa_invert+0x58>
    1df4:	b4 e0       	ldi	r27, 0x04	; 4
    1df6:	a6 95       	lsr	r26
    1df8:	97 95       	ror	r25
    1dfa:	87 95       	ror	r24
    1dfc:	77 95       	ror	r23
    1dfe:	67 95       	ror	r22
    1e00:	ba 95       	dec	r27
    1e02:	c9 f7       	brne	.-14     	; 0x1df6 <__ultoa_invert+0x86>
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	61 05       	cpc	r22, r1
    1e08:	71 05       	cpc	r23, r1
    1e0a:	08 95       	ret
    1e0c:	9b 01       	movw	r18, r22
    1e0e:	ac 01       	movw	r20, r24
    1e10:	0a 2e       	mov	r0, r26
    1e12:	06 94       	lsr	r0
    1e14:	57 95       	ror	r21
    1e16:	47 95       	ror	r20
    1e18:	37 95       	ror	r19
    1e1a:	27 95       	ror	r18
    1e1c:	ba 95       	dec	r27
    1e1e:	c9 f7       	brne	.-14     	; 0x1e12 <__ultoa_invert+0xa2>
    1e20:	62 0f       	add	r22, r18
    1e22:	73 1f       	adc	r23, r19
    1e24:	84 1f       	adc	r24, r20
    1e26:	95 1f       	adc	r25, r21
    1e28:	a0 1d       	adc	r26, r0
    1e2a:	08 95       	ret

00001e2c <__ctype_isfalse>:
    1e2c:	99 27       	eor	r25, r25
    1e2e:	88 27       	eor	r24, r24

00001e30 <__ctype_istrue>:
    1e30:	08 95       	ret

00001e32 <_exit>:
    1e32:	f8 94       	cli

00001e34 <__stop_program>:
    1e34:	ff cf       	rjmp	.-2      	; 0x1e34 <__stop_program>
